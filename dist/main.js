!function(t){function n(n){for(var e,o,i=n[0],a=n[1],s=0,c=[];s<i.length;s++)o=i[s],r[o]&&c.push(r[o][0]),r[o]=0;for(e in a)Object.prototype.hasOwnProperty.call(a,e)&&(t[e]=a[e]);for(u&&u(n);c.length;)c.shift()()}var e={},r={0:0};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.e=function(t){var n=[],e=r[t];if(0!==e)if(e)n.push(e[2]);else{var i=new Promise(function(n,o){e=r[t]=[n,o]});n.push(e[2]=i);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(t){return o.p+""+t+".main.js"}(t),a=function(n){s.onerror=s.onload=null,clearTimeout(u);var e=r[t];if(0!==e){if(e){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src,a=new Error("Loading chunk "+t+" failed.\n("+o+": "+i+")");a.type=o,a.request=i,e[1](a)}r[t]=void 0}};var u=setTimeout(function(){a({type:"timeout",target:s})},12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(n)},o.m=t,o.c=e,o.d=function(t,n,e){o.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,n){if(1&n&&(t=o(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(o.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)o.d(e,r,function(n){return t[n]}.bind(null,r));return e},o.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(n,"a",n),n},o.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},o.p="/web/",o.oe=function(t){throw console.error(t),t};var i=window.webpackJsonp=window.webpackJsonp||[],a=i.push.bind(i);i.push=n,i=i.slice();for(var s=0;s<i.length;s++)n(i[s]);var u=a;o(o.s=16)}([function(t,n,e){"use strict";var r=e(9),o=e(23),i=Object.prototype.toString;function a(t){return"[object Array]"===i.call(t)}function s(t){return null!==t&&"object"==typeof t}function u(t){return"[object Function]"===i.call(t)}function c(t,n){if(null!=t)if("object"!=typeof t&&(t=[t]),a(t))for(var e=0,r=t.length;e<r;e++)n.call(null,t[e],e,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&n.call(null,t[o],o,t)}t.exports={isArray:a,isArrayBuffer:function(t){return"[object ArrayBuffer]"===i.call(t)},isBuffer:o,isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:s,isUndefined:function(t){return void 0===t},isDate:function(t){return"[object Date]"===i.call(t)},isFile:function(t){return"[object File]"===i.call(t)},isBlob:function(t){return"[object Blob]"===i.call(t)},isFunction:u,isStream:function(t){return s(t)&&u(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function t(){var n={};function e(e,r){"object"==typeof n[r]&&"object"==typeof e?n[r]=t(n[r],e):n[r]=e}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],e);return n},extend:function(t,n,e){return c(n,function(n,o){t[o]=e&&"function"==typeof n?r(n,e):n}),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,n,e){"use strict";(function(t,e){
/*!
 * Vue.js v2.5.21
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({});function o(t){return null==t}function i(t){return null!=t}function a(t){return!0===t}function s(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function u(t){return null!==t&&"object"==typeof t}var c=Object.prototype.toString;function f(t){return"[object Object]"===c.call(t)}function p(t){return"[object RegExp]"===c.call(t)}function l(t){var n=parseFloat(String(t));return n>=0&&Math.floor(n)===n&&isFinite(t)}function h(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function d(t){var n=parseFloat(t);return isNaN(n)?t:n}function v(t,n){for(var e=Object.create(null),r=t.split(","),o=0;o<r.length;o++)e[r[o]]=!0;return n?function(t){return e[t.toLowerCase()]}:function(t){return e[t]}}v("slot,component",!0);var y=v("key,ref,slot,slot-scope,is");function m(t,n){if(t.length){var e=t.indexOf(n);if(e>-1)return t.splice(e,1)}}var g=Object.prototype.hasOwnProperty;function _(t,n){return g.call(t,n)}function w(t){var n=Object.create(null);return function(e){return n[e]||(n[e]=t(e))}}var b=/-(\w)/g,x=w(function(t){return t.replace(b,function(t,n){return n?n.toUpperCase():""})}),C=w(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),A=/\B([A-Z])/g,O=w(function(t){return t.replace(A,"-$1").toLowerCase()});var E=Function.prototype.bind?function(t,n){return t.bind(n)}:function(t,n){function e(e){var r=arguments.length;return r?r>1?t.apply(n,arguments):t.call(n,e):t.call(n)}return e._length=t.length,e};function T(t,n){n=n||0;for(var e=t.length-n,r=new Array(e);e--;)r[e]=t[e+n];return r}function $(t,n){for(var e in n)t[e]=n[e];return t}function S(t){for(var n={},e=0;e<t.length;e++)t[e]&&$(n,t[e]);return n}function L(t,n,e){}var I=function(t,n,e){return!1},U=function(t){return t};function M(t,n){if(t===n)return!0;var e=u(t),r=u(n);if(!e||!r)return!e&&!r&&String(t)===String(n);try{var o=Array.isArray(t),i=Array.isArray(n);if(o&&i)return t.length===n.length&&t.every(function(t,e){return M(t,n[e])});if(t instanceof Date&&n instanceof Date)return t.getTime()===n.getTime();if(o||i)return!1;var a=Object.keys(t),s=Object.keys(n);return a.length===s.length&&a.every(function(e){return M(t[e],n[e])})}catch(t){return!1}}function P(t,n){for(var e=0;e<t.length;e++)if(M(t[e],n))return e;return-1}function j(t){var n=!1;return function(){n||(n=!0,t.apply(this,arguments))}}var R="data-server-rendered",B=["component","directive","filter"],k=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:I,isReservedAttr:I,isUnknownElement:I,getTagNamespace:L,parsePlatformTagName:U,mustUseProp:I,async:!0,_lifecycleHooks:k};function q(t,n,e,r){Object.defineProperty(t,n,{value:e,enumerable:!!r,writable:!0,configurable:!0})}var H=/[^\w.$]/;var D,G="__proto__"in{},X="undefined"!=typeof window,z="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,N=z&&WXEnvironment.platform.toLowerCase(),J=X&&window.navigator.userAgent.toLowerCase(),W=J&&/msie|trident/.test(J),K=J&&J.indexOf("msie 9.0")>0,Y=J&&J.indexOf("edge/")>0,Z=(J&&J.indexOf("android"),J&&/iphone|ipad|ipod|ios/.test(J)||"ios"===N),V=(J&&/chrome\/\d+/.test(J),{}.watch),Q=!1;if(X)try{var tt={};Object.defineProperty(tt,"passive",{get:function(){Q=!0}}),window.addEventListener("test-passive",null,tt)}catch(t){}var nt=function(){return void 0===D&&(D=!X&&!z&&void 0!==t&&(t.process&&"server"===t.process.env.VUE_ENV)),D},et=X&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function rt(t){return"function"==typeof t&&/native code/.test(t.toString())}var ot,it="undefined"!=typeof Symbol&&rt(Symbol)&&"undefined"!=typeof Reflect&&rt(Reflect.ownKeys);ot="undefined"!=typeof Set&&rt(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var at=L,st=0,ut=function(){this.id=st++,this.subs=[]};ut.prototype.addSub=function(t){this.subs.push(t)},ut.prototype.removeSub=function(t){m(this.subs,t)},ut.prototype.depend=function(){ut.target&&ut.target.addDep(this)},ut.prototype.notify=function(){var t=this.subs.slice();for(var n=0,e=t.length;n<e;n++)t[n].update()},ut.target=null;var ct=[];function ft(t){ct.push(t),ut.target=t}function pt(){ct.pop(),ut.target=ct[ct.length-1]}var lt=function(t,n,e,r,o,i,a,s){this.tag=t,this.data=n,this.children=e,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=n&&n.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ht={child:{configurable:!0}};ht.child.get=function(){return this.componentInstance},Object.defineProperties(lt.prototype,ht);var dt=function(t){void 0===t&&(t="");var n=new lt;return n.text=t,n.isComment=!0,n};function vt(t){return new lt(void 0,void 0,void 0,String(t))}function yt(t){var n=new lt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return n.ns=t.ns,n.isStatic=t.isStatic,n.key=t.key,n.isComment=t.isComment,n.fnContext=t.fnContext,n.fnOptions=t.fnOptions,n.fnScopeId=t.fnScopeId,n.asyncMeta=t.asyncMeta,n.isCloned=!0,n}var mt=Array.prototype,gt=Object.create(mt);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var n=mt[t];q(gt,t,function(){for(var e=[],r=arguments.length;r--;)e[r]=arguments[r];var o,i=n.apply(this,e),a=this.__ob__;switch(t){case"push":case"unshift":o=e;break;case"splice":o=e.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i})});var _t=Object.getOwnPropertyNames(gt),wt=!0;function bt(t){wt=t}var xt=function(t){var n;this.value=t,this.dep=new ut,this.vmCount=0,q(t,"__ob__",this),Array.isArray(t)?(G?(n=gt,t.__proto__=n):function(t,n,e){for(var r=0,o=e.length;r<o;r++){var i=e[r];q(t,i,n[i])}}(t,gt,_t),this.observeArray(t)):this.walk(t)};function Ct(t,n){var e;if(u(t)&&!(t instanceof lt))return _(t,"__ob__")&&t.__ob__ instanceof xt?e=t.__ob__:wt&&!nt()&&(Array.isArray(t)||f(t))&&Object.isExtensible(t)&&!t._isVue&&(e=new xt(t)),n&&e&&e.vmCount++,e}function At(t,n,e,r,o){var i=new ut,a=Object.getOwnPropertyDescriptor(t,n);if(!a||!1!==a.configurable){var s=a&&a.get,u=a&&a.set;s&&!u||2!==arguments.length||(e=t[n]);var c=!o&&Ct(e);Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:function(){var n=s?s.call(t):e;return ut.target&&(i.depend(),c&&(c.dep.depend(),Array.isArray(n)&&function t(n){for(var e=void 0,r=0,o=n.length;r<o;r++)(e=n[r])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&t(e)}(n))),n},set:function(n){var r=s?s.call(t):e;n===r||n!=n&&r!=r||s&&!u||(u?u.call(t,n):e=n,c=!o&&Ct(n),i.notify())}})}}function Ot(t,n,e){if(Array.isArray(t)&&l(n))return t.length=Math.max(t.length,n),t.splice(n,1,e),e;if(n in t&&!(n in Object.prototype))return t[n]=e,e;var r=t.__ob__;return t._isVue||r&&r.vmCount?e:r?(At(r.value,n,e),r.dep.notify(),e):(t[n]=e,e)}function Et(t,n){if(Array.isArray(t)&&l(n))t.splice(n,1);else{var e=t.__ob__;t._isVue||e&&e.vmCount||_(t,n)&&(delete t[n],e&&e.dep.notify())}}xt.prototype.walk=function(t){for(var n=Object.keys(t),e=0;e<n.length;e++)At(t,n[e])},xt.prototype.observeArray=function(t){for(var n=0,e=t.length;n<e;n++)Ct(t[n])};var Tt=F.optionMergeStrategies;function $t(t,n){if(!n)return t;for(var e,r,o,i=Object.keys(n),a=0;a<i.length;a++)r=t[e=i[a]],o=n[e],_(t,e)?r!==o&&f(r)&&f(o)&&$t(r,o):Ot(t,e,o);return t}function St(t,n,e){return e?function(){var r="function"==typeof n?n.call(e,e):n,o="function"==typeof t?t.call(e,e):t;return r?$t(r,o):o}:n?t?function(){return $t("function"==typeof n?n.call(this,this):n,"function"==typeof t?t.call(this,this):t)}:n:t}function Lt(t,n){return n?t?t.concat(n):Array.isArray(n)?n:[n]:t}function It(t,n,e,r){var o=Object.create(t||null);return n?$(o,n):o}Tt.data=function(t,n,e){return e?St(t,n,e):n&&"function"!=typeof n?t:St(t,n)},k.forEach(function(t){Tt[t]=Lt}),B.forEach(function(t){Tt[t+"s"]=It}),Tt.watch=function(t,n,e,r){if(t===V&&(t=void 0),n===V&&(n=void 0),!n)return Object.create(t||null);if(!t)return n;var o={};for(var i in $(o,t),n){var a=o[i],s=n[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Tt.props=Tt.methods=Tt.inject=Tt.computed=function(t,n,e,r){if(!t)return n;var o=Object.create(null);return $(o,t),n&&$(o,n),o},Tt.provide=St;var Ut=function(t,n){return void 0===n?t:n};function Mt(t,n,e){if("function"==typeof n&&(n=n.options),function(t,n){var e=t.props;if(e){var r,o,i={};if(Array.isArray(e))for(r=e.length;r--;)"string"==typeof(o=e[r])&&(i[x(o)]={type:null});else if(f(e))for(var a in e)o=e[a],i[x(a)]=f(o)?o:{type:o};t.props=i}}(n),function(t,n){var e=t.inject;if(e){var r=t.inject={};if(Array.isArray(e))for(var o=0;o<e.length;o++)r[e[o]]={from:e[o]};else if(f(e))for(var i in e){var a=e[i];r[i]=f(a)?$({from:i},a):{from:a}}}}(n),function(t){var n=t.directives;if(n)for(var e in n){var r=n[e];"function"==typeof r&&(n[e]={bind:r,update:r})}}(n),!n._base&&(n.extends&&(t=Mt(t,n.extends,e)),n.mixins))for(var r=0,o=n.mixins.length;r<o;r++)t=Mt(t,n.mixins[r],e);var i,a={};for(i in t)s(i);for(i in n)_(t,i)||s(i);function s(r){var o=Tt[r]||Ut;a[r]=o(t[r],n[r],e,r)}return a}function Pt(t,n,e,r){if("string"==typeof e){var o=t[n];if(_(o,e))return o[e];var i=x(e);if(_(o,i))return o[i];var a=C(i);return _(o,a)?o[a]:o[e]||o[i]||o[a]}}function jt(t,n,e,r){var o=n[t],i=!_(e,t),a=e[t],s=kt(Boolean,o.type);if(s>-1)if(i&&!_(o,"default"))a=!1;else if(""===a||a===O(t)){var u=kt(String,o.type);(u<0||s<u)&&(a=!0)}if(void 0===a){a=function(t,n,e){if(!_(n,"default"))return;var r=n.default;0;if(t&&t.$options.propsData&&void 0===t.$options.propsData[e]&&void 0!==t._props[e])return t._props[e];return"function"==typeof r&&"Function"!==Rt(n.type)?r.call(t):r}(r,o,t);var c=wt;bt(!0),Ct(a),bt(c)}return a}function Rt(t){var n=t&&t.toString().match(/^\s*function (\w+)/);return n?n[1]:""}function Bt(t,n){return Rt(t)===Rt(n)}function kt(t,n){if(!Array.isArray(n))return Bt(n,t)?0:-1;for(var e=0,r=n.length;e<r;e++)if(Bt(n[e],t))return e;return-1}function Ft(t,n,e){if(n)for(var r=n;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,t,n,e))return}catch(t){qt(t,r,"errorCaptured hook")}}qt(t,n,e)}function qt(t,n,e){if(F.errorHandler)try{return F.errorHandler.call(null,t,n,e)}catch(t){Ht(t,null,"config.errorHandler")}Ht(t,n,e)}function Ht(t,n,e){if(!X&&!z||"undefined"==typeof console)throw t;console.error(t)}var Dt,Gt,Xt=[],zt=!1;function Nt(){zt=!1;var t=Xt.slice(0);Xt.length=0;for(var n=0;n<t.length;n++)t[n]()}var Jt=!1;if(void 0!==e&&rt(e))Gt=function(){e(Nt)};else if("undefined"==typeof MessageChannel||!rt(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())Gt=function(){setTimeout(Nt,0)};else{var Wt=new MessageChannel,Kt=Wt.port2;Wt.port1.onmessage=Nt,Gt=function(){Kt.postMessage(1)}}if("undefined"!=typeof Promise&&rt(Promise)){var Yt=Promise.resolve();Dt=function(){Yt.then(Nt),Z&&setTimeout(L)}}else Dt=Gt;function Zt(t,n){var e;if(Xt.push(function(){if(t)try{t.call(n)}catch(t){Ft(t,n,"nextTick")}else e&&e(n)}),zt||(zt=!0,Jt?Gt():Dt()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){e=t})}var Vt=new ot;function Qt(t){!function t(n,e){var r,o;var i=Array.isArray(n);if(!i&&!u(n)||Object.isFrozen(n)||n instanceof lt)return;if(n.__ob__){var a=n.__ob__.dep.id;if(e.has(a))return;e.add(a)}if(i)for(r=n.length;r--;)t(n[r],e);else for(o=Object.keys(n),r=o.length;r--;)t(n[o[r]],e)}(t,Vt),Vt.clear()}var tn,nn=w(function(t){var n="&"===t.charAt(0),e="~"===(t=n?t.slice(1):t).charAt(0),r="!"===(t=e?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:e,capture:r,passive:n}});function en(t){function n(){var t=arguments,e=n.fns;if(!Array.isArray(e))return e.apply(null,arguments);for(var r=e.slice(),o=0;o<r.length;o++)r[o].apply(null,t)}return n.fns=t,n}function rn(t,n,e,r,i,s){var u,c,f,p;for(u in t)c=t[u],f=n[u],p=nn(u),o(c)||(o(f)?(o(c.fns)&&(c=t[u]=en(c)),a(p.once)&&(c=t[u]=i(p.name,c,p.capture)),e(p.name,c,p.capture,p.passive,p.params)):c!==f&&(f.fns=c,t[u]=f));for(u in n)o(t[u])&&r((p=nn(u)).name,n[u],p.capture)}function on(t,n,e){var r;t instanceof lt&&(t=t.data.hook||(t.data.hook={}));var s=t[n];function u(){e.apply(this,arguments),m(r.fns,u)}o(s)?r=en([u]):i(s.fns)&&a(s.merged)?(r=s).fns.push(u):r=en([s,u]),r.merged=!0,t[n]=r}function an(t,n,e,r,o){if(i(n)){if(_(n,e))return t[e]=n[e],o||delete n[e],!0;if(_(n,r))return t[e]=n[r],o||delete n[r],!0}return!1}function sn(t){return s(t)?[vt(t)]:Array.isArray(t)?function t(n,e){var r=[];var u,c,f,p;for(u=0;u<n.length;u++)o(c=n[u])||"boolean"==typeof c||(f=r.length-1,p=r[f],Array.isArray(c)?c.length>0&&(un((c=t(c,(e||"")+"_"+u))[0])&&un(p)&&(r[f]=vt(p.text+c[0].text),c.shift()),r.push.apply(r,c)):s(c)?un(p)?r[f]=vt(p.text+c):""!==c&&r.push(vt(c)):un(c)&&un(p)?r[f]=vt(p.text+c.text):(a(n._isVList)&&i(c.tag)&&o(c.key)&&i(e)&&(c.key="__vlist"+e+"_"+u+"__"),r.push(c)));return r}(t):void 0}function un(t){return i(t)&&i(t.text)&&!1===t.isComment}function cn(t,n){return(t.__esModule||it&&"Module"===t[Symbol.toStringTag])&&(t=t.default),u(t)?n.extend(t):t}function fn(t){return t.isComment&&t.asyncFactory}function pn(t){if(Array.isArray(t))for(var n=0;n<t.length;n++){var e=t[n];if(i(e)&&(i(e.componentOptions)||fn(e)))return e}}function ln(t,n){tn.$on(t,n)}function hn(t,n){tn.$off(t,n)}function dn(t,n){var e=tn;return function r(){null!==n.apply(null,arguments)&&e.$off(t,r)}}function vn(t,n,e){tn=t,rn(n,e||{},ln,hn,dn),tn=void 0}function yn(t,n){var e={};if(!t)return e;for(var r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==n&&i.fnContext!==n||!a||null==a.slot)(e.default||(e.default=[])).push(i);else{var s=a.slot,u=e[s]||(e[s]=[]);"template"===i.tag?u.push.apply(u,i.children||[]):u.push(i)}}for(var c in e)e[c].every(mn)&&delete e[c];return e}function mn(t){return t.isComment&&!t.asyncFactory||" "===t.text}function gn(t,n){n=n||{};for(var e=0;e<t.length;e++)Array.isArray(t[e])?gn(t[e],n):n[t[e].key]=t[e].fn;return n}var _n=null;function wn(t){var n=_n;return _n=t,function(){_n=n}}function bn(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function xn(t,n){if(n){if(t._directInactive=!1,bn(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var e=0;e<t.$children.length;e++)xn(t.$children[e]);Cn(t,"activated")}}function Cn(t,n){ft();var e=t.$options[n];if(e)for(var r=0,o=e.length;r<o;r++)try{e[r].call(t)}catch(e){Ft(e,t,n+" hook")}t._hasHookEvent&&t.$emit("hook:"+n),pt()}var An=[],On=[],En={},Tn=!1,$n=!1,Sn=0;function Ln(){var t,n;for($n=!0,An.sort(function(t,n){return t.id-n.id}),Sn=0;Sn<An.length;Sn++)(t=An[Sn]).before&&t.before(),n=t.id,En[n]=null,t.run();var e=On.slice(),r=An.slice();Sn=An.length=On.length=0,En={},Tn=$n=!1,function(t){for(var n=0;n<t.length;n++)t[n]._inactive=!0,xn(t[n],!0)}(e),function(t){var n=t.length;for(;n--;){var e=t[n],r=e.vm;r._watcher===e&&r._isMounted&&!r._isDestroyed&&Cn(r,"updated")}}(r),et&&F.devtools&&et.emit("flush")}var In=0,Un=function(t,n,e,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=e,this.id=++In,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ot,this.newDepIds=new ot,this.expression="","function"==typeof n?this.getter=n:(this.getter=function(t){if(!H.test(t)){var n=t.split(".");return function(t){for(var e=0;e<n.length;e++){if(!t)return;t=t[n[e]]}return t}}}(n),this.getter||(this.getter=L)),this.value=this.lazy?void 0:this.get()};Un.prototype.get=function(){var t;ft(this);var n=this.vm;try{t=this.getter.call(n,n)}catch(t){if(!this.user)throw t;Ft(t,n,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Qt(t),pt(),this.cleanupDeps()}return t},Un.prototype.addDep=function(t){var n=t.id;this.newDepIds.has(n)||(this.newDepIds.add(n),this.newDeps.push(t),this.depIds.has(n)||t.addSub(this))},Un.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var n=this.deps[t];this.newDepIds.has(n.id)||n.removeSub(this)}var e=this.depIds;this.depIds=this.newDepIds,this.newDepIds=e,this.newDepIds.clear(),e=this.deps,this.deps=this.newDeps,this.newDeps=e,this.newDeps.length=0},Un.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var n=t.id;if(null==En[n]){if(En[n]=!0,$n){for(var e=An.length-1;e>Sn&&An[e].id>t.id;)e--;An.splice(e+1,0,t)}else An.push(t);Tn||(Tn=!0,Zt(Ln))}}(this)},Un.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||u(t)||this.deep){var n=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,n)}catch(t){Ft(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,n)}}},Un.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Un.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},Un.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||m(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var Mn={enumerable:!0,configurable:!0,get:L,set:L};function Pn(t,n,e){Mn.get=function(){return this[n][e]},Mn.set=function(t){this[n][e]=t},Object.defineProperty(t,e,Mn)}function jn(t){t._watchers=[];var n=t.$options;n.props&&function(t,n){var e=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[];t.$parent&&bt(!1);var i=function(i){o.push(i);var a=jt(i,n,e,t);At(r,i,a),i in t||Pn(t,"_props",i)};for(var a in n)i(a);bt(!0)}(t,n.props),n.methods&&function(t,n){t.$options.props;for(var e in n)t[e]="function"!=typeof n[e]?L:E(n[e],t)}(t,n.methods),n.data?function(t){var n=t.$options.data;f(n=t._data="function"==typeof n?function(t,n){ft();try{return t.call(n,n)}catch(t){return Ft(t,n,"data()"),{}}finally{pt()}}(n,t):n||{})||(n={});var e=Object.keys(n),r=t.$options.props,o=(t.$options.methods,e.length);for(;o--;){var i=e[o];0,r&&_(r,i)||(a=void 0,36!==(a=(i+"").charCodeAt(0))&&95!==a&&Pn(t,"_data",i))}var a;Ct(n,!0)}(t):Ct(t._data={},!0),n.computed&&function(t,n){var e=t._computedWatchers=Object.create(null),r=nt();for(var o in n){var i=n[o],a="function"==typeof i?i:i.get;0,r||(e[o]=new Un(t,a||L,L,Rn)),o in t||Bn(t,o,i)}}(t,n.computed),n.watch&&n.watch!==V&&function(t,n){for(var e in n){var r=n[e];if(Array.isArray(r))for(var o=0;o<r.length;o++)qn(t,e,r[o]);else qn(t,e,r)}}(t,n.watch)}var Rn={lazy:!0};function Bn(t,n,e){var r=!nt();"function"==typeof e?(Mn.get=r?kn(n):Fn(e),Mn.set=L):(Mn.get=e.get?r&&!1!==e.cache?kn(n):Fn(e.get):L,Mn.set=e.set||L),Object.defineProperty(t,n,Mn)}function kn(t){return function(){var n=this._computedWatchers&&this._computedWatchers[t];if(n)return n.dirty&&n.evaluate(),ut.target&&n.depend(),n.value}}function Fn(t){return function(){return t.call(this,this)}}function qn(t,n,e,r){return f(e)&&(r=e,e=e.handler),"string"==typeof e&&(e=t[e]),t.$watch(n,e,r)}function Hn(t,n){if(t){for(var e=Object.create(null),r=it?Reflect.ownKeys(t).filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}):Object.keys(t),o=0;o<r.length;o++){for(var i=r[o],a=t[i].from,s=n;s;){if(s._provided&&_(s._provided,a)){e[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[i]){var u=t[i].default;e[i]="function"==typeof u?u.call(n):u}else 0}return e}}function Dn(t,n){var e,r,o,a,s;if(Array.isArray(t)||"string"==typeof t)for(e=new Array(t.length),r=0,o=t.length;r<o;r++)e[r]=n(t[r],r);else if("number"==typeof t)for(e=new Array(t),r=0;r<t;r++)e[r]=n(r+1,r);else if(u(t))for(a=Object.keys(t),e=new Array(a.length),r=0,o=a.length;r<o;r++)s=a[r],e[r]=n(t[s],s,r);return i(e)||(e=[]),e._isVList=!0,e}function Gn(t,n,e,r){var o,i=this.$scopedSlots[t];i?(e=e||{},r&&(e=$($({},r),e)),o=i(e)||n):o=this.$slots[t]||n;var a=e&&e.slot;return a?this.$createElement("template",{slot:a},o):o}function Xn(t){return Pt(this.$options,"filters",t)||U}function zn(t,n){return Array.isArray(t)?-1===t.indexOf(n):t!==n}function Nn(t,n,e,r,o){var i=F.keyCodes[n]||e;return o&&r&&!F.keyCodes[n]?zn(o,r):i?zn(i,t):r?O(r)!==n:void 0}function Jn(t,n,e,r,o){if(e)if(u(e)){var i;Array.isArray(e)&&(e=S(e));var a=function(a){if("class"===a||"style"===a||y(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||F.mustUseProp(n,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var u=x(a);a in i||u in i||(i[a]=e[a],o&&((t.on||(t.on={}))["update:"+u]=function(t){e[a]=t}))};for(var s in e)a(s)}else;return t}function Wn(t,n){var e=this._staticTrees||(this._staticTrees=[]),r=e[t];return r&&!n?r:(Yn(r=e[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function Kn(t,n,e){return Yn(t,"__once__"+n+(e?"_"+e:""),!0),t}function Yn(t,n,e){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Zn(t[r],n+"_"+r,e);else Zn(t,n,e)}function Zn(t,n,e){t.isStatic=!0,t.key=n,t.isOnce=e}function Vn(t,n){if(n)if(f(n)){var e=t.on=t.on?$({},t.on):{};for(var r in n){var o=e[r],i=n[r];e[r]=o?[].concat(o,i):i}}else;return t}function Qn(t){t._o=Kn,t._n=d,t._s=h,t._l=Dn,t._t=Gn,t._q=M,t._i=P,t._m=Wn,t._f=Xn,t._k=Nn,t._b=Jn,t._v=vt,t._e=dt,t._u=gn,t._g=Vn}function te(t,n,e,o,i){var s,u=i.options;_(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var c=a(u._compiled),f=!c;this.data=t,this.props=n,this.children=e,this.parent=o,this.listeners=t.on||r,this.injections=Hn(u.inject,o),this.slots=function(){return yn(e,o)},c&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=t.scopedSlots||r),u._scopeId?this._c=function(t,n,e,r){var i=ce(s,t,n,e,r,f);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(t,n,e,r){return ce(s,t,n,e,r,f)}}function ne(t,n,e,r,o){var i=yt(t);return i.fnContext=e,i.fnOptions=r,n.slot&&((i.data||(i.data={})).slot=n.slot),i}function ee(t,n){for(var e in n)t[x(e)]=n[e]}Qn(te.prototype);var re={init:function(t,n){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var e=t;re.prepatch(e,e)}else{(t.componentInstance=function(t,n){var e={_isComponent:!0,_parentVnode:t,parent:n},r=t.data.inlineTemplate;i(r)&&(e.render=r.render,e.staticRenderFns=r.staticRenderFns);return new t.componentOptions.Ctor(e)}(t,_n)).$mount(n?t.elm:void 0,n)}},prepatch:function(t,n){var e=n.componentOptions;!function(t,n,e,o,i){var a=!!(i||t.$options._renderChildren||o.data.scopedSlots||t.$scopedSlots!==r);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||r,t.$listeners=e||r,n&&t.$options.props){bt(!1);for(var s=t._props,u=t.$options._propKeys||[],c=0;c<u.length;c++){var f=u[c],p=t.$options.props;s[f]=jt(f,p,n,t)}bt(!0),t.$options.propsData=n}e=e||r;var l=t.$options._parentListeners;t.$options._parentListeners=e,vn(t,e,l),a&&(t.$slots=yn(i,o.context),t.$forceUpdate())}(n.componentInstance=t.componentInstance,e.propsData,e.listeners,n,e.children)},insert:function(t){var n,e=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,Cn(r,"mounted")),t.data.keepAlive&&(e._isMounted?((n=r)._inactive=!1,On.push(n)):xn(r,!0))},destroy:function(t){var n=t.componentInstance;n._isDestroyed||(t.data.keepAlive?function t(n,e){if(!(e&&(n._directInactive=!0,bn(n))||n._inactive)){n._inactive=!0;for(var r=0;r<n.$children.length;r++)t(n.$children[r]);Cn(n,"deactivated")}}(n,!0):n.$destroy())}},oe=Object.keys(re);function ie(t,n,e,s,c){if(!o(t)){var f=e.$options._base;if(u(t)&&(t=f.extend(t)),"function"==typeof t){var p;if(o(t.cid)&&void 0===(t=function(t,n,e){if(a(t.error)&&i(t.errorComp))return t.errorComp;if(i(t.resolved))return t.resolved;if(a(t.loading)&&i(t.loadingComp))return t.loadingComp;if(!i(t.contexts)){var r=t.contexts=[e],s=!0,c=function(t){for(var n=0,e=r.length;n<e;n++)r[n].$forceUpdate();t&&(r.length=0)},f=j(function(e){t.resolved=cn(e,n),s||c(!0)}),p=j(function(n){i(t.errorComp)&&(t.error=!0,c(!0))}),l=t(f,p);return u(l)&&("function"==typeof l.then?o(t.resolved)&&l.then(f,p):i(l.component)&&"function"==typeof l.component.then&&(l.component.then(f,p),i(l.error)&&(t.errorComp=cn(l.error,n)),i(l.loading)&&(t.loadingComp=cn(l.loading,n),0===l.delay?t.loading=!0:setTimeout(function(){o(t.resolved)&&o(t.error)&&(t.loading=!0,c(!1))},l.delay||200)),i(l.timeout)&&setTimeout(function(){o(t.resolved)&&p(null)},l.timeout))),s=!1,t.loading?t.loadingComp:t.resolved}t.contexts.push(e)}(p=t,f,e)))return function(t,n,e,r,o){var i=dt();return i.asyncFactory=t,i.asyncMeta={data:n,context:e,children:r,tag:o},i}(p,n,e,s,c);n=n||{},pe(t),i(n.model)&&function(t,n){var e=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(n.props||(n.props={}))[e]=n.model.value;var o=n.on||(n.on={}),a=o[r],s=n.model.callback;i(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(o[r]=[s].concat(a)):o[r]=s}(t.options,n);var l=function(t,n,e){var r=n.options.props;if(!o(r)){var a={},s=t.attrs,u=t.props;if(i(s)||i(u))for(var c in r){var f=O(c);an(a,u,c,f,!0)||an(a,s,c,f,!1)}return a}}(n,t);if(a(t.options.functional))return function(t,n,e,o,a){var s=t.options,u={},c=s.props;if(i(c))for(var f in c)u[f]=jt(f,c,n||r);else i(e.attrs)&&ee(u,e.attrs),i(e.props)&&ee(u,e.props);var p=new te(e,u,a,o,t),l=s.render.call(null,p._c,p);if(l instanceof lt)return ne(l,e,p.parent,s);if(Array.isArray(l)){for(var h=sn(l)||[],d=new Array(h.length),v=0;v<h.length;v++)d[v]=ne(h[v],e,p.parent,s);return d}}(t,l,n,e,s);var h=n.on;if(n.on=n.nativeOn,a(t.options.abstract)){var d=n.slot;n={},d&&(n.slot=d)}!function(t){for(var n=t.hook||(t.hook={}),e=0;e<oe.length;e++){var r=oe[e],o=n[r],i=re[r];o===i||o&&o._merged||(n[r]=o?ae(i,o):i)}}(n);var v=t.options.name||c;return new lt("vue-component-"+t.cid+(v?"-"+v:""),n,void 0,void 0,void 0,e,{Ctor:t,propsData:l,listeners:h,tag:c,children:s},p)}}}function ae(t,n){var e=function(e,r){t(e,r),n(e,r)};return e._merged=!0,e}var se=1,ue=2;function ce(t,n,e,r,c,f){return(Array.isArray(e)||s(e))&&(c=r,r=e,e=void 0),a(f)&&(c=ue),function(t,n,e,r,s){if(i(e)&&i(e.__ob__))return dt();i(e)&&i(e.is)&&(n=e.is);if(!n)return dt();0;Array.isArray(r)&&"function"==typeof r[0]&&((e=e||{}).scopedSlots={default:r[0]},r.length=0);s===ue?r=sn(r):s===se&&(r=function(t){for(var n=0;n<t.length;n++)if(Array.isArray(t[n]))return Array.prototype.concat.apply([],t);return t}(r));var c,f;if("string"==typeof n){var p;f=t.$vnode&&t.$vnode.ns||F.getTagNamespace(n),c=F.isReservedTag(n)?new lt(F.parsePlatformTagName(n),e,r,void 0,void 0,t):e&&e.pre||!i(p=Pt(t.$options,"components",n))?new lt(n,e,r,void 0,void 0,t):ie(p,e,t,r,n)}else c=ie(n,e,t,r);return Array.isArray(c)?c:i(c)?(i(f)&&function t(n,e,r){n.ns=e;"foreignObject"===n.tag&&(e=void 0,r=!0);if(i(n.children))for(var s=0,u=n.children.length;s<u;s++){var c=n.children[s];i(c.tag)&&(o(c.ns)||a(r)&&"svg"!==c.tag)&&t(c,e,r)}}(c,f),i(e)&&function(t){u(t.style)&&Qt(t.style);u(t.class)&&Qt(t.class)}(e),c):dt()}(t,n,e,r,c)}var fe=0;function pe(t){var n=t.options;if(t.super){var e=pe(t.super);if(e!==t.superOptions){t.superOptions=e;var r=function(t){var n,e=t.options,r=t.extendOptions,o=t.sealedOptions;for(var i in e)e[i]!==o[i]&&(n||(n={}),n[i]=le(e[i],r[i],o[i]));return n}(t);r&&$(t.extendOptions,r),(n=t.options=Mt(e,t.extendOptions)).name&&(n.components[n.name]=t)}}return n}function le(t,n,e){if(Array.isArray(t)){var r=[];e=Array.isArray(e)?e:[e],n=Array.isArray(n)?n:[n];for(var o=0;o<t.length;o++)(n.indexOf(t[o])>=0||e.indexOf(t[o])<0)&&r.push(t[o]);return r}return t}function he(t){this._init(t)}function de(t){t.cid=0;var n=1;t.extend=function(t){t=t||{};var e=this,r=e.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||e.options.name;var a=function(t){this._init(t)};return(a.prototype=Object.create(e.prototype)).constructor=a,a.cid=n++,a.options=Mt(e.options,t),a.super=e,a.options.props&&function(t){var n=t.options.props;for(var e in n)Pn(t.prototype,"_props",e)}(a),a.options.computed&&function(t){var n=t.options.computed;for(var e in n)Bn(t.prototype,e,n[e])}(a),a.extend=e.extend,a.mixin=e.mixin,a.use=e.use,B.forEach(function(t){a[t]=e[t]}),i&&(a.options.components[i]=a),a.superOptions=e.options,a.extendOptions=t,a.sealedOptions=$({},a.options),o[r]=a,a}}function ve(t){return t&&(t.Ctor.options.name||t.tag)}function ye(t,n){return Array.isArray(t)?t.indexOf(n)>-1:"string"==typeof t?t.split(",").indexOf(n)>-1:!!p(t)&&t.test(n)}function me(t,n){var e=t.cache,r=t.keys,o=t._vnode;for(var i in e){var a=e[i];if(a){var s=ve(a.componentOptions);s&&!n(s)&&ge(e,i,r,o)}}}function ge(t,n,e,r){var o=t[n];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[n]=null,m(e,n)}!function(t){t.prototype._init=function(t){var n=this;n._uid=fe++,n._isVue=!0,t&&t._isComponent?function(t,n){var e=t.$options=Object.create(t.constructor.options),r=n._parentVnode;e.parent=n.parent,e._parentVnode=r;var o=r.componentOptions;e.propsData=o.propsData,e._parentListeners=o.listeners,e._renderChildren=o.children,e._componentTag=o.tag,n.render&&(e.render=n.render,e.staticRenderFns=n.staticRenderFns)}(n,t):n.$options=Mt(pe(n.constructor),t||{},n),n._renderProxy=n,n._self=n,function(t){var n=t.$options,e=n.parent;if(e&&!n.abstract){for(;e.$options.abstract&&e.$parent;)e=e.$parent;e.$children.push(t)}t.$parent=e,t.$root=e?e.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(n),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var n=t.$options._parentListeners;n&&vn(t,n)}(n),function(t){t._vnode=null,t._staticTrees=null;var n=t.$options,e=t.$vnode=n._parentVnode,o=e&&e.context;t.$slots=yn(n._renderChildren,o),t.$scopedSlots=r,t._c=function(n,e,r,o){return ce(t,n,e,r,o,!1)},t.$createElement=function(n,e,r,o){return ce(t,n,e,r,o,!0)};var i=e&&e.data;At(t,"$attrs",i&&i.attrs||r,null,!0),At(t,"$listeners",n._parentListeners||r,null,!0)}(n),Cn(n,"beforeCreate"),function(t){var n=Hn(t.$options.inject,t);n&&(bt(!1),Object.keys(n).forEach(function(e){At(t,e,n[e])}),bt(!0))}(n),jn(n),function(t){var n=t.$options.provide;n&&(t._provided="function"==typeof n?n.call(t):n)}(n),Cn(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(he),function(t){var n={get:function(){return this._data}},e={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",n),Object.defineProperty(t.prototype,"$props",e),t.prototype.$set=Ot,t.prototype.$delete=Et,t.prototype.$watch=function(t,n,e){if(f(n))return qn(this,t,n,e);(e=e||{}).user=!0;var r=new Un(this,t,n,e);if(e.immediate)try{n.call(this,r.value)}catch(t){Ft(t,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(he),function(t){var n=/^hook:/;t.prototype.$on=function(t,e){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],e);else(r._events[t]||(r._events[t]=[])).push(e),n.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,n){var e=this;function r(){e.$off(t,r),n.apply(e,arguments)}return r.fn=n,e.$on(t,r),e},t.prototype.$off=function(t,n){var e=this;if(!arguments.length)return e._events=Object.create(null),e;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)e.$off(t[r],n);return e}var i=e._events[t];if(!i)return e;if(!n)return e._events[t]=null,e;if(n)for(var a,s=i.length;s--;)if((a=i[s])===n||a.fn===n){i.splice(s,1);break}return e},t.prototype.$emit=function(t){var n=this._events[t];if(n){n=n.length>1?T(n):n;for(var e=T(arguments,1),r=0,o=n.length;r<o;r++)try{n[r].apply(this,e)}catch(n){Ft(n,this,'event handler for "'+t+'"')}}return this}}(he),function(t){t.prototype._update=function(t,n){var e=this,r=e.$el,o=e._vnode,i=wn(e);e._vnode=t,e.$el=o?e.__patch__(o,t):e.__patch__(e.$el,t,n,!1),i(),r&&(r.__vue__=null),e.$el&&(e.$el.__vue__=e),e.$vnode&&e.$parent&&e.$vnode===e.$parent._vnode&&(e.$parent.$el=e.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Cn(t,"beforeDestroy"),t._isBeingDestroyed=!0;var n=t.$parent;!n||n._isBeingDestroyed||t.$options.abstract||m(n.$children,t),t._watcher&&t._watcher.teardown();for(var e=t._watchers.length;e--;)t._watchers[e].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Cn(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(he),function(t){Qn(t.prototype),t.prototype.$nextTick=function(t){return Zt(t,this)},t.prototype._render=function(){var t,n=this,e=n.$options,o=e.render,i=e._parentVnode;i&&(n.$scopedSlots=i.data.scopedSlots||r),n.$vnode=i;try{t=o.call(n._renderProxy,n.$createElement)}catch(e){Ft(e,n,"render"),t=n._vnode}return t instanceof lt||(t=dt()),t.parent=i,t}}(he);var _e=[String,RegExp,Array],we={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:_e,exclude:_e,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)ge(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",function(n){me(t,function(t){return ye(n,t)})}),this.$watch("exclude",function(n){me(t,function(t){return!ye(n,t)})})},render:function(){var t=this.$slots.default,n=pn(t),e=n&&n.componentOptions;if(e){var r=ve(e),o=this.include,i=this.exclude;if(o&&(!r||!ye(o,r))||i&&r&&ye(i,r))return n;var a=this.cache,s=this.keys,u=null==n.key?e.Ctor.cid+(e.tag?"::"+e.tag:""):n.key;a[u]?(n.componentInstance=a[u].componentInstance,m(s,u),s.push(u)):(a[u]=n,s.push(u),this.max&&s.length>parseInt(this.max)&&ge(a,s[0],s,this._vnode)),n.data.keepAlive=!0}return n||t&&t[0]}}};!function(t){var n={get:function(){return F}};Object.defineProperty(t,"config",n),t.util={warn:at,extend:$,mergeOptions:Mt,defineReactive:At},t.set=Ot,t.delete=Et,t.nextTick=Zt,t.options=Object.create(null),B.forEach(function(n){t.options[n+"s"]=Object.create(null)}),t.options._base=t,$(t.options.components,we),function(t){t.use=function(t){var n=this._installedPlugins||(this._installedPlugins=[]);if(n.indexOf(t)>-1)return this;var e=T(arguments,1);return e.unshift(this),"function"==typeof t.install?t.install.apply(t,e):"function"==typeof t&&t.apply(null,e),n.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Mt(this.options,t),this}}(t),de(t),function(t){B.forEach(function(n){t[n]=function(t,e){return e?("component"===n&&f(e)&&(e.name=e.name||t,e=this.options._base.extend(e)),"directive"===n&&"function"==typeof e&&(e={bind:e,update:e}),this.options[n+"s"][t]=e,e):this.options[n+"s"][t]}})}(t)}(he),Object.defineProperty(he.prototype,"$isServer",{get:nt}),Object.defineProperty(he.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(he,"FunctionalRenderContext",{value:te}),he.version="2.5.21";var be=v("style,class"),xe=v("input,textarea,option,select,progress"),Ce=v("contenteditable,draggable,spellcheck"),Ae=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Oe="http://www.w3.org/1999/xlink",Ee=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Te=function(t){return Ee(t)?t.slice(6,t.length):""},$e=function(t){return null==t||!1===t};function Se(t){for(var n=t.data,e=t,r=t;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(n=Le(r.data,n));for(;i(e=e.parent);)e&&e.data&&(n=Le(n,e.data));return function(t,n){if(i(t)||i(n))return Ie(t,Ue(n));return""}(n.staticClass,n.class)}function Le(t,n){return{staticClass:Ie(t.staticClass,n.staticClass),class:i(t.class)?[t.class,n.class]:n.class}}function Ie(t,n){return t?n?t+" "+n:t:n||""}function Ue(t){return Array.isArray(t)?function(t){for(var n,e="",r=0,o=t.length;r<o;r++)i(n=Ue(t[r]))&&""!==n&&(e&&(e+=" "),e+=n);return e}(t):u(t)?function(t){var n="";for(var e in t)t[e]&&(n&&(n+=" "),n+=e);return n}(t):"string"==typeof t?t:""}var Me={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Pe=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),je=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Re=function(t){return Pe(t)||je(t)};var Be=Object.create(null);var ke=v("text,number,password,search,email,tel,url");var Fe=Object.freeze({createElement:function(t,n){var e=document.createElement(t);return"select"!==t?e:(n.data&&n.data.attrs&&void 0!==n.data.attrs.multiple&&e.setAttribute("multiple","multiple"),e)},createElementNS:function(t,n){return document.createElementNS(Me[t],n)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,n,e){t.insertBefore(n,e)},removeChild:function(t,n){t.removeChild(n)},appendChild:function(t,n){t.appendChild(n)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,n){t.textContent=n},setStyleScope:function(t,n){t.setAttribute(n,"")}}),qe={create:function(t,n){He(n)},update:function(t,n){t.data.ref!==n.data.ref&&(He(t,!0),He(n))},destroy:function(t){He(t,!0)}};function He(t,n){var e=t.data.ref;if(i(e)){var r=t.context,o=t.componentInstance||t.elm,a=r.$refs;n?Array.isArray(a[e])?m(a[e],o):a[e]===o&&(a[e]=void 0):t.data.refInFor?Array.isArray(a[e])?a[e].indexOf(o)<0&&a[e].push(o):a[e]=[o]:a[e]=o}}var De=new lt("",{},[]),Ge=["create","activate","update","remove","destroy"];function Xe(t,n){return t.key===n.key&&(t.tag===n.tag&&t.isComment===n.isComment&&i(t.data)===i(n.data)&&function(t,n){if("input"!==t.tag)return!0;var e,r=i(e=t.data)&&i(e=e.attrs)&&e.type,o=i(e=n.data)&&i(e=e.attrs)&&e.type;return r===o||ke(r)&&ke(o)}(t,n)||a(t.isAsyncPlaceholder)&&t.asyncFactory===n.asyncFactory&&o(n.asyncFactory.error))}function ze(t,n,e){var r,o,a={};for(r=n;r<=e;++r)i(o=t[r].key)&&(a[o]=r);return a}var Ne={create:Je,update:Je,destroy:function(t){Je(t,De)}};function Je(t,n){(t.data.directives||n.data.directives)&&function(t,n){var e,r,o,i=t===De,a=n===De,s=Ke(t.data.directives,t.context),u=Ke(n.data.directives,n.context),c=[],f=[];for(e in u)r=s[e],o=u[e],r?(o.oldValue=r.value,Ze(o,"update",n,t),o.def&&o.def.componentUpdated&&f.push(o)):(Ze(o,"bind",n,t),o.def&&o.def.inserted&&c.push(o));if(c.length){var p=function(){for(var e=0;e<c.length;e++)Ze(c[e],"inserted",n,t)};i?on(n,"insert",p):p()}f.length&&on(n,"postpatch",function(){for(var e=0;e<f.length;e++)Ze(f[e],"componentUpdated",n,t)});if(!i)for(e in s)u[e]||Ze(s[e],"unbind",t,t,a)}(t,n)}var We=Object.create(null);function Ke(t,n){var e,r,o=Object.create(null);if(!t)return o;for(e=0;e<t.length;e++)(r=t[e]).modifiers||(r.modifiers=We),o[Ye(r)]=r,r.def=Pt(n.$options,"directives",r.name);return o}function Ye(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Ze(t,n,e,r,o){var i=t.def&&t.def[n];if(i)try{i(e.elm,t,e,r,o)}catch(r){Ft(r,e.context,"directive "+t.name+" "+n+" hook")}}var Ve=[qe,Ne];function Qe(t,n){var e=n.componentOptions;if(!(i(e)&&!1===e.Ctor.options.inheritAttrs||o(t.data.attrs)&&o(n.data.attrs))){var r,a,s=n.elm,u=t.data.attrs||{},c=n.data.attrs||{};for(r in i(c.__ob__)&&(c=n.data.attrs=$({},c)),c)a=c[r],u[r]!==a&&tr(s,r,a);for(r in(W||Y)&&c.value!==u.value&&tr(s,"value",c.value),u)o(c[r])&&(Ee(r)?s.removeAttributeNS(Oe,Te(r)):Ce(r)||s.removeAttribute(r))}}function tr(t,n,e){t.tagName.indexOf("-")>-1?nr(t,n,e):Ae(n)?$e(e)?t.removeAttribute(n):(e="allowfullscreen"===n&&"EMBED"===t.tagName?"true":n,t.setAttribute(n,e)):Ce(n)?t.setAttribute(n,$e(e)||"false"===e?"false":"true"):Ee(n)?$e(e)?t.removeAttributeNS(Oe,Te(n)):t.setAttributeNS(Oe,n,e):nr(t,n,e)}function nr(t,n,e){if($e(e))t.removeAttribute(n);else{if(W&&!K&&("TEXTAREA"===t.tagName||"INPUT"===t.tagName)&&"placeholder"===n&&!t.__ieph){var r=function(n){n.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(n,e)}}var er={create:Qe,update:Qe};function rr(t,n){var e=n.elm,r=n.data,a=t.data;if(!(o(r.staticClass)&&o(r.class)&&(o(a)||o(a.staticClass)&&o(a.class)))){var s=Se(n),u=e._transitionClasses;i(u)&&(s=Ie(s,Ue(u))),s!==e._prevClass&&(e.setAttribute("class",s),e._prevClass=s)}}var or,ir={create:rr,update:rr},ar="__r",sr="__c";function ur(t,n,e){var r=or;return function o(){null!==n.apply(null,arguments)&&fr(t,o,e,r)}}function cr(t,n,e,r){var o;n=(o=n)._withTask||(o._withTask=function(){Jt=!0;try{return o.apply(null,arguments)}finally{Jt=!1}}),or.addEventListener(t,n,Q?{capture:e,passive:r}:e)}function fr(t,n,e,r){(r||or).removeEventListener(t,n._withTask||n,e)}function pr(t,n){if(!o(t.data.on)||!o(n.data.on)){var e=n.data.on||{},r=t.data.on||{};or=n.elm,function(t){if(i(t[ar])){var n=W?"change":"input";t[n]=[].concat(t[ar],t[n]||[]),delete t[ar]}i(t[sr])&&(t.change=[].concat(t[sr],t.change||[]),delete t[sr])}(e),rn(e,r,cr,fr,ur,n.context),or=void 0}}var lr={create:pr,update:pr};function hr(t,n){if(!o(t.data.domProps)||!o(n.data.domProps)){var e,r,a=n.elm,s=t.data.domProps||{},u=n.data.domProps||{};for(e in i(u.__ob__)&&(u=n.data.domProps=$({},u)),s)o(u[e])&&(a[e]="");for(e in u){if(r=u[e],"textContent"===e||"innerHTML"===e){if(n.children&&(n.children.length=0),r===s[e])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===e){a._value=r;var c=o(r)?"":String(r);dr(a,c)&&(a.value=c)}else a[e]=r}}}function dr(t,n){return!t.composing&&("OPTION"===t.tagName||function(t,n){var e=!0;try{e=document.activeElement!==t}catch(t){}return e&&t.value!==n}(t,n)||function(t,n){var e=t.value,r=t._vModifiers;if(i(r)){if(r.lazy)return!1;if(r.number)return d(e)!==d(n);if(r.trim)return e.trim()!==n.trim()}return e!==n}(t,n))}var vr={create:hr,update:hr},yr=w(function(t){var n={},e=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach(function(t){if(t){var r=t.split(e);r.length>1&&(n[r[0].trim()]=r[1].trim())}}),n});function mr(t){var n=gr(t.style);return t.staticStyle?$(t.staticStyle,n):n}function gr(t){return Array.isArray(t)?S(t):"string"==typeof t?yr(t):t}var _r,wr=/^--/,br=/\s*!important$/,xr=function(t,n,e){if(wr.test(n))t.style.setProperty(n,e);else if(br.test(e))t.style.setProperty(n,e.replace(br,""),"important");else{var r=Ar(n);if(Array.isArray(e))for(var o=0,i=e.length;o<i;o++)t.style[r]=e[o];else t.style[r]=e}},Cr=["Webkit","Moz","ms"],Ar=w(function(t){if(_r=_r||document.createElement("div").style,"filter"!==(t=x(t))&&t in _r)return t;for(var n=t.charAt(0).toUpperCase()+t.slice(1),e=0;e<Cr.length;e++){var r=Cr[e]+n;if(r in _r)return r}});function Or(t,n){var e=n.data,r=t.data;if(!(o(e.staticStyle)&&o(e.style)&&o(r.staticStyle)&&o(r.style))){var a,s,u=n.elm,c=r.staticStyle,f=r.normalizedStyle||r.style||{},p=c||f,l=gr(n.data.style)||{};n.data.normalizedStyle=i(l.__ob__)?$({},l):l;var h=function(t,n){var e,r={};if(n)for(var o=t;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(e=mr(o.data))&&$(r,e);(e=mr(t.data))&&$(r,e);for(var i=t;i=i.parent;)i.data&&(e=mr(i.data))&&$(r,e);return r}(n,!0);for(s in p)o(h[s])&&xr(u,s,"");for(s in h)(a=h[s])!==p[s]&&xr(u,s,null==a?"":a)}}var Er={create:Or,update:Or},Tr=/\s+/;function $r(t,n){if(n&&(n=n.trim()))if(t.classList)n.indexOf(" ")>-1?n.split(Tr).forEach(function(n){return t.classList.add(n)}):t.classList.add(n);else{var e=" "+(t.getAttribute("class")||"")+" ";e.indexOf(" "+n+" ")<0&&t.setAttribute("class",(e+n).trim())}}function Sr(t,n){if(n&&(n=n.trim()))if(t.classList)n.indexOf(" ")>-1?n.split(Tr).forEach(function(n){return t.classList.remove(n)}):t.classList.remove(n),t.classList.length||t.removeAttribute("class");else{for(var e=" "+(t.getAttribute("class")||"")+" ",r=" "+n+" ";e.indexOf(r)>=0;)e=e.replace(r," ");(e=e.trim())?t.setAttribute("class",e):t.removeAttribute("class")}}function Lr(t){if(t){if("object"==typeof t){var n={};return!1!==t.css&&$(n,Ir(t.name||"v")),$(n,t),n}return"string"==typeof t?Ir(t):void 0}}var Ir=w(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),Ur=X&&!K,Mr="transition",Pr="animation",jr="transition",Rr="transitionend",Br="animation",kr="animationend";Ur&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(jr="WebkitTransition",Rr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Br="WebkitAnimation",kr="webkitAnimationEnd"));var Fr=X?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function qr(t){Fr(function(){Fr(t)})}function Hr(t,n){var e=t._transitionClasses||(t._transitionClasses=[]);e.indexOf(n)<0&&(e.push(n),$r(t,n))}function Dr(t,n){t._transitionClasses&&m(t._transitionClasses,n),Sr(t,n)}function Gr(t,n,e){var r=zr(t,n),o=r.type,i=r.timeout,a=r.propCount;if(!o)return e();var s=o===Mr?Rr:kr,u=0,c=function(){t.removeEventListener(s,f),e()},f=function(n){n.target===t&&++u>=a&&c()};setTimeout(function(){u<a&&c()},i+1),t.addEventListener(s,f)}var Xr=/\b(transform|all)(,|$)/;function zr(t,n){var e,r=window.getComputedStyle(t),o=(r[jr+"Delay"]||"").split(", "),i=(r[jr+"Duration"]||"").split(", "),a=Nr(o,i),s=(r[Br+"Delay"]||"").split(", "),u=(r[Br+"Duration"]||"").split(", "),c=Nr(s,u),f=0,p=0;return n===Mr?a>0&&(e=Mr,f=a,p=i.length):n===Pr?c>0&&(e=Pr,f=c,p=u.length):p=(e=(f=Math.max(a,c))>0?a>c?Mr:Pr:null)?e===Mr?i.length:u.length:0,{type:e,timeout:f,propCount:p,hasTransform:e===Mr&&Xr.test(r[jr+"Property"])}}function Nr(t,n){for(;t.length<n.length;)t=t.concat(t);return Math.max.apply(null,n.map(function(n,e){return Jr(n)+Jr(t[e])}))}function Jr(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function Wr(t,n){var e=t.elm;i(e._leaveCb)&&(e._leaveCb.cancelled=!0,e._leaveCb());var r=Lr(t.data.transition);if(!o(r)&&!i(e._enterCb)&&1===e.nodeType){for(var a=r.css,s=r.type,c=r.enterClass,f=r.enterToClass,p=r.enterActiveClass,l=r.appearClass,h=r.appearToClass,v=r.appearActiveClass,y=r.beforeEnter,m=r.enter,g=r.afterEnter,_=r.enterCancelled,w=r.beforeAppear,b=r.appear,x=r.afterAppear,C=r.appearCancelled,A=r.duration,O=_n,E=_n.$vnode;E&&E.parent;)O=(E=E.parent).context;var T=!O._isMounted||!t.isRootInsert;if(!T||b||""===b){var $=T&&l?l:c,S=T&&v?v:p,L=T&&h?h:f,I=T&&w||y,U=T&&"function"==typeof b?b:m,M=T&&x||g,P=T&&C||_,R=d(u(A)?A.enter:A);0;var B=!1!==a&&!K,k=Zr(U),F=e._enterCb=j(function(){B&&(Dr(e,L),Dr(e,S)),F.cancelled?(B&&Dr(e,$),P&&P(e)):M&&M(e),e._enterCb=null});t.data.show||on(t,"insert",function(){var n=e.parentNode,r=n&&n._pending&&n._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),U&&U(e,F)}),I&&I(e),B&&(Hr(e,$),Hr(e,S),qr(function(){Dr(e,$),F.cancelled||(Hr(e,L),k||(Yr(R)?setTimeout(F,R):Gr(e,s,F)))})),t.data.show&&(n&&n(),U&&U(e,F)),B||k||F()}}}function Kr(t,n){var e=t.elm;i(e._enterCb)&&(e._enterCb.cancelled=!0,e._enterCb());var r=Lr(t.data.transition);if(o(r)||1!==e.nodeType)return n();if(!i(e._leaveCb)){var a=r.css,s=r.type,c=r.leaveClass,f=r.leaveToClass,p=r.leaveActiveClass,l=r.beforeLeave,h=r.leave,v=r.afterLeave,y=r.leaveCancelled,m=r.delayLeave,g=r.duration,_=!1!==a&&!K,w=Zr(h),b=d(u(g)?g.leave:g);0;var x=e._leaveCb=j(function(){e.parentNode&&e.parentNode._pending&&(e.parentNode._pending[t.key]=null),_&&(Dr(e,f),Dr(e,p)),x.cancelled?(_&&Dr(e,c),y&&y(e)):(n(),v&&v(e)),e._leaveCb=null});m?m(C):C()}function C(){x.cancelled||(!t.data.show&&e.parentNode&&((e.parentNode._pending||(e.parentNode._pending={}))[t.key]=t),l&&l(e),_&&(Hr(e,c),Hr(e,p),qr(function(){Dr(e,c),x.cancelled||(Hr(e,f),w||(Yr(b)?setTimeout(x,b):Gr(e,s,x)))})),h&&h(e,x),_||w||x())}}function Yr(t){return"number"==typeof t&&!isNaN(t)}function Zr(t){if(o(t))return!1;var n=t.fns;return i(n)?Zr(Array.isArray(n)?n[0]:n):(t._length||t.length)>1}function Vr(t,n){!0!==n.data.show&&Wr(n)}var Qr=function(t){var n,e,r={},u=t.modules,c=t.nodeOps;for(n=0;n<Ge.length;++n)for(r[Ge[n]]=[],e=0;e<u.length;++e)i(u[e][Ge[n]])&&r[Ge[n]].push(u[e][Ge[n]]);function f(t){var n=c.parentNode(t);i(n)&&c.removeChild(n,t)}function p(t,n,e,o,s,u,f){if(i(t.elm)&&i(u)&&(t=u[f]=yt(t)),t.isRootInsert=!s,!function(t,n,e,o){var s=t.data;if(i(s)){var u=i(t.componentInstance)&&s.keepAlive;if(i(s=s.hook)&&i(s=s.init)&&s(t,!1),i(t.componentInstance))return l(t,n),h(e,t.elm,o),a(u)&&function(t,n,e,o){for(var a,s=t;s.componentInstance;)if(s=s.componentInstance._vnode,i(a=s.data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](De,s);n.push(s);break}h(e,t.elm,o)}(t,n,e,o),!0}}(t,n,e,o)){var p=t.data,v=t.children,y=t.tag;i(y)?(t.elm=t.ns?c.createElementNS(t.ns,y):c.createElement(y,t),g(t),d(t,v,n),i(p)&&m(t,n),h(e,t.elm,o)):a(t.isComment)?(t.elm=c.createComment(t.text),h(e,t.elm,o)):(t.elm=c.createTextNode(t.text),h(e,t.elm,o))}}function l(t,n){i(t.data.pendingInsert)&&(n.push.apply(n,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,y(t)?(m(t,n),g(t)):(He(t),n.push(t))}function h(t,n,e){i(t)&&(i(e)?c.parentNode(e)===t&&c.insertBefore(t,n,e):c.appendChild(t,n))}function d(t,n,e){if(Array.isArray(n))for(var r=0;r<n.length;++r)p(n[r],e,t.elm,null,!0,n,r);else s(t.text)&&c.appendChild(t.elm,c.createTextNode(String(t.text)))}function y(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return i(t.tag)}function m(t,e){for(var o=0;o<r.create.length;++o)r.create[o](De,t);i(n=t.data.hook)&&(i(n.create)&&n.create(De,t),i(n.insert)&&e.push(t))}function g(t){var n;if(i(n=t.fnScopeId))c.setStyleScope(t.elm,n);else for(var e=t;e;)i(n=e.context)&&i(n=n.$options._scopeId)&&c.setStyleScope(t.elm,n),e=e.parent;i(n=_n)&&n!==t.context&&n!==t.fnContext&&i(n=n.$options._scopeId)&&c.setStyleScope(t.elm,n)}function _(t,n,e,r,o,i){for(;r<=o;++r)p(e[r],i,t,n,!1,e,r)}function w(t){var n,e,o=t.data;if(i(o))for(i(n=o.hook)&&i(n=n.destroy)&&n(t),n=0;n<r.destroy.length;++n)r.destroy[n](t);if(i(n=t.children))for(e=0;e<t.children.length;++e)w(t.children[e])}function b(t,n,e,r){for(;e<=r;++e){var o=n[e];i(o)&&(i(o.tag)?(x(o),w(o)):f(o.elm))}}function x(t,n){if(i(n)||i(t.data)){var e,o=r.remove.length+1;for(i(n)?n.listeners+=o:n=function(t,n){function e(){0==--e.listeners&&f(t)}return e.listeners=n,e}(t.elm,o),i(e=t.componentInstance)&&i(e=e._vnode)&&i(e.data)&&x(e,n),e=0;e<r.remove.length;++e)r.remove[e](t,n);i(e=t.data.hook)&&i(e=e.remove)?e(t,n):n()}else f(t.elm)}function C(t,n,e,r){for(var o=e;o<r;o++){var a=n[o];if(i(a)&&Xe(t,a))return o}}function A(t,n,e,s,u,f){if(t!==n){i(n.elm)&&i(s)&&(n=s[u]=yt(n));var l=n.elm=t.elm;if(a(t.isAsyncPlaceholder))i(n.asyncFactory.resolved)?T(t.elm,n,e):n.isAsyncPlaceholder=!0;else if(a(n.isStatic)&&a(t.isStatic)&&n.key===t.key&&(a(n.isCloned)||a(n.isOnce)))n.componentInstance=t.componentInstance;else{var h,d=n.data;i(d)&&i(h=d.hook)&&i(h=h.prepatch)&&h(t,n);var v=t.children,m=n.children;if(i(d)&&y(n)){for(h=0;h<r.update.length;++h)r.update[h](t,n);i(h=d.hook)&&i(h=h.update)&&h(t,n)}o(n.text)?i(v)&&i(m)?v!==m&&function(t,n,e,r,a){for(var s,u,f,l=0,h=0,d=n.length-1,v=n[0],y=n[d],m=e.length-1,g=e[0],w=e[m],x=!a;l<=d&&h<=m;)o(v)?v=n[++l]:o(y)?y=n[--d]:Xe(v,g)?(A(v,g,r,e,h),v=n[++l],g=e[++h]):Xe(y,w)?(A(y,w,r,e,m),y=n[--d],w=e[--m]):Xe(v,w)?(A(v,w,r,e,m),x&&c.insertBefore(t,v.elm,c.nextSibling(y.elm)),v=n[++l],w=e[--m]):Xe(y,g)?(A(y,g,r,e,h),x&&c.insertBefore(t,y.elm,v.elm),y=n[--d],g=e[++h]):(o(s)&&(s=ze(n,l,d)),o(u=i(g.key)?s[g.key]:C(g,n,l,d))?p(g,r,t,v.elm,!1,e,h):Xe(f=n[u],g)?(A(f,g,r,e,h),n[u]=void 0,x&&c.insertBefore(t,f.elm,v.elm)):p(g,r,t,v.elm,!1,e,h),g=e[++h]);l>d?_(t,o(e[m+1])?null:e[m+1].elm,e,h,m,r):h>m&&b(0,n,l,d)}(l,v,m,e,f):i(m)?(i(t.text)&&c.setTextContent(l,""),_(l,null,m,0,m.length-1,e)):i(v)?b(0,v,0,v.length-1):i(t.text)&&c.setTextContent(l,""):t.text!==n.text&&c.setTextContent(l,n.text),i(d)&&i(h=d.hook)&&i(h=h.postpatch)&&h(t,n)}}}function O(t,n,e){if(a(e)&&i(t.parent))t.parent.data.pendingInsert=n;else for(var r=0;r<n.length;++r)n[r].data.hook.insert(n[r])}var E=v("attrs,class,staticClass,staticStyle,key");function T(t,n,e,r){var o,s=n.tag,u=n.data,c=n.children;if(r=r||u&&u.pre,n.elm=t,a(n.isComment)&&i(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if(i(u)&&(i(o=u.hook)&&i(o=o.init)&&o(n,!0),i(o=n.componentInstance)))return l(n,e),!0;if(i(s)){if(i(c))if(t.hasChildNodes())if(i(o=u)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==t.innerHTML)return!1}else{for(var f=!0,p=t.firstChild,h=0;h<c.length;h++){if(!p||!T(p,c[h],e,r)){f=!1;break}p=p.nextSibling}if(!f||p)return!1}else d(n,c,e);if(i(u)){var v=!1;for(var y in u)if(!E(y)){v=!0,m(n,e);break}!v&&u.class&&Qt(u.class)}}else t.data!==n.text&&(t.data=n.text);return!0}return function(t,n,e,s){if(!o(n)){var u,f=!1,l=[];if(o(t))f=!0,p(n,l);else{var h=i(t.nodeType);if(!h&&Xe(t,n))A(t,n,l,null,null,s);else{if(h){if(1===t.nodeType&&t.hasAttribute(R)&&(t.removeAttribute(R),e=!0),a(e)&&T(t,n,l))return O(n,l,!0),t;u=t,t=new lt(c.tagName(u).toLowerCase(),{},[],void 0,u)}var d=t.elm,v=c.parentNode(d);if(p(n,l,d._leaveCb?null:v,c.nextSibling(d)),i(n.parent))for(var m=n.parent,g=y(n);m;){for(var _=0;_<r.destroy.length;++_)r.destroy[_](m);if(m.elm=n.elm,g){for(var x=0;x<r.create.length;++x)r.create[x](De,m);var C=m.data.hook.insert;if(C.merged)for(var E=1;E<C.fns.length;E++)C.fns[E]()}else He(m);m=m.parent}i(v)?b(0,[t],0,0):i(t.tag)&&w(t)}}return O(n,l,f),n.elm}i(t)&&w(t)}}({nodeOps:Fe,modules:[er,ir,lr,vr,Er,X?{create:Vr,activate:Vr,remove:function(t,n){!0!==t.data.show?Kr(t,n):n()}}:{}].concat(Ve)});K&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&so(t,"input")});var to={inserted:function(t,n,e,r){"select"===e.tag?(r.elm&&!r.elm._vOptions?on(e,"postpatch",function(){to.componentUpdated(t,n,e)}):no(t,n,e.context),t._vOptions=[].map.call(t.options,oo)):("textarea"===e.tag||ke(t.type))&&(t._vModifiers=n.modifiers,n.modifiers.lazy||(t.addEventListener("compositionstart",io),t.addEventListener("compositionend",ao),t.addEventListener("change",ao),K&&(t.vmodel=!0)))},componentUpdated:function(t,n,e){if("select"===e.tag){no(t,n,e.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,oo);if(o.some(function(t,n){return!M(t,r[n])}))(t.multiple?n.value.some(function(t){return ro(t,o)}):n.value!==n.oldValue&&ro(n.value,o))&&so(t,"change")}}};function no(t,n,e){eo(t,n,e),(W||Y)&&setTimeout(function(){eo(t,n,e)},0)}function eo(t,n,e){var r=n.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,u=t.options.length;s<u;s++)if(a=t.options[s],o)i=P(r,oo(a))>-1,a.selected!==i&&(a.selected=i);else if(M(oo(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function ro(t,n){return n.every(function(n){return!M(n,t)})}function oo(t){return"_value"in t?t._value:t.value}function io(t){t.target.composing=!0}function ao(t){t.target.composing&&(t.target.composing=!1,so(t.target,"input"))}function so(t,n){var e=document.createEvent("HTMLEvents");e.initEvent(n,!0,!0),t.dispatchEvent(e)}function uo(t){return!t.componentInstance||t.data&&t.data.transition?t:uo(t.componentInstance._vnode)}var co={model:to,show:{bind:function(t,n,e){var r=n.value,o=(e=uo(e)).data&&e.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(e.data.show=!0,Wr(e,function(){t.style.display=i})):t.style.display=r?i:"none"},update:function(t,n,e){var r=n.value;!r!=!n.oldValue&&((e=uo(e)).data&&e.data.transition?(e.data.show=!0,r?Wr(e,function(){t.style.display=t.__vOriginalDisplay}):Kr(e,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,n,e,r,o){o||(t.style.display=t.__vOriginalDisplay)}}},fo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function po(t){var n=t&&t.componentOptions;return n&&n.Ctor.options.abstract?po(pn(n.children)):t}function lo(t){var n={},e=t.$options;for(var r in e.propsData)n[r]=t[r];var o=e._parentListeners;for(var i in o)n[x(i)]=o[i];return n}function ho(t,n){if(/\d-keep-alive$/.test(n.tag))return t("keep-alive",{props:n.componentOptions.propsData})}var vo=function(t){return t.tag||fn(t)},yo=function(t){return"show"===t.name},mo={name:"transition",props:fo,abstract:!0,render:function(t){var n=this,e=this.$slots.default;if(e&&(e=e.filter(vo)).length){0;var r=this.mode;0;var o=e[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return o;var i=po(o);if(!i)return o;if(this._leaving)return ho(t,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var u=(i.data||(i.data={})).transition=lo(this),c=this._vnode,f=po(c);if(i.data.directives&&i.data.directives.some(yo)&&(i.data.show=!0),f&&f.data&&!function(t,n){return n.key===t.key&&n.tag===t.tag}(i,f)&&!fn(f)&&(!f.componentInstance||!f.componentInstance._vnode.isComment)){var p=f.data.transition=$({},u);if("out-in"===r)return this._leaving=!0,on(p,"afterLeave",function(){n._leaving=!1,n.$forceUpdate()}),ho(t,o);if("in-out"===r){if(fn(i))return c;var l,h=function(){l()};on(u,"afterEnter",h),on(u,"enterCancelled",h),on(p,"delayLeave",function(t){l=t})}}return o}}},go=$({tag:String,moveClass:String},fo);function _o(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function wo(t){t.data.newPos=t.elm.getBoundingClientRect()}function bo(t){var n=t.data.pos,e=t.data.newPos,r=n.left-e.left,o=n.top-e.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete go.mode;var xo={Transition:mo,TransitionGroup:{props:go,beforeMount:function(){var t=this,n=this._update;this._update=function(e,r){var o=wn(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),n.call(t,e,r)}},render:function(t){for(var n=this.tag||this.$vnode.data.tag||"span",e=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=lo(this),s=0;s<o.length;s++){var u=o[s];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))i.push(u),e[u.key]=u,(u.data||(u.data={})).transition=a;else;}if(r){for(var c=[],f=[],p=0;p<r.length;p++){var l=r[p];l.data.transition=a,l.data.pos=l.elm.getBoundingClientRect(),e[l.key]?c.push(l):f.push(l)}this.kept=t(n,null,c),this.removed=f}return t(n,null,i)},updated:function(){var t=this.prevChildren,n=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,n)&&(t.forEach(_o),t.forEach(wo),t.forEach(bo),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var e=t.elm,r=e.style;Hr(e,n),r.transform=r.WebkitTransform=r.transitionDuration="",e.addEventListener(Rr,e._moveCb=function t(r){r&&r.target!==e||r&&!/transform$/.test(r.propertyName)||(e.removeEventListener(Rr,t),e._moveCb=null,Dr(e,n))})}}))},methods:{hasMove:function(t,n){if(!Ur)return!1;if(this._hasMove)return this._hasMove;var e=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){Sr(e,t)}),$r(e,n),e.style.display="none",this.$el.appendChild(e);var r=zr(e);return this.$el.removeChild(e),this._hasMove=r.hasTransform}}}};he.config.mustUseProp=function(t,n,e){return"value"===e&&xe(t)&&"button"!==n||"selected"===e&&"option"===t||"checked"===e&&"input"===t||"muted"===e&&"video"===t},he.config.isReservedTag=Re,he.config.isReservedAttr=be,he.config.getTagNamespace=function(t){return je(t)?"svg":"math"===t?"math":void 0},he.config.isUnknownElement=function(t){if(!X)return!0;if(Re(t))return!1;if(t=t.toLowerCase(),null!=Be[t])return Be[t];var n=document.createElement(t);return t.indexOf("-")>-1?Be[t]=n.constructor===window.HTMLUnknownElement||n.constructor===window.HTMLElement:Be[t]=/HTMLUnknownElement/.test(n.toString())},$(he.options.directives,co),$(he.options.components,xo),he.prototype.__patch__=X?Qr:L,he.prototype.$mount=function(t,n){return function(t,n,e){var r;return t.$el=n,t.$options.render||(t.$options.render=dt),Cn(t,"beforeMount"),r=function(){t._update(t._render(),e)},new Un(t,r,L,{before:function(){t._isMounted&&!t._isDestroyed&&Cn(t,"beforeUpdate")}},!0),e=!1,null==t.$vnode&&(t._isMounted=!0,Cn(t,"mounted")),t}(this,t=t&&X?function(t){if("string"==typeof t){var n=document.querySelector(t);return n||document.createElement("div")}return t}(t):void 0,n)},X&&setTimeout(function(){F.devtools&&et&&et.emit("init",he)},0),n.a=he}).call(this,e(2),e(18).setImmediate)},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){"use strict";(function(n){var r=e(0),o=e(25),i={"Content-Type":"application/x-www-form-urlencoded"};function a(t,n){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=n)}var s,u={adapter:("undefined"!=typeof XMLHttpRequest?s=e(10):void 0!==n&&(s=e(10)),s),transformRequest:[function(t,n){return o(n,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(a(n,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(a(n,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(t){u.headers[t]={}}),r.forEach(["post","put","patch"],function(t){u.headers[t]=r.merge(i)}),t.exports=u}).call(this,e(8))},function(t,n,e){"use strict";e.r(n);var r=e(20),o={};r.keys().forEach(function(t){"./index.js"!==t&&(o[t.replace(/(\.\/|\.js)/g,"")]=r(t).default)}),n.default=o},function(t,n,e){"use strict";e.r(n);var r=function(){var t=this.$createElement,n=this._self._c||t;return n("div",{attrs:{id:"app"}},[n("RouterView")],1)};r._withStripped=!0;var o={beforeCreate:function(){var t=localStorage.getItem("user");if(!t)return this.$router.push({name:"auth"});try{var n=JSON.parse(t);this.$store.commit("SET_USER",n)}catch(t){localStorage.removeItem("user"),this.$router.push({name:"auth"})}}},i=e(7),a=Object(i.a)(o,r,[],!1,null,null,null);a.options.__file="src/App.vue";n.default=a.exports},function(t,n,e){t.exports=e(22)},function(t,n,e){"use strict";function r(t,n,e,r,o,i,a,s){var u,c="function"==typeof t?t.options:t;if(n&&(c.render=n,c.staticRenderFns=e,c._compiled=!0),r&&(c.functional=!0),i&&(c._scopeId="data-v-"+i),a?(u=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},c._ssrRegister=u):o&&(u=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),u)if(c.functional){c._injectStyles=u;var f=c.render;c.render=function(t,n){return u.call(n),f(t,n)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,u):[u]}return{exports:t,options:c}}e.d(n,"a",function(){return r})},function(t,n){var e,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],f=!1,p=-1;function l(){f&&u&&(f=!1,u.length?c=u.concat(c):p=-1,c.length&&h())}function h(){if(!f){var t=s(l);f=!0;for(var n=c.length;n;){for(u=c,c=[];++p<n;)u&&u[p].run();p=-1,n=c.length}u=null,f=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(n){try{return r.call(null,t)}catch(n){return r.call(this,t)}}}(t)}}function d(t,n){this.fun=t,this.array=n}function v(){}o.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];c.push(new d(t,n)),1!==c.length||f||s(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,n,e){"use strict";t.exports=function(t,n){return function(){for(var e=new Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];return t.apply(n,e)}}},function(t,n,e){"use strict";var r=e(0),o=e(26),i=e(28),a=e(29),s=e(30),u=e(11),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||e(31);t.exports=function(t){return new Promise(function(n,f){var p=t.data,l=t.headers;r.isFormData(p)&&delete l["Content-Type"];var h=new XMLHttpRequest,d="onreadystatechange",v=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||s(t.url)||(h=new window.XDomainRequest,d="onload",v=!0,h.onprogress=function(){},h.ontimeout=function(){}),t.auth){var y=t.auth.username||"",m=t.auth.password||"";l.Authorization="Basic "+c(y+":"+m)}if(h.open(t.method.toUpperCase(),i(t.url,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h[d]=function(){if(h&&(4===h.readyState||v)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var e="getAllResponseHeaders"in h?a(h.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:e,config:t,request:h};o(n,f,r),h=null}},h.onerror=function(){f(u("Network Error",t,null,h)),h=null},h.ontimeout=function(){f(u("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var g=e(32),_=(t.withCredentials||s(t.url))&&t.xsrfCookieName?g.read(t.xsrfCookieName):void 0;_&&(l[t.xsrfHeaderName]=_)}if("setRequestHeader"in h&&r.forEach(l,function(t,n){void 0===p&&"content-type"===n.toLowerCase()?delete l[n]:h.setRequestHeader(n,t)}),t.withCredentials&&(h.withCredentials=!0),t.responseType)try{h.responseType=t.responseType}catch(n){if("json"!==t.responseType)throw n}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){h&&(h.abort(),f(t),h=null)}),void 0===p&&(p=null),h.send(p)})}},function(t,n,e){"use strict";var r=e(27);t.exports=function(t,n,e,o,i){var a=new Error(t);return r(a,n,e,o,i)}},function(t,n,e){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,n,e){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(i).concat([o]).join("\n")}var a;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];null!=a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),n.push(a))}},n}},function(t,n,e){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),u=null,c=0,f=[],p=e(49);function l(t,n){for(var e=0;e<t.length;e++){var r=t[e],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(g(r.parts[a],n))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(g(r.parts[a],n));i[r.id]={id:r.id,refs:1,parts:s}}}}function h(t,n){for(var e=[],r={},o=0;o<t.length;o++){var i=t[o],a=n.base?i[0]+n.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):e.push(r[a]={id:a,parts:[s]})}return e}function d(t,n){var e=s(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),f.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(t.insertAt.before,e);e.insertBefore(n,o)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=f.indexOf(t);n>=0&&f.splice(n,1)}function y(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return m(n,t.attrs),d(t,n),n}function m(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function g(t,n){var e,r,o,i;if(n.transform&&t.css){if(!(i="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=i}if(n.singleton){var a=c++;e=u||(u=y(n)),r=b.bind(null,e,a,!1),o=b.bind(null,e,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(n,t.attrs),d(t,n),n}(n),r=function(t,n,e){var r=e.css,o=e.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=p(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,e,n),o=function(){v(e),e.href&&URL.revokeObjectURL(e.href)}):(e=y(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){v(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=h(t,n);return l(e,n),function(t){for(var r=[],o=0;o<e.length;o++){var a=e[o];(s=i[a.id]).refs--,r.push(s)}t&&l(h(t,n),n);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var _,w=(_=[],function(t,n){return _[t]=n,_.filter(Boolean).join("\n")});function b(t,n,e,r){var o=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(n,o);else{var i=document.createTextNode(o),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}},function(t,n,e){t.exports=e(52)},function(t,n,e){var r={"./App.vue":[5],"./layouts/Default.vue":[53,1],"./layouts/NotAuthorized.vue":[54,2],"./pages/Auth.vue":[56,3],"./pages/Dashboard.vue":[55,4]};function o(t){var n=r[t];return n?Promise.all(n.slice(1).map(e.e)).then(function(){var t=n[0];return e(t)}):Promise.resolve().then(function(){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n})}o.keys=function(){return Object.keys(r)},o.id=17,t.exports=o},function(t,n,e){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,n){this._id=t,this._clearFn=n}n.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},n.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},n.clearTimeout=n.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},n.enroll=function(t,n){clearTimeout(t._idleTimeoutId),t._idleTimeout=n},n.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},n._unrefActive=n.active=function(t){clearTimeout(t._idleTimeoutId);var n=t._idleTimeout;n>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},n))},e(19),n.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,n.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,e(2))},function(t,n,e){(function(t,n){!function(t,e){"use strict";if(!t.setImmediate){var r,o,i,a,s,u=1,c={},f=!1,p=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,"[object process]"==={}.toString.call(t.process)?r=function(t){n.nextTick(function(){d(t)})}:!function(){if(t.postMessage&&!t.importScripts){var n=!0,e=t.onmessage;return t.onmessage=function(){n=!1},t.postMessage("","*"),t.onmessage=e,n}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){d(t.data)},r=function(t){i.port2.postMessage(t)}):p&&"onreadystatechange"in p.createElement("script")?(o=p.documentElement,r=function(t){var n=p.createElement("script");n.onreadystatechange=function(){d(t),n.onreadystatechange=null,o.removeChild(n),n=null},o.appendChild(n)}):r=function(t){setTimeout(d,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(a)&&d(+n.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(n){t.postMessage(a+n,"*")}),l.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var n=new Array(arguments.length-1),e=0;e<n.length;e++)n[e]=arguments[e+1];var o={callback:t,args:n};return c[u]=o,r(u),u++},l.clearImmediate=h}function h(t){delete c[t]}function d(t){if(f)setTimeout(d,0,t);else{var n=c[t];if(n){f=!0;try{!function(t){var n=t.callback,r=t.args;switch(r.length){case 0:n();break;case 1:n(r[0]);break;case 2:n(r[0],r[1]);break;case 3:n(r[0],r[1],r[2]);break;default:n.apply(e,r)}}(n)}finally{h(t),f=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,e(2),e(8))},function(t,n,e){var r={"./index.js":4,"./profile.js":21};function o(t){var n=i(t);return e(n)}function i(t){var n=r[t];if(!(n+1)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return n}o.keys=function(){return Object.keys(r)},o.resolve=i,t.exports=o,o.id=20},function(t,n,e){"use strict";e.r(n);n.default={state:{user:null},mutations:{SET_USER:function(t,n){t.user=n},CLEAR_USER:function(t){t.user=null}},actions:{}}},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(24),a=e(3);function s(t){var n=new i(t),e=o(i.prototype.request,n);return r.extend(e,i.prototype,n),r.extend(e,n),e}var u=s(a);u.Axios=i,u.create=function(t){return s(r.merge(a,t))},u.Cancel=e(13),u.CancelToken=e(38),u.isCancel=e(12),u.all=function(t){return Promise.all(t)},u.spread=e(39),t.exports=u,t.exports.default=u},function(t,n){function e(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
t.exports=function(t){return null!=t&&(e(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&e(t.slice(0,0))}(t)||!!t._isBuffer)}},function(t,n,e){"use strict";var r=e(3),o=e(0),i=e(33),a=e(34);function s(t){this.defaults=t,this.interceptors={request:new i,response:new i}}s.prototype.request=function(t){"string"==typeof t&&(t=o.merge({url:arguments[0]},arguments[1])),(t=o.merge(r,{method:"get"},this.defaults,t)).method=t.method.toLowerCase();var n=[a,void 0],e=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){n.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){n.push(t.fulfilled,t.rejected)});n.length;)e=e.then(n.shift(),n.shift());return e},o.forEach(["delete","get","head","options"],function(t){s.prototype[t]=function(n,e){return this.request(o.merge(e||{},{method:t,url:n}))}}),o.forEach(["post","put","patch"],function(t){s.prototype[t]=function(n,e,r){return this.request(o.merge(r||{},{method:t,url:n,data:e}))}}),t.exports=s},function(t,n,e){"use strict";var r=e(0);t.exports=function(t,n){r.forEach(t,function(e,r){r!==n&&r.toUpperCase()===n.toUpperCase()&&(t[n]=e,delete t[r])})}},function(t,n,e){"use strict";var r=e(11);t.exports=function(t,n,e){var o=e.config.validateStatus;e.status&&o&&!o(e.status)?n(r("Request failed with status code "+e.status,e.config,null,e.request,e)):t(e)}},function(t,n,e){"use strict";t.exports=function(t,n,e,r,o){return t.config=n,e&&(t.code=e),t.request=r,t.response=o,t}},function(t,n,e){"use strict";var r=e(0);function o(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,n,e){if(!n)return t;var i;if(e)i=e(n);else if(r.isURLSearchParams(n))i=n.toString();else{var a=[];r.forEach(n,function(t,n){null!=t&&(r.isArray(t)?n+="[]":t=[t],r.forEach(t,function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),a.push(o(n)+"="+o(t))}))}),i=a.join("&")}return i&&(t+=(-1===t.indexOf("?")?"?":"&")+i),t}},function(t,n,e){"use strict";var r=e(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var n,e,i,a={};return t?(r.forEach(t.split("\n"),function(t){if(i=t.indexOf(":"),n=r.trim(t.substr(0,i)).toLowerCase(),e=r.trim(t.substr(i+1)),n){if(a[n]&&o.indexOf(n)>=0)return;a[n]="set-cookie"===n?(a[n]?a[n]:[]).concat([e]):a[n]?a[n]+", "+e:e}}),a):a}},function(t,n,e){"use strict";var r=e(0);t.exports=r.isStandardBrowserEnv()?function(){var t,n=/(msie|trident)/i.test(navigator.userAgent),e=document.createElement("a");function o(t){var r=t;return n&&(e.setAttribute("href",r),r=e.href),e.setAttribute("href",r),{href:e.href,protocol:e.protocol?e.protocol.replace(/:$/,""):"",host:e.host,search:e.search?e.search.replace(/^\?/,""):"",hash:e.hash?e.hash.replace(/^#/,""):"",hostname:e.hostname,port:e.port,pathname:"/"===e.pathname.charAt(0)?e.pathname:"/"+e.pathname}}return t=o(window.location.href),function(n){var e=r.isString(n)?o(n):n;return e.protocol===t.protocol&&e.host===t.host}}():function(){return!0}},function(t,n,e){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",t.exports=function(t){for(var n,e,i=String(t),a="",s=0,u=r;i.charAt(0|s)||(u="=",s%1);a+=u.charAt(63&n>>8-s%1*8)){if((e=i.charCodeAt(s+=.75))>255)throw new o;n=n<<8|e}return a}},function(t,n,e){"use strict";var r=e(0);t.exports=r.isStandardBrowserEnv()?{write:function(t,n,e,o,i,a){var s=[];s.push(t+"="+encodeURIComponent(n)),r.isNumber(e)&&s.push("expires="+new Date(e).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(t){var n=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,n,e){"use strict";var r=e(0);function o(){this.handlers=[]}o.prototype.use=function(t,n){return this.handlers.push({fulfilled:t,rejected:n}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,function(n){null!==n&&t(n)})},t.exports=o},function(t,n,e){"use strict";var r=e(0),o=e(35),i=e(12),a=e(3),s=e(36),u=e(37);function c(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return c(t),t.baseURL&&!s(t.url)&&(t.url=u(t.baseURL,t.url)),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(n){delete t.headers[n]}),(t.adapter||a.adapter)(t).then(function(n){return c(t),n.data=o(n.data,n.headers,t.transformResponse),n},function(n){return i(n)||(c(t),n&&n.response&&(n.response.data=o(n.response.data,n.response.headers,t.transformResponse))),Promise.reject(n)})}},function(t,n,e){"use strict";var r=e(0);t.exports=function(t,n,e){return r.forEach(e,function(e){t=e(t,n)}),t}},function(t,n,e){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,n,e){"use strict";t.exports=function(t,n){return n?t.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):t}},function(t,n,e){"use strict";var r=e(13);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var n;this.promise=new Promise(function(t){n=t});var e=this;t(function(t){e.reason||(e.reason=new r(t),n(e.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o(function(n){t=n}),cancel:t}},t.exports=o},function(t,n,e){"use strict";t.exports=function(t){return function(n){return t.apply(null,n)}}},function(t,n,e){"use strict";var r=e(41);r.keys().forEach(function(t){return r(t)})},function(t,n,e){var r={"./__icons.scss":42,"./global.scss":50};function o(t){var n=i(t);return e(n)}function i(t){var n=r[t];if(!(n+1)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return n}o.keys=function(){return Object.keys(r)},o.resolve=i,t.exports=o,o.id=41},function(t,n,e){var r=e(43);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(15)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){n=t.exports=e(14)(!1);var r=e(44),o=r(e(45)),i=r(e(46)),a=r(e(47)),s=r(e(48));n.push([t.i,"@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url("+o+');\n  /* For IE6-8 */\n  src: local("Material Icons"), local("MaterialIcons-Regular"), url('+i+') format("woff2"), url('+a+') format("woff"), url('+s+") format(\"truetype\"); }\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  /* Preferred icon size */\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n  /* Support for IE. */\n  font-feature-settings: 'liga'; }\n",""])},function(t,n,e){"use strict";t.exports=function(t){return"string"!=typeof t?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),/["'() \t\n]/.test(t)?'"'+t.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':t)}},function(t,n,e){t.exports=e.p+"e79bfd88537def476913f3ed52f4f4b3.eot"},function(t,n,e){t.exports=e.p+"570eb83859dc23dd0eec423a49e147fe.woff2"},function(t,n,e){t.exports=e.p+"012cf6a10129e2275d79d6adac7f3b02.woff"},function(t,n,e){t.exports=e.p+"a37b0c01c0baf1888ca812cc0508f6e2.ttf"},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var o,i=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,n,e){var r=e(51);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(15)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(14)(!1)).push([t.i,"",""])},function(t,n,e){"use strict";function r(t){return Object.prototype.toString.call(t).indexOf("Error")>-1}function o(t,n){for(var e in n)t[e]=n[e];return t}e.r(n);var i={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(t,n){var e=n.props,r=n.children,i=n.parent,a=n.data;a.routerView=!0;for(var s=i.$createElement,u=e.name,c=i.$route,f=i._routerViewCache||(i._routerViewCache={}),p=0,l=!1;i&&i._routerRoot!==i;)i.$vnode&&i.$vnode.data.routerView&&p++,i._inactive&&(l=!0),i=i.$parent;if(a.routerViewDepth=p,l)return s(f[u],a,r);var h=c.matched[p];if(!h)return f[u]=null,s();var d=f[u]=h.components[u];a.registerRouteInstance=function(t,n){var e=h.instances[u];(n&&e!==t||!n&&e===t)&&(h.instances[u]=n)},(a.hook||(a.hook={})).prepatch=function(t,n){h.instances[u]=n.componentInstance};var v=a.props=function(t,n){switch(typeof n){case"undefined":return;case"object":return n;case"function":return n(t);case"boolean":return n?t.params:void 0;default:0}}(c,h.props&&h.props[u]);if(v){v=a.props=o({},v);var y=a.attrs=a.attrs||{};for(var m in v)d.props&&m in d.props||(y[m]=v[m],delete v[m])}return s(d,a,r)}};var a=/[!'()*]/g,s=function(t){return"%"+t.charCodeAt(0).toString(16)},u=/%2C/g,c=function(t){return encodeURIComponent(t).replace(a,s).replace(u,",")},f=decodeURIComponent;function p(t){var n={};return(t=t.trim().replace(/^(\?|#|&)/,""))?(t.split("&").forEach(function(t){var e=t.replace(/\+/g," ").split("="),r=f(e.shift()),o=e.length>0?f(e.join("=")):null;void 0===n[r]?n[r]=o:Array.isArray(n[r])?n[r].push(o):n[r]=[n[r],o]}),n):n}function l(t){var n=t?Object.keys(t).map(function(n){var e=t[n];if(void 0===e)return"";if(null===e)return c(n);if(Array.isArray(e)){var r=[];return e.forEach(function(t){void 0!==t&&(null===t?r.push(c(n)):r.push(c(n)+"="+c(t)))}),r.join("&")}return c(n)+"="+c(e)}).filter(function(t){return t.length>0}).join("&"):null;return n?"?"+n:""}var h=/\/?$/;function d(t,n,e,r){var o=r&&r.options.stringifyQuery,i=n.query||{};try{i=v(i)}catch(t){}var a={name:n.name||t&&t.name,meta:t&&t.meta||{},path:n.path||"/",hash:n.hash||"",query:i,params:n.params||{},fullPath:g(n,o),matched:t?m(t):[]};return e&&(a.redirectedFrom=g(e,o)),Object.freeze(a)}function v(t){if(Array.isArray(t))return t.map(v);if(t&&"object"==typeof t){var n={};for(var e in t)n[e]=v(t[e]);return n}return t}var y=d(null,{path:"/"});function m(t){for(var n=[];t;)n.unshift(t),t=t.parent;return n}function g(t,n){var e=t.path,r=t.query;void 0===r&&(r={});var o=t.hash;return void 0===o&&(o=""),(e||"/")+(n||l)(r)+o}function _(t,n){return n===y?t===n:!!n&&(t.path&&n.path?t.path.replace(h,"")===n.path.replace(h,"")&&t.hash===n.hash&&w(t.query,n.query):!(!t.name||!n.name)&&(t.name===n.name&&t.hash===n.hash&&w(t.query,n.query)&&w(t.params,n.params)))}function w(t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),!t||!n)return t===n;var e=Object.keys(t),r=Object.keys(n);return e.length===r.length&&e.every(function(e){var r=t[e],o=n[e];return"object"==typeof r&&"object"==typeof o?w(r,o):String(r)===String(o)})}var b,x=[String,Object],C=[String,Array],A={name:"RouterLink",props:{to:{type:x,required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:C,default:"click"}},render:function(t){var n=this,e=this.$router,r=this.$route,i=e.resolve(this.to,r,this.append),a=i.location,s=i.route,u=i.href,c={},f=e.options.linkActiveClass,p=e.options.linkExactActiveClass,l=null==f?"router-link-active":f,v=null==p?"router-link-exact-active":p,y=null==this.activeClass?l:this.activeClass,m=null==this.exactActiveClass?v:this.exactActiveClass,g=a.path?d(null,a,null,e):s;c[m]=_(r,g),c[y]=this.exact?c[m]:function(t,n){return 0===t.path.replace(h,"/").indexOf(n.path.replace(h,"/"))&&(!n.hash||t.hash===n.hash)&&function(t,n){for(var e in n)if(!(e in t))return!1;return!0}(t.query,n.query)}(r,g);var w=function(t){O(t)&&(n.replace?e.replace(a):e.push(a))},b={click:O};Array.isArray(this.event)?this.event.forEach(function(t){b[t]=w}):b[this.event]=w;var x={class:c};if("a"===this.tag)x.on=b,x.attrs={href:u};else{var C=function t(n){if(n)for(var e,r=0;r<n.length;r++){if("a"===(e=n[r]).tag)return e;if(e.children&&(e=t(e.children)))return e}}(this.$slots.default);if(C)C.isStatic=!1,(C.data=o({},C.data)).on=b,(C.data.attrs=o({},C.data.attrs)).href=u;else x.on=b}return t(this.tag,x,this.$slots.default)}};function O(t){if(!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey||t.defaultPrevented||void 0!==t.button&&0!==t.button)){if(t.currentTarget&&t.currentTarget.getAttribute){var n=t.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return t.preventDefault&&t.preventDefault(),!0}}var E="undefined"!=typeof window;function T(t,n,e){var r=t.charAt(0);if("/"===r)return t;if("?"===r||"#"===r)return n+t;var o=n.split("/");e&&o[o.length-1]||o.pop();for(var i=t.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var s=i[a];".."===s?o.pop():"."!==s&&o.push(s)}return""!==o[0]&&o.unshift(""),o.join("/")}function $(t){return t.replace(/\/\//g,"/")}var S=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},L=X,I=R,U=function(t,n){return k(R(t,n))},M=k,P=G,j=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function R(t,n){for(var e,r=[],o=0,i=0,a="",s=n&&n.delimiter||"/";null!=(e=j.exec(t));){var u=e[0],c=e[1],f=e.index;if(a+=t.slice(i,f),i=f+u.length,c)a+=c[1];else{var p=t[i],l=e[2],h=e[3],d=e[4],v=e[5],y=e[6],m=e[7];a&&(r.push(a),a="");var g=null!=l&&null!=p&&p!==l,_="+"===y||"*"===y,w="?"===y||"*"===y,b=e[2]||s,x=d||v;r.push({name:h||o++,prefix:l||"",delimiter:b,optional:w,repeat:_,partial:g,asterisk:!!m,pattern:x?q(x):m?".*":"[^"+F(b)+"]+?"})}}return i<t.length&&(a+=t.substr(i)),a&&r.push(a),r}function B(t){return encodeURI(t).replace(/[\/?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function k(t){for(var n=new Array(t.length),e=0;e<t.length;e++)"object"==typeof t[e]&&(n[e]=new RegExp("^(?:"+t[e].pattern+")$"));return function(e,r){for(var o="",i=e||{},a=(r||{}).pretty?B:encodeURIComponent,s=0;s<t.length;s++){var u=t[s];if("string"!=typeof u){var c,f=i[u.name];if(null==f){if(u.optional){u.partial&&(o+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(S(f)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var p=0;p<f.length;p++){if(c=a(f[p]),!n[s].test(c))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(c)+"`");o+=(0===p?u.prefix:u.delimiter)+c}}else{if(c=u.asterisk?encodeURI(f).replace(/[?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()}):a(f),!n[s].test(c))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+c+'"');o+=u.prefix+c}}else o+=u}return o}}function F(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function q(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function H(t,n){return t.keys=n,t}function D(t){return t.sensitive?"":"i"}function G(t,n,e){S(n)||(e=n||e,n=[]);for(var r=(e=e||{}).strict,o=!1!==e.end,i="",a=0;a<t.length;a++){var s=t[a];if("string"==typeof s)i+=F(s);else{var u=F(s.prefix),c="(?:"+s.pattern+")";n.push(s),s.repeat&&(c+="(?:"+u+c+")*"),i+=c=s.optional?s.partial?u+"("+c+")?":"(?:"+u+"("+c+"))?":u+"("+c+")"}}var f=F(e.delimiter||"/"),p=i.slice(-f.length)===f;return r||(i=(p?i.slice(0,-f.length):i)+"(?:"+f+"(?=$))?"),i+=o?"$":r&&p?"":"(?="+f+"|$)",H(new RegExp("^"+i,D(e)),n)}function X(t,n,e){return S(n)||(e=n||e,n=[]),e=e||{},t instanceof RegExp?function(t,n){var e=t.source.match(/\((?!\?)/g);if(e)for(var r=0;r<e.length;r++)n.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return H(t,n)}(t,n):S(t)?function(t,n,e){for(var r=[],o=0;o<t.length;o++)r.push(X(t[o],n,e).source);return H(new RegExp("(?:"+r.join("|")+")",D(e)),n)}(t,n,e):function(t,n,e){return G(R(t,e),n,e)}(t,n,e)}L.parse=I,L.compile=U,L.tokensToFunction=M,L.tokensToRegExp=P;var z=Object.create(null);function N(t,n,e){try{return(z[t]||(z[t]=L.compile(t)))(n||{},{pretty:!0})}catch(t){return""}}function J(t,n,e,r){var o=n||[],i=e||Object.create(null),a=r||Object.create(null);t.forEach(function(t){!function t(n,e,r,o,i,a){var s=o.path;var u=o.name;0;var c=o.pathToRegexpOptions||{};var f=function(t,n,e){e||(t=t.replace(/\/$/,""));if("/"===t[0])return t;if(null==n)return t;return $(n.path+"/"+t)}(s,i,c.strict);"boolean"==typeof o.caseSensitive&&(c.sensitive=o.caseSensitive);var p={path:f,regex:W(f,c),components:o.components||{default:o.component},instances:{},name:u,parent:i,matchAs:a,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach(function(o){var i=a?$(a+"/"+o.path):void 0;t(n,e,r,o,p,i)});if(void 0!==o.alias){var l=Array.isArray(o.alias)?o.alias:[o.alias];l.forEach(function(a){var s={path:a,children:o.children};t(n,e,r,s,i,p.path||"/")})}e[p.path]||(n.push(p.path),e[p.path]=p);u&&(r[u]||(r[u]=p))}(o,i,a,t)});for(var s=0,u=o.length;s<u;s++)"*"===o[s]&&(o.push(o.splice(s,1)[0]),u--,s--);return{pathList:o,pathMap:i,nameMap:a}}function W(t,n){return L(t,[],n)}function K(t,n,e,r){var i="string"==typeof t?{path:t}:t;if(i.name||i._normalized)return i;if(!i.path&&i.params&&n){(i=o({},i))._normalized=!0;var a=o(o({},n.params),i.params);if(n.name)i.name=n.name,i.params=a;else if(n.matched.length){var s=n.matched[n.matched.length-1].path;i.path=N(s,a,n.path)}else 0;return i}var u=function(t){var n="",e="",r=t.indexOf("#");r>=0&&(n=t.slice(r),t=t.slice(0,r));var o=t.indexOf("?");return o>=0&&(e=t.slice(o+1),t=t.slice(0,o)),{path:t,query:e,hash:n}}(i.path||""),c=n&&n.path||"/",f=u.path?T(u.path,c,e||i.append):c,l=function(t,n,e){void 0===n&&(n={});var r,o=e||p;try{r=o(t||"")}catch(t){r={}}for(var i in n)r[i]=n[i];return r}(u.query,i.query,r&&r.options.parseQuery),h=i.hash||u.hash;return h&&"#"!==h.charAt(0)&&(h="#"+h),{_normalized:!0,path:f,query:l,hash:h}}function Y(t,n){var e=J(t),r=e.pathList,o=e.pathMap,i=e.nameMap;function a(t,e,a){var s=K(t,e,!1,n),c=s.name;if(c){var f=i[c];if(!f)return u(null,s);var p=f.regex.keys.filter(function(t){return!t.optional}).map(function(t){return t.name});if("object"!=typeof s.params&&(s.params={}),e&&"object"==typeof e.params)for(var l in e.params)!(l in s.params)&&p.indexOf(l)>-1&&(s.params[l]=e.params[l]);if(f)return s.path=N(f.path,s.params),u(f,s,a)}else if(s.path){s.params={};for(var h=0;h<r.length;h++){var d=r[h],v=o[d];if(Z(v.regex,s.path,s.params))return u(v,s,a)}}return u(null,s)}function s(t,e){var r=t.redirect,o="function"==typeof r?r(d(t,e,null,n)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return u(null,e);var s=o,c=s.name,f=s.path,p=e.query,l=e.hash,h=e.params;if(p=s.hasOwnProperty("query")?s.query:p,l=s.hasOwnProperty("hash")?s.hash:l,h=s.hasOwnProperty("params")?s.params:h,c){i[c];return a({_normalized:!0,name:c,query:p,hash:l,params:h},void 0,e)}if(f){var v=function(t,n){return T(t,n.parent?n.parent.path:"/",!0)}(f,t);return a({_normalized:!0,path:N(v,h),query:p,hash:l},void 0,e)}return u(null,e)}function u(t,e,r){return t&&t.redirect?s(t,r||e):t&&t.matchAs?function(t,n,e){var r=a({_normalized:!0,path:N(e,n.params)});if(r){var o=r.matched,i=o[o.length-1];return n.params=r.params,u(i,n)}return u(null,n)}(0,e,t.matchAs):d(t,e,r,n)}return{match:a,addRoutes:function(t){J(t,r,o,i)}}}function Z(t,n,e){var r=n.match(t);if(!r)return!1;if(!e)return!0;for(var o=1,i=r.length;o<i;++o){var a=t.keys[o-1],s="string"==typeof r[o]?decodeURIComponent(r[o]):r[o];a&&(e[a.name||"pathMatch"]=s)}return!0}var V=Object.create(null);function Q(){window.history.replaceState({key:pt()},"",window.location.href.replace(window.location.origin,"")),window.addEventListener("popstate",function(t){var n;nt(),t.state&&t.state.key&&(n=t.state.key,ct=n)})}function tt(t,n,e,r){if(t.app){var o=t.options.scrollBehavior;o&&t.app.$nextTick(function(){var i=function(){var t=pt();if(t)return V[t]}(),a=o.call(t,n,e,r?i:null);a&&("function"==typeof a.then?a.then(function(t){it(t,i)}).catch(function(t){0}):it(a,i))})}}function nt(){var t=pt();t&&(V[t]={x:window.pageXOffset,y:window.pageYOffset})}function et(t){return ot(t.x)||ot(t.y)}function rt(t){return{x:ot(t.x)?t.x:window.pageXOffset,y:ot(t.y)?t.y:window.pageYOffset}}function ot(t){return"number"==typeof t}function it(t,n){var e,r="object"==typeof t;if(r&&"string"==typeof t.selector){var o=document.querySelector(t.selector);if(o){var i=t.offset&&"object"==typeof t.offset?t.offset:{};n=function(t,n){var e=document.documentElement.getBoundingClientRect(),r=t.getBoundingClientRect();return{x:r.left-e.left-n.x,y:r.top-e.top-n.y}}(o,i={x:ot((e=i).x)?e.x:0,y:ot(e.y)?e.y:0})}else et(t)&&(n=rt(t))}else r&&et(t)&&(n=rt(t));n&&window.scrollTo(n.x,n.y)}var at,st=E&&((-1===(at=window.navigator.userAgent).indexOf("Android 2.")&&-1===at.indexOf("Android 4.0")||-1===at.indexOf("Mobile Safari")||-1!==at.indexOf("Chrome")||-1!==at.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history),ut=E&&window.performance&&window.performance.now?window.performance:Date,ct=ft();function ft(){return ut.now().toFixed(3)}function pt(){return ct}function lt(t,n){nt();var e=window.history;try{n?e.replaceState({key:ct},"",t):(ct=ft(),e.pushState({key:ct},"",t))}catch(e){window.location[n?"replace":"assign"](t)}}function ht(t){lt(t,!0)}function dt(t,n,e){var r=function(o){o>=t.length?e():t[o]?n(t[o],function(){r(o+1)}):r(o+1)};r(0)}function vt(t){return function(n,e,o){var i=!1,a=0,s=null;yt(t,function(t,n,e,u){if("function"==typeof t&&void 0===t.cid){i=!0,a++;var c,f=_t(function(n){var r;((r=n).__esModule||gt&&"Module"===r[Symbol.toStringTag])&&(n=n.default),t.resolved="function"==typeof n?n:b.extend(n),e.components[u]=n,--a<=0&&o()}),p=_t(function(t){var n="Failed to resolve async component "+u+": "+t;s||(s=r(t)?t:new Error(n),o(s))});try{c=t(f,p)}catch(t){p(t)}if(c)if("function"==typeof c.then)c.then(f,p);else{var l=c.component;l&&"function"==typeof l.then&&l.then(f,p)}}}),i||o()}}function yt(t,n){return mt(t.map(function(t){return Object.keys(t.components).map(function(e){return n(t.components[e],t.instances[e],t,e)})}))}function mt(t){return Array.prototype.concat.apply([],t)}var gt="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function _t(t){var n=!1;return function(){for(var e=[],r=arguments.length;r--;)e[r]=arguments[r];if(!n)return n=!0,t.apply(this,e)}}var wt=function(t,n){this.router=t,this.base=function(t){if(!t)if(E){var n=document.querySelector("base");t=(t=n&&n.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else t="/";"/"!==t.charAt(0)&&(t="/"+t);return t.replace(/\/$/,"")}(n),this.current=y,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};function bt(t,n,e,r){var o=yt(t,function(t,r,o,i){var a=function(t,n){"function"!=typeof t&&(t=b.extend(t));return t.options[n]}(t,n);if(a)return Array.isArray(a)?a.map(function(t){return e(t,r,o,i)}):e(a,r,o,i)});return mt(r?o.reverse():o)}function xt(t,n){if(n)return function(){return t.apply(n,arguments)}}wt.prototype.listen=function(t){this.cb=t},wt.prototype.onReady=function(t,n){this.ready?t():(this.readyCbs.push(t),n&&this.readyErrorCbs.push(n))},wt.prototype.onError=function(t){this.errorCbs.push(t)},wt.prototype.transitionTo=function(t,n,e){var r=this,o=this.router.match(t,this.current);this.confirmTransition(o,function(){r.updateRoute(o),n&&n(o),r.ensureURL(),r.ready||(r.ready=!0,r.readyCbs.forEach(function(t){t(o)}))},function(t){e&&e(t),t&&!r.ready&&(r.ready=!0,r.readyErrorCbs.forEach(function(n){n(t)}))})},wt.prototype.confirmTransition=function(t,n,e){var o=this,i=this.current,a=function(t){r(t)&&(o.errorCbs.length?o.errorCbs.forEach(function(n){n(t)}):console.error(t)),e&&e(t)};if(_(t,i)&&t.matched.length===i.matched.length)return this.ensureURL(),a();var s=function(t,n){var e,r=Math.max(t.length,n.length);for(e=0;e<r&&t[e]===n[e];e++);return{updated:n.slice(0,e),activated:n.slice(e),deactivated:t.slice(e)}}(this.current.matched,t.matched),u=s.updated,c=s.deactivated,f=s.activated,p=[].concat(function(t){return bt(t,"beforeRouteLeave",xt,!0)}(c),this.router.beforeHooks,function(t){return bt(t,"beforeRouteUpdate",xt)}(u),f.map(function(t){return t.beforeEnter}),vt(f));this.pending=t;var l=function(n,e){if(o.pending!==t)return a();try{n(t,i,function(t){!1===t||r(t)?(o.ensureURL(!0),a(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(a(),"object"==typeof t&&t.replace?o.replace(t):o.push(t)):e(t)})}catch(t){a(t)}};dt(p,l,function(){var e=[];dt(function(t,n,e){return bt(t,"beforeRouteEnter",function(t,r,o,i){return function(t,n,e,r,o){return function(i,a,s){return t(i,a,function(t){s(t),"function"==typeof t&&r.push(function(){!function t(n,e,r,o){e[r]&&!e[r]._isBeingDestroyed?n(e[r]):o()&&setTimeout(function(){t(n,e,r,o)},16)}(t,n.instances,e,o)})})}}(t,o,i,n,e)})}(f,e,function(){return o.current===t}).concat(o.router.resolveHooks),l,function(){if(o.pending!==t)return a();o.pending=null,n(t),o.router.app&&o.router.app.$nextTick(function(){e.forEach(function(t){t()})})})})},wt.prototype.updateRoute=function(t){var n=this.current;this.current=t,this.cb&&this.cb(t),this.router.afterHooks.forEach(function(e){e&&e(t,n)})};var Ct=function(t){function n(n,e){var r=this;t.call(this,n,e);var o=n.options.scrollBehavior,i=st&&o;i&&Q();var a=At(this.base);window.addEventListener("popstate",function(t){var e=r.current,o=At(r.base);r.current===y&&o===a||r.transitionTo(o,function(t){i&&tt(n,t,e,!0)})})}return t&&(n.__proto__=t),n.prototype=Object.create(t&&t.prototype),n.prototype.constructor=n,n.prototype.go=function(t){window.history.go(t)},n.prototype.push=function(t,n,e){var r=this,o=this.current;this.transitionTo(t,function(t){lt($(r.base+t.fullPath)),tt(r.router,t,o,!1),n&&n(t)},e)},n.prototype.replace=function(t,n,e){var r=this,o=this.current;this.transitionTo(t,function(t){ht($(r.base+t.fullPath)),tt(r.router,t,o,!1),n&&n(t)},e)},n.prototype.ensureURL=function(t){if(At(this.base)!==this.current.fullPath){var n=$(this.base+this.current.fullPath);t?lt(n):ht(n)}},n.prototype.getCurrentLocation=function(){return At(this.base)},n}(wt);function At(t){var n=decodeURI(window.location.pathname);return t&&0===n.indexOf(t)&&(n=n.slice(t.length)),(n||"/")+window.location.search+window.location.hash}var Ot=function(t){function n(n,e,r){t.call(this,n,e),r&&function(t){var n=At(t);if(!/^\/#/.test(n))return window.location.replace($(t+"/#"+n)),!0}(this.base)||Et()}return t&&(n.__proto__=t),n.prototype=Object.create(t&&t.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var t=this,n=this.router.options.scrollBehavior,e=st&&n;e&&Q(),window.addEventListener(st?"popstate":"hashchange",function(){var n=t.current;Et()&&t.transitionTo(Tt(),function(r){e&&tt(t.router,r,n,!0),st||Lt(r.fullPath)})})},n.prototype.push=function(t,n,e){var r=this,o=this.current;this.transitionTo(t,function(t){St(t.fullPath),tt(r.router,t,o,!1),n&&n(t)},e)},n.prototype.replace=function(t,n,e){var r=this,o=this.current;this.transitionTo(t,function(t){Lt(t.fullPath),tt(r.router,t,o,!1),n&&n(t)},e)},n.prototype.go=function(t){window.history.go(t)},n.prototype.ensureURL=function(t){var n=this.current.fullPath;Tt()!==n&&(t?St(n):Lt(n))},n.prototype.getCurrentLocation=function(){return Tt()},n}(wt);function Et(){var t=Tt();return"/"===t.charAt(0)||(Lt("/"+t),!1)}function Tt(){var t=window.location.href,n=t.indexOf("#");return-1===n?"":decodeURI(t.slice(n+1))}function $t(t){var n=window.location.href,e=n.indexOf("#");return(e>=0?n.slice(0,e):n)+"#"+t}function St(t){st?lt($t(t)):window.location.hash=t}function Lt(t){st?ht($t(t)):window.location.replace($t(t))}var It=function(t){function n(n,e){t.call(this,n,e),this.stack=[],this.index=-1}return t&&(n.__proto__=t),n.prototype=Object.create(t&&t.prototype),n.prototype.constructor=n,n.prototype.push=function(t,n,e){var r=this;this.transitionTo(t,function(t){r.stack=r.stack.slice(0,r.index+1).concat(t),r.index++,n&&n(t)},e)},n.prototype.replace=function(t,n,e){var r=this;this.transitionTo(t,function(t){r.stack=r.stack.slice(0,r.index).concat(t),n&&n(t)},e)},n.prototype.go=function(t){var n=this,e=this.index+t;if(!(e<0||e>=this.stack.length)){var r=this.stack[e];this.confirmTransition(r,function(){n.index=e,n.updateRoute(r)})}},n.prototype.getCurrentLocation=function(){var t=this.stack[this.stack.length-1];return t?t.fullPath:"/"},n.prototype.ensureURL=function(){},n}(wt),Ut=function(t){void 0===t&&(t={}),this.app=null,this.apps=[],this.options=t,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Y(t.routes||[],this);var n=t.mode||"hash";switch(this.fallback="history"===n&&!st&&!1!==t.fallback,this.fallback&&(n="hash"),E||(n="abstract"),this.mode=n,n){case"history":this.history=new Ct(this,t.base);break;case"hash":this.history=new Ot(this,t.base,this.fallback);break;case"abstract":this.history=new It(this,t.base);break;default:0}},Mt={currentRoute:{configurable:!0}};function Pt(t,n){return t.push(n),function(){var e=t.indexOf(n);e>-1&&t.splice(e,1)}}Ut.prototype.match=function(t,n,e){return this.matcher.match(t,n,e)},Mt.currentRoute.get=function(){return this.history&&this.history.current},Ut.prototype.init=function(t){var n=this;if(this.apps.push(t),!this.app){this.app=t;var e=this.history;if(e instanceof Ct)e.transitionTo(e.getCurrentLocation());else if(e instanceof Ot){var r=function(){e.setupListeners()};e.transitionTo(e.getCurrentLocation(),r,r)}e.listen(function(t){n.apps.forEach(function(n){n._route=t})})}},Ut.prototype.beforeEach=function(t){return Pt(this.beforeHooks,t)},Ut.prototype.beforeResolve=function(t){return Pt(this.resolveHooks,t)},Ut.prototype.afterEach=function(t){return Pt(this.afterHooks,t)},Ut.prototype.onReady=function(t,n){this.history.onReady(t,n)},Ut.prototype.onError=function(t){this.history.onError(t)},Ut.prototype.push=function(t,n,e){this.history.push(t,n,e)},Ut.prototype.replace=function(t,n,e){this.history.replace(t,n,e)},Ut.prototype.go=function(t){this.history.go(t)},Ut.prototype.back=function(){this.go(-1)},Ut.prototype.forward=function(){this.go(1)},Ut.prototype.getMatchedComponents=function(t){var n=t?t.matched?t:this.resolve(t).route:this.currentRoute;return n?[].concat.apply([],n.matched.map(function(t){return Object.keys(t.components).map(function(n){return t.components[n]})})):[]},Ut.prototype.resolve=function(t,n,e){var r=K(t,n||this.history.current,e,this),o=this.match(r,n),i=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(t,n,e){var r="hash"===e?"#"+n:n;return t?$(t+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:o}},Ut.prototype.addRoutes=function(t){this.matcher.addRoutes(t),this.history.current!==y&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ut.prototype,Mt),Ut.install=function t(n){if(!t.installed||b!==n){t.installed=!0,b=n;var e=function(t){return void 0!==t},r=function(t,n){var r=t.$options._parentVnode;e(r)&&e(r=r.data)&&e(r=r.registerRouteInstance)&&r(t,n)};n.mixin({beforeCreate:function(){e(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),n.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(n.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(n.prototype,"$route",{get:function(){return this._routerRoot._route}}),n.component("RouterView",i),n.component("RouterLink",A);var o=n.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},Ut.version="3.0.2",E&&window.Vue&&window.Vue.use(Ut);var jt=Ut;function Rt(t){return function(){return e(17)("./".concat(t,".vue"))}}function Bt(t){return Rt("pages/".concat(t))}function kt(t){return Rt("layouts/".concat(t))}var Ft=[{path:"",component:kt("NotAuthorized"),children:[{path:"/auth",name:"auth",component:Bt("Auth")}]},{path:"",component:kt("Default"),children:[{path:"/dashboard",name:"dashboard",component:Bt("Dashboard")}]}],qt=e(1);qt.a.use(jt);var Ht=new jt({scrollBehavior:function(){return{y:0}},routes:Ft}),Dt=e(5),Gt=e(4),Xt=function(t){if(Number(t.version.split(".")[0])>=2)t.mixin({beforeCreate:e});else{var n=t.prototype._init;t.prototype._init=function(t){void 0===t&&(t={}),t.init=t.init?[e].concat(t.init):e,n.call(this,t)}}function e(){var t=this.$options;t.store?this.$store="function"==typeof t.store?t.store():t.store:t.parent&&t.parent.$store&&(this.$store=t.parent.$store)}},zt="undefined"!=typeof window&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function Nt(t,n){Object.keys(t).forEach(function(e){return n(t[e],e)})}var Jt=function(t,n){this.runtime=n,this._children=Object.create(null),this._rawModule=t;var e=t.state;this.state=("function"==typeof e?e():e)||{}},Wt={namespaced:{configurable:!0}};Wt.namespaced.get=function(){return!!this._rawModule.namespaced},Jt.prototype.addChild=function(t,n){this._children[t]=n},Jt.prototype.removeChild=function(t){delete this._children[t]},Jt.prototype.getChild=function(t){return this._children[t]},Jt.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},Jt.prototype.forEachChild=function(t){Nt(this._children,t)},Jt.prototype.forEachGetter=function(t){this._rawModule.getters&&Nt(this._rawModule.getters,t)},Jt.prototype.forEachAction=function(t){this._rawModule.actions&&Nt(this._rawModule.actions,t)},Jt.prototype.forEachMutation=function(t){this._rawModule.mutations&&Nt(this._rawModule.mutations,t)},Object.defineProperties(Jt.prototype,Wt);var Kt=function(t){this.register([],t,!1)};Kt.prototype.get=function(t){return t.reduce(function(t,n){return t.getChild(n)},this.root)},Kt.prototype.getNamespace=function(t){var n=this.root;return t.reduce(function(t,e){return t+((n=n.getChild(e)).namespaced?e+"/":"")},"")},Kt.prototype.update=function(t){!function t(n,e,r){0;e.update(r);if(r.modules)for(var o in r.modules){if(!e.getChild(o))return void 0;t(n.concat(o),e.getChild(o),r.modules[o])}}([],this.root,t)},Kt.prototype.register=function(t,n,e){var r=this;void 0===e&&(e=!0);var o=new Jt(n,e);0===t.length?this.root=o:this.get(t.slice(0,-1)).addChild(t[t.length-1],o);n.modules&&Nt(n.modules,function(n,o){r.register(t.concat(o),n,e)})},Kt.prototype.unregister=function(t){var n=this.get(t.slice(0,-1)),e=t[t.length-1];n.getChild(e).runtime&&n.removeChild(e)};var Yt;var Zt=function(t){var n=this;void 0===t&&(t={}),!Yt&&"undefined"!=typeof window&&window.Vue&&an(window.Vue);var e=t.plugins;void 0===e&&(e=[]);var r=t.strict;void 0===r&&(r=!1);var o=t.state;void 0===o&&(o={}),"function"==typeof o&&(o=o()||{}),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new Kt(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new Yt;var i=this,a=this.dispatch,s=this.commit;this.dispatch=function(t,n){return a.call(i,t,n)},this.commit=function(t,n,e){return s.call(i,t,n,e)},this.strict=r,en(this,o,[],this._modules.root),nn(this,o),e.forEach(function(t){return t(n)}),Yt.config.devtools&&function(t){zt&&(t._devtoolHook=zt,zt.emit("vuex:init",t),zt.on("vuex:travel-to-state",function(n){t.replaceState(n)}),t.subscribe(function(t,n){zt.emit("vuex:mutation",t,n)}))}(this)},Vt={state:{configurable:!0}};function Qt(t,n){return n.indexOf(t)<0&&n.push(t),function(){var e=n.indexOf(t);e>-1&&n.splice(e,1)}}function tn(t,n){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var e=t.state;en(t,e,[],t._modules.root,!0),nn(t,e,n)}function nn(t,n,e){var r=t._vm;t.getters={};var o=t._wrappedGetters,i={};Nt(o,function(n,e){i[e]=function(){return n(t)},Object.defineProperty(t.getters,e,{get:function(){return t._vm[e]},enumerable:!0})});var a=Yt.config.silent;Yt.config.silent=!0,t._vm=new Yt({data:{$$state:n},computed:i}),Yt.config.silent=a,t.strict&&function(t){t._vm.$watch(function(){return this._data.$$state},function(){0},{deep:!0,sync:!0})}(t),r&&(e&&t._withCommit(function(){r._data.$$state=null}),Yt.nextTick(function(){return r.$destroy()}))}function en(t,n,e,r,o){var i=!e.length,a=t._modules.getNamespace(e);if(r.namespaced&&(t._modulesNamespaceMap[a]=r),!i&&!o){var s=rn(n,e.slice(0,-1)),u=e[e.length-1];t._withCommit(function(){Yt.set(s,u,r.state)})}var c=r.context=function(t,n,e){var r=""===n,o={dispatch:r?t.dispatch:function(e,r,o){var i=on(e,r,o),a=i.payload,s=i.options,u=i.type;return s&&s.root||(u=n+u),t.dispatch(u,a)},commit:r?t.commit:function(e,r,o){var i=on(e,r,o),a=i.payload,s=i.options,u=i.type;s&&s.root||(u=n+u),t.commit(u,a,s)}};return Object.defineProperties(o,{getters:{get:r?function(){return t.getters}:function(){return function(t,n){var e={},r=n.length;return Object.keys(t.getters).forEach(function(o){if(o.slice(0,r)===n){var i=o.slice(r);Object.defineProperty(e,i,{get:function(){return t.getters[o]},enumerable:!0})}}),e}(t,n)}},state:{get:function(){return rn(t.state,e)}}}),o}(t,a,e);r.forEachMutation(function(n,e){!function(t,n,e,r){(t._mutations[n]||(t._mutations[n]=[])).push(function(n){e.call(t,r.state,n)})}(t,a+e,n,c)}),r.forEachAction(function(n,e){var r=n.root?e:a+e,o=n.handler||n;!function(t,n,e,r){(t._actions[n]||(t._actions[n]=[])).push(function(n,o){var i,a=e.call(t,{dispatch:r.dispatch,commit:r.commit,getters:r.getters,state:r.state,rootGetters:t.getters,rootState:t.state},n,o);return(i=a)&&"function"==typeof i.then||(a=Promise.resolve(a)),t._devtoolHook?a.catch(function(n){throw t._devtoolHook.emit("vuex:error",n),n}):a})}(t,r,o,c)}),r.forEachGetter(function(n,e){!function(t,n,e,r){if(t._wrappedGetters[n])return void 0;t._wrappedGetters[n]=function(t){return e(r.state,r.getters,t.state,t.getters)}}(t,a+e,n,c)}),r.forEachChild(function(r,i){en(t,n,e.concat(i),r,o)})}function rn(t,n){return n.length?n.reduce(function(t,n){return t[n]},t):t}function on(t,n,e){var r;return null!==(r=t)&&"object"==typeof r&&t.type&&(e=n,n=t,t=t.type),{type:t,payload:n,options:e}}function an(t){Yt&&t===Yt||Xt(Yt=t)}Vt.state.get=function(){return this._vm._data.$$state},Vt.state.set=function(t){0},Zt.prototype.commit=function(t,n,e){var r=this,o=on(t,n,e),i=o.type,a=o.payload,s=(o.options,{type:i,payload:a}),u=this._mutations[i];u&&(this._withCommit(function(){u.forEach(function(t){t(a)})}),this._subscribers.forEach(function(t){return t(s,r.state)}))},Zt.prototype.dispatch=function(t,n){var e=this,r=on(t,n),o=r.type,i=r.payload,a={type:o,payload:i},s=this._actions[o];if(s)return this._actionSubscribers.forEach(function(t){return t(a,e.state)}),s.length>1?Promise.all(s.map(function(t){return t(i)})):s[0](i)},Zt.prototype.subscribe=function(t){return Qt(t,this._subscribers)},Zt.prototype.subscribeAction=function(t){return Qt(t,this._actionSubscribers)},Zt.prototype.watch=function(t,n,e){var r=this;return this._watcherVM.$watch(function(){return t(r.state,r.getters)},n,e)},Zt.prototype.replaceState=function(t){var n=this;this._withCommit(function(){n._vm._data.$$state=t})},Zt.prototype.registerModule=function(t,n,e){void 0===e&&(e={}),"string"==typeof t&&(t=[t]),this._modules.register(t,n),en(this,this.state,t,this._modules.get(t),e.preserveState),nn(this,this.state)},Zt.prototype.unregisterModule=function(t){var n=this;"string"==typeof t&&(t=[t]),this._modules.unregister(t),this._withCommit(function(){var e=rn(n.state,t.slice(0,-1));Yt.delete(e,t[t.length-1])}),tn(this)},Zt.prototype.hotUpdate=function(t){this._modules.update(t),tn(this,!0)},Zt.prototype._withCommit=function(t){var n=this._committing;this._committing=!0,t(),this._committing=n},Object.defineProperties(Zt.prototype,Vt);var sn=ln(function(t,n){var e={};return pn(n).forEach(function(n){var r=n.key,o=n.val;e[r]=function(){var n=this.$store.state,e=this.$store.getters;if(t){var r=hn(this.$store,"mapState",t);if(!r)return;n=r.context.state,e=r.context.getters}return"function"==typeof o?o.call(this,n,e):n[o]},e[r].vuex=!0}),e}),un=ln(function(t,n){var e={};return pn(n).forEach(function(n){var r=n.key,o=n.val;e[r]=function(){for(var n=[],e=arguments.length;e--;)n[e]=arguments[e];var r=this.$store.commit;if(t){var i=hn(this.$store,"mapMutations",t);if(!i)return;r=i.context.commit}return"function"==typeof o?o.apply(this,[r].concat(n)):r.apply(this.$store,[o].concat(n))}}),e}),cn=ln(function(t,n){var e={};return pn(n).forEach(function(n){var r=n.key,o=n.val;o=t+o,e[r]=function(){if(!t||hn(this.$store,"mapGetters",t))return this.$store.getters[o]},e[r].vuex=!0}),e}),fn=ln(function(t,n){var e={};return pn(n).forEach(function(n){var r=n.key,o=n.val;e[r]=function(){for(var n=[],e=arguments.length;e--;)n[e]=arguments[e];var r=this.$store.dispatch;if(t){var i=hn(this.$store,"mapActions",t);if(!i)return;r=i.context.dispatch}return"function"==typeof o?o.apply(this,[r].concat(n)):r.apply(this.$store,[o].concat(n))}}),e});function pn(t){return Array.isArray(t)?t.map(function(t){return{key:t,val:t}}):Object.keys(t).map(function(n){return{key:n,val:t[n]}})}function ln(t){return function(n,e){return"string"!=typeof n?(e=n,n=""):"/"!==n.charAt(n.length-1)&&(n+="/"),t(n,e)}}function hn(t,n,e){return t._modulesNamespaceMap[e]}var dn={Store:Zt,install:an,version:"3.0.1",mapState:sn,mapMutations:un,mapGetters:cn,mapActions:fn,createNamespacedHelpers:function(t){return{mapState:sn.bind(null,t),mapGetters:cn.bind(null,t),mapMutations:un.bind(null,t),mapActions:fn.bind(null,t)}}};qt.a.use(dn);var vn=new dn.Store({modules:Gt.default,strict:!1}),yn=e(6),mn=e.n(yn);mn.a.interceptors.response.use(function(t){return t},function(t){if(!t.response)return Promise.reject(t);var n=t.response;return 401===n.status&&(Ht.push({name:"dashboard"}),vn.commit("CLEAR_USER"),localStorage.removeItem("user")),n.data&&n.data.message,Promise.reject(t)}),qt.a.prototype.$axios=mn.a;e(40);qt.a.config.productionTip=!1,new qt.a({el:"#app",store:vn,router:Ht,render:function(t){return t(Dt.default)}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvbW9kdWxlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT82NDdhIiwid2VicGFjazovLy9zcmMvQXBwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9iM2M2Iiwid2VicGFjazovLy8uL3NyYy9BcHAudnVlIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMgbGF6eSBeXFwuXFwvLipcXC52dWUkIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL21vZHVsZXMgc3luYyBub25yZWN1cnNpdmUgXFwuanMkIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9tb2R1bGVzL3Byb2ZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnRvYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzIHN5bmMgXFwuc2NzcyQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9fX2ljb25zLnNjc3M/NjNiNCIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL19faWNvbnMuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvdXJsLWVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtZGVzaWduLWljb25zL2ljb25mb250L01hdGVyaWFsSWNvbnMtUmVndWxhci5lb3QiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLWRlc2lnbi1pY29ucy9pY29uZm9udC9NYXRlcmlhbEljb25zLVJlZ3VsYXIud29mZjIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLWRlc2lnbi1pY29ucy9pY29uZm9udC9NYXRlcmlhbEljb25zLVJlZ3VsYXIud29mZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtZGVzaWduLWljb25zL2ljb25mb250L01hdGVyaWFsSWNvbnMtUmVndWxhci50dGYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL2dsb2JhbC5zY3NzP2Q0YTkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9nbG9iYWwuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXJvdXRlci9kaXN0L3Z1ZS1yb3V0ZXIuZXNtLmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXIvaGVscGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXIvcm91dGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXIvcm91dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZXgvZGlzdC92dWV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcyJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiMCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwibW9kdWxlIiwibCIsImUiLCJwcm9taXNlcyIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uU2NyaXB0Q29tcGxldGUiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwicCIsImpzb25wU2NyaXB0U3JjIiwiZXZlbnQiLCJvbmVycm9yIiwib25sb2FkIiwiY2xlYXJUaW1lb3V0IiwiY2h1bmsiLCJlcnJvclR5cGUiLCJ0eXBlIiwicmVhbFNyYyIsInRhcmdldCIsImVycm9yIiwiRXJyb3IiLCJyZXF1ZXN0IiwidW5kZWZpbmVkIiwic2V0VGltZW91dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImFsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJvZSIsImVyciIsImNvbnNvbGUiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwicyIsImlzQnVmZmVyIiwidG9TdHJpbmciLCJpc0FycmF5IiwidmFsIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiZm9yRWFjaCIsIm9iaiIsImZuIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIm1lcmdlIiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJhcmd1bWVudHMiLCJleHRlbmQiLCJhIiwiYiIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwicmVwbGFjZSIsImdsb2JhbCIsInNldEltbWVkaWF0ZSIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsInYiLCJpc0RlZiIsImlzVHJ1ZSIsImlzUHJpbWl0aXZlIiwiX3RvU3RyaW5nIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJwYXJzZUZsb2F0IiwiU3RyaW5nIiwiTWF0aCIsImZsb29yIiwiaXNGaW5pdGUiLCJKU09OIiwic3RyaW5naWZ5IiwidG9OdW1iZXIiLCJpc05hTiIsIm1ha2VNYXAiLCJleHBlY3RzTG93ZXJDYXNlIiwibWFwIiwibGlzdCIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwicmVtb3ZlIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImhhc093biIsImNhY2hlZCIsImNhY2hlIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiXyIsInRvVXBwZXJDYXNlIiwiY2FwaXRhbGl6ZSIsImNoYXJBdCIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwiRnVuY3Rpb24iLCJjdHgiLCJib3VuZEZuIiwiYXBwbHkiLCJfbGVuZ3RoIiwidG9BcnJheSIsInN0YXJ0IiwicmV0IiwiQXJyYXkiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJyZXMiLCJub29wIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJEYXRlIiwiZ2V0VGltZSIsImtleXNBIiwia2V5cyIsImtleXNCIiwibG9vc2VJbmRleE9mIiwib25jZSIsImNhbGxlZCIsInRoaXMiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwiY29uZmlnIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwicGVyZm9ybWFuY2UiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJhc3luYyIsIl9saWZlY3ljbGVIb29rcyIsImRlZiIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiYmFpbFJFIiwiX2lzU2VydmVyIiwiaGFzUHJvdG8iLCJpbkJyb3dzZXIiLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsInVzZXJBZ2VudCIsImlzSUUiLCJ0ZXN0IiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0lPUyIsIm5hdGl2ZVdhdGNoIiwid2F0Y2giLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImlzU2VydmVyUmVuZGVyaW5nIiwiZW52IiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJfU2V0IiwiaGFzU3ltYm9sIiwiUmVmbGVjdCIsIm93bktleXMiLCJTZXQiLCJzZXQiLCJoYXMiLCJhZGQiLCJjbGVhciIsIndhcm4iLCJ1aWQiLCJEZXAiLCJpZCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJhZGREZXAiLCJub3RpZnkiLCJ1cGRhdGUiLCJ0YXJnZXRTdGFjayIsInB1c2hUYXJnZXQiLCJwb3BUYXJnZXQiLCJwb3AiLCJWTm9kZSIsInRhZyIsImNoaWxkcmVuIiwidGV4dCIsImVsbSIsImNvbnRleHQiLCJjb21wb25lbnRPcHRpb25zIiwiYXN5bmNGYWN0b3J5IiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJwYXJlbnQiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwibWV0aG9kIiwib3JpZ2luYWwiLCJhcmdzIiwibGVuIiwiaW5zZXJ0ZWQiLCJvYiIsIl9fb2JfXyIsIm9ic2VydmVBcnJheSIsImRlcCIsImFycmF5S2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJ2bUNvdW50IiwiX19wcm90b19fIiwiY29weUF1Z21lbnQiLCJ3YWxrIiwib2JzZXJ2ZSIsImFzUm9vdERhdGEiLCJpc0V4dGVuc2libGUiLCJfaXNWdWUiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsImN1c3RvbVNldHRlciIsInNoYWxsb3ciLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJtYXgiLCJkZWwiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsImZyb20iLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJ2bSIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiY29uY2F0IiwibWVyZ2VBc3NldHMiLCJob29rIiwia2V5JDEiLCJwcm9wcyIsIm1ldGhvZHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZU9wdGlvbnMiLCJvcHRpb25zIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVkIiwibm9ybWFsaXplSW5qZWN0IiwiZGlycyIsImRpcmVjdGl2ZXMiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiX2Jhc2UiLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcHNEYXRhIiwicHJvcCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsIkJvb2xlYW4iLCJzdHJpbmdJbmRleCIsImRlZmF1bHQiLCIkb3B0aW9ucyIsIl9wcm9wcyIsImdldFR5cGUiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJtYXRjaCIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaGFuZGxlRXJyb3IiLCJpbmZvIiwiY3VyIiwiJHBhcmVudCIsImhvb2tzIiwiZXJyb3JDYXB0dXJlZCIsImdsb2JhbEhhbmRsZUVycm9yIiwibG9nRXJyb3IiLCJtaWNyb1RpbWVyRnVuYyIsIm1hY3JvVGltZXJGdW5jIiwiY2FsbGJhY2tzIiwicGVuZGluZyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwidXNlTWFjcm9UYXNrIiwiTWVzc2FnZUNoYW5uZWwiLCJjaGFubmVsIiwicG9ydCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInRoZW4iLCJuZXh0VGljayIsImNiIiwiX3Jlc29sdmUiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY2FwdHVyZSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9uIiwib2xkT24iLCJyZW1vdmUkJDEiLCJjcmVhdGVPbmNlSGFuZGxlciIsIm9sZCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImNoZWNrUHJvcCIsImhhc2giLCJhbHRLZXkiLCJwcmVzZXJ2ZSIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsIm5lc3RlZEluZGV4IiwibGFzdEluZGV4IiwibGFzdCIsImlzVGV4dE5vZGUiLCJfaXNWTGlzdCIsImVuc3VyZUN0b3IiLCJjb21wIiwiYmFzZSIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCIkb24iLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJvbGRMaXN0ZW5lcnMiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsImF0dHJzIiwic2xvdCIsIm5hbWUkMSIsImlzV2hpdGVzcGFjZSIsInJlc29sdmVTY29wZWRTbG90cyIsImFjdGl2ZUluc3RhbmNlIiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJpc0luSW5hY3RpdmVUcmVlIiwiX2luYWN0aXZlIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRpcmVjdCIsIl9kaXJlY3RJbmFjdGl2ZSIsIiRjaGlsZHJlbiIsImNhbGxIb29rIiwiaGFuZGxlcnMiLCJqIiwiX2hhc0hvb2tFdmVudCIsIiRlbWl0IiwicXVldWUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsIndhaXRpbmciLCJmbHVzaGluZyIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwic29ydCIsImJlZm9yZSIsInJ1biIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiX3dhdGNoZXIiLCJfaXNNb3VudGVkIiwiX2lzRGVzdHJveWVkIiwiY2FsbFVwZGF0ZWRIb29rcyIsImVtaXQiLCJ1aWQkMSIsIldhdGNoZXIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwiX3dhdGNoZXJzIiwiZGVlcCIsInVzZXIiLCJsYXp5Iiwic3luYyIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwicGF0aCIsInNlZ21lbnRzIiwicGFyc2VQYXRoIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJxdWV1ZVdhdGNoZXIiLCJvbGRWYWx1ZSIsImV2YWx1YXRlIiwidGVhcmRvd24iLCJfaXNCZWluZ0Rlc3Ryb3llZCIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInByb3h5Iiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwicHJvcHNPcHRpb25zIiwiX3Byb3BLZXlzIiwibG9vcCIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiX2RhdGEiLCJnZXREYXRhIiwiY2hhckNvZGVBdCIsImluaXREYXRhIiwid2F0Y2hlcnMiLCJfY29tcHV0ZWRXYXRjaGVycyIsImlzU1NSIiwidXNlckRlZiIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJkZWZpbmVDb21wdXRlZCIsImluaXRDb21wdXRlZCIsImhhbmRsZXIiLCJjcmVhdGVXYXRjaGVyIiwiaW5pdFdhdGNoIiwic2hvdWxkQ2FjaGUiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNyZWF0ZUdldHRlckludm9rZXIiLCIkd2F0Y2giLCJyZXNvbHZlSW5qZWN0IiwiZmlsdGVyIiwicHJvdmlkZUtleSIsInNvdXJjZSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVuZGVyTGlzdCIsInJlbmRlciIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsIiRzbG90cyIsIiRjcmVhdGVFbGVtZW50IiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJkb21Qcm9wcyIsImNhbWVsaXplZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJ0cmVlIiwibWFya1N0YXRpYyIsInN0YXRpY1JlbmRlckZucyIsIl9yZW5kZXJQcm94eSIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9uIiwiX3MiLCJfbCIsIl90IiwiX3EiLCJfaSIsIl9tIiwiX2YiLCJfayIsIl9iIiwiX3YiLCJfZSIsIl91IiwiX2ciLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJfY29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsIl9zY29wZUlkIiwiX2MiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0IiwicmVuZGVyQ29udGV4dCIsImNsb25lIiwibWVyZ2VQcm9wcyIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJpbml0IiwiaHlkcmF0aW5nIiwia2VlcEFsaXZlIiwibW91bnRlZE5vZGUiLCJwcmVwYXRjaCIsIl9pc0NvbXBvbmVudCIsIl9wYXJlbnRWbm9kZSIsImlubGluZVRlbXBsYXRlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsIiRtb3VudCIsIm9sZFZub2RlIiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsImhhc0NoaWxkcmVuIiwiX3JlbmRlckNoaWxkcmVuIiwiJHZub2RlIiwiX3Zub2RlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsInByb3BLZXlzIiwiX3BhcmVudExpc3RlbmVycyIsIiRmb3JjZVVwZGF0ZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsIiRkZXN0cm95IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJjaWQiLCJmYWN0b3J5IiwiZXJyb3JDb21wIiwicmVzb2x2ZWQiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJjb250ZXh0cyIsImZvcmNlUmVuZGVyIiwicmVuZGVyQ29tcGxldGVkIiwicmVhc29uIiwiY29tcG9uZW50IiwiZGVsYXkiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsIm1vZGVsIiwiY2FsbGJhY2siLCJ0cmFuc2Zvcm1Nb2RlbCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJmdW5jdGlvbmFsIiwidm5vZGVzIiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm5hdGl2ZU9uIiwiYWJzdHJhY3QiLCJ0b01lcmdlIiwiX21lcmdlZCIsIm1lcmdlSG9vayQxIiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiZjEiLCJmMiIsIlNJTVBMRV9OT1JNQUxJWkUiLCJBTFdBWVNfTk9STUFMSVpFIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJpcyIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwicHJlIiwiYXBwbHlOUyIsImZvcmNlIiwic3R5bGUiLCJjbGFzcyIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwiX2NyZWF0ZUVsZW1lbnQiLCJ1aWQkMyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJleHRlbmRlZCIsImV4dGVuZE9wdGlvbnMiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwiZGVkdXBlIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImNvbXBvbmVudHMiLCJWdWUiLCJfaW5pdCIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiY29uc3RydWN0b3IiLCJDb21wIiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsIm1peGluIiwidXNlIiwiZ2V0Q29tcG9uZW50TmFtZSIsIm1hdGNoZXMiLCJwYXR0ZXJuIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwiY2FjaGVkTm9kZSIsInBydW5lQ2FjaGVFbnRyeSIsImN1cnJlbnQiLCJjYWNoZWQkJDEiLCJfdWlkIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiX2NvbXBvbmVudFRhZyIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsIl9zZWxmIiwiJHJvb3QiLCIkcmVmcyIsImluaXRMaWZlY3ljbGUiLCJfZXZlbnRzIiwiaW5pdEV2ZW50cyIsInBhcmVudERhdGEiLCJpbml0UmVuZGVyIiwiaW5pdEluamVjdGlvbnMiLCJpbml0UHJvdmlkZSIsImVsIiwiaW5pdE1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJzdGF0ZU1peGluIiwiaG9va1JFIiwiJG9uY2UiLCJjYnMiLCJpJDEiLCJldmVudHNNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwibGlmZWN5Y2xlTWl4aW4iLCIkbmV4dFRpY2siLCJfcmVuZGVyIiwicmVmIiwicmVuZGVyTWl4aW4iLCJwYXR0ZXJuVHlwZXMiLCJSZWdFeHAiLCJidWlsdEluQ29tcG9uZW50cyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiTnVtYmVyIiwiY3JlYXRlZCIsImRlc3Ryb3llZCIsIm1vdW50ZWQiLCJ0aGlzJDEiLCJwYXJzZUludCIsImNvbmZpZ0RlZiIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsImRlbGV0ZSIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsInVuc2hpZnQiLCJpbnN0YWxsIiwiaW5pdFVzZSIsImluaXRNaXhpbiQxIiwiZGVmaW5pdGlvbiIsImluaXRBc3NldFJlZ2lzdGVycyIsImluaXRHbG9iYWxBUEkiLCJzc3JDb250ZXh0IiwidmVyc2lvbiIsImFjY2VwdFZhbHVlIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImlzRmFsc3lBdHRyVmFsdWUiLCJnZW5DbGFzc0ZvclZub2RlIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInJlbmRlckNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwidGFnTmFtZSIsIm11bHRpcGxlIiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZXNwYWNlIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVDb21tZW50IiwiaW5zZXJ0QmVmb3JlIiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJyZW1vdmVDaGlsZCIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJzY29wZUlkIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ0eXBlQSIsInR5cGVCIiwic2FtZUlucHV0VHlwZSIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwib2xkRGlyIiwiZGlyIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiam9pbiIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsImJhc2VTZXRBdHRyIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJ0YXJnZXQkMSIsImtsYXNzIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsImFkZCQxIiwiX3dpdGhUYXNrIiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiY2hhbmdlIiwibm9ybWFsaXplRXZlbnRzIiwiZXZlbnRzIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsImNoaWxkTm9kZXMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImNoZWNrVmFsIiwiY29tcG9zaW5nIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsIl92TW9kaWZpZXJzIiwibnVtYmVyIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsImNzc1RleHQiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZW1wdHlTdHlsZSIsImNzc1ZhclJFIiwiaW1wb3J0YW50UkUiLCJzZXRQcm9wIiwic2V0UHJvcGVydHkiLCJub3JtYWxpemVkTmFtZSIsIm5vcm1hbGl6ZSIsInZlbmRvck5hbWVzIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImdldFN0eWxlIiwid2hpdGVzcGFjZVJFIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiZGVmJCQxIiwiY3NzIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImV4cGVjdGVkVHlwZSIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJlbmQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwic3R5bGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInRyYW5zaXRpb24iLCJfZW50ZXJDYiIsIm5vZGVUeXBlIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsInJtIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBhdGNoIiwiYmFja2VuZCIsInJlbW92ZU5vZGUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5IiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJpbm5lck5vZGUiLCJhY3RpdmF0ZSIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJyZWYkJDEiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJjaGlsZEVsbSIsImNyZWF0ZVJtQ2IiLCJmaW5kSWR4SW5PbGQiLCJvbGRDaCIsInBhdGNoVm5vZGUiLCJyZW1vdmVPbmx5IiwiaHlkcmF0ZSIsIm5ld0NoIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsImNhbk1vdmUiLCJ1cGRhdGVDaGlsZHJlbiIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaXNSZW5kZXJlZE1vZHVsZSIsImluVlByZSIsImhhc0NoaWxkTm9kZXMiLCJpbm5lckhUTUwiLCJjaGlsZHJlbk1hdGNoIiwiZmlyc3RDaGlsZCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJvbGRFbG0iLCJwYXRjaGFibGUiLCJpJDIiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsInNvbWUiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJzZWxlY3RlZCIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2NhdGVOb2RlIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsImRpc3BsYXkiLCJ1bmJpbmQiLCJ0cmFuc2l0aW9uUHJvcHMiLCJnZXRSZWFsQ2hpbGQiLCJjb21wT3B0aW9ucyIsImV4dHJhY3RUcmFuc2l0aW9uRGF0YSIsInBsYWNlaG9sZGVyIiwiaCIsInJhd0NoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsIl9sZWF2aW5nIiwib2xkUmF3Q2hpbGQiLCJvbGRDaGlsZCIsImlzU2FtZUNoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiY2FsbFBlbmRpbmdDYnMiLCJfbW92ZUNiIiwicmVjb3JkUG9zaXRpb24iLCJuZXdQb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhcHBseVRyYW5zbGF0aW9uIiwib2xkUG9zIiwicG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJ0b3AiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInBsYXRmb3JtQ29tcG9uZW50cyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwidXBkYXRlZCIsImhhc01vdmUiLCJfcmVmbG93IiwiYm9keSIsIm9mZnNldEhlaWdodCIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwiYXR0ciIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidXBkYXRlQ29tcG9uZW50IiwibW91bnRDb21wb25lbnQiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnkiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiZyIsInByb2Nlc3MiLCJ1dGlscyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIkNvbnRlbnQtVHlwZSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsIkFjY2VwdCIsImZpbGVzIiwicmVxdWlyZSIsIl9oIiwiX3dpdGhTdHJpcHBlZCIsInNyY19BcHB2dWVfdHlwZV9zY3JpcHRfbGFuZ19qc18iLCJiZWZvcmVDcmVhdGUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiJHJvdXRlciIsIiRzdG9yZSIsImNvbW1pdCIsInJlbW92ZUl0ZW0iLCJjb21wb25lbnROb3JtYWxpemVyIiwiX19maWxlIiwibm9ybWFsaXplQ29tcG9uZW50Iiwic2NyaXB0RXhwb3J0cyIsImZ1bmN0aW9uYWxUZW1wbGF0ZSIsImluamVjdFN0eWxlcyIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsIl9zc3JSZWdpc3RlciIsInNoYWRvd1Jvb3QiLCJfaW5qZWN0U3R5bGVzIiwib3JpZ2luYWxSZW5kZXIiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJidG9hIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImxvYWRFdmVudCIsInhEb21haW4iLCJYRG9tYWluUmVxdWVzdCIsInVybCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJvcGVuIiwicGFyYW1zU2VyaWFsaXplciIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiX19DQU5DRUxfXyIsIkNhbmNlbCIsInVzZVNvdXJjZU1hcCIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImF0b2IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwicGFydCIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJpZHgiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJub25jZSIsImdldE5vbmNlIiwiYWRkQXR0cnMiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJjc3NOb2RlIiwiLi9BcHAudnVlIiwiLi9sYXlvdXRzL0RlZmF1bHQudnVlIiwiLi9sYXlvdXRzL05vdEF1dGhvcml6ZWQudnVlIiwiLi9wYWdlcy9BdXRoLnZ1ZSIsIi4vcGFnZXMvRGFzaGJvYXJkLnZ1ZSIsIndlYnBhY2tBc3luY0NvbnRleHQiLCJyZXEiLCJpZHMiLCJzY29wZSIsInNlbGYiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJ1bnJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwiaHRtbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwiZ2V0UHJvdG90eXBlT2YiLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwiZG9jdW1lbnRFbGVtZW50Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmFuZG9tIiwiYXR0YWNoRXZlbnQiLCJ0YXNrIiwiLi9pbmRleC5qcyIsIi4vcHJvZmlsZS5qcyIsIndlYnBhY2tDb250ZXh0Iiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwic3RhdGUiLCJtdXRhdGlvbnMiLCJTRVRfVVNFUiIsIkNMRUFSX1VTRVIiLCJhY3Rpb25zIiwiQXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZSIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwic3ByZWFkIiwicmVhZEZsb2F0TEUiLCJpc1Nsb3dCdWZmZXIiLCJfaXNCdWZmZXIiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJjaGFpbiIsImludGVyY2VwdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJlbmNvZGUiLCJzZXJpYWxpemVkUGFyYW1zIiwidG9JU09TdHJpbmciLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsImxpbmUiLCJzdWJzdHIiLCJvcmlnaW5VUkwiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsImNoYXJzIiwiRSIsImlucHV0IiwiYmxvY2siLCJjaGFyQ29kZSIsIm91dHB1dCIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwibm93IiwiZWplY3QiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJiYXNlVVJMIiwicmVsYXRpdmVVUkwiLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCIuL19faWNvbnMuc2NzcyIsIi4vZ2xvYmFsLnNjc3MiLCJobXIiLCJsb2NhbHMiLCJ1cmxFc2NhcGUiLCJfX19DU1NfTE9BREVSX1VSTF9fXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzJfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzNfX18iLCJiYXNlVXJsIiwiY3VycmVudERpciIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsImlzRXJyb3IiLCJWaWV3Iiwicm91dGVyVmlldyIsInJvdXRlIiwiJHJvdXRlIiwiX3JvdXRlclZpZXdDYWNoZSIsImRlcHRoIiwiaW5hY3RpdmUiLCJfcm91dGVyUm9vdCIsInJvdXRlclZpZXdEZXB0aCIsIm1hdGNoZWQiLCJyZWdpc3RlclJvdXRlSW5zdGFuY2UiLCJpbnN0YW5jZXMiLCJwcm9wc1RvUGFzcyIsInJlc29sdmVQcm9wcyIsImVuY29kZVJlc2VydmVSRSIsImVuY29kZVJlc2VydmVSZXBsYWNlciIsImNvbW1hUkUiLCJkZWNvZGUiLCJwYXJzZVF1ZXJ5IiwicGFyYW0iLCJzdHJpbmdpZnlRdWVyeSIsInZhbDIiLCJ4IiwidHJhaWxpbmdTbGFzaFJFIiwiY3JlYXRlUm91dGUiLCJyZWNvcmQiLCJyZWRpcmVjdGVkRnJvbSIsInJvdXRlciIsInN0cmluZ2lmeVF1ZXJ5JCQxIiwibWV0YSIsImZ1bGxQYXRoIiwiZ2V0RnVsbFBhdGgiLCJmb3JtYXRNYXRjaCIsIlNUQVJUIiwiX3N0cmluZ2lmeVF1ZXJ5IiwiaXNTYW1lUm91dGUiLCJpc09iamVjdEVxdWFsIiwiYUtleXMiLCJiS2V5cyIsImFWYWwiLCJiVmFsIiwiX1Z1ZSIsInRvVHlwZXMiLCJldmVudFR5cGVzIiwiTGluayIsInJlcXVpcmVkIiwiZXhhY3QiLCJhcHBlbmQiLCJleGFjdEFjdGl2ZUNsYXNzIiwiY2xhc3NlcyIsImdsb2JhbEFjdGl2ZUNsYXNzIiwibGlua0FjdGl2ZUNsYXNzIiwiZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyIsImxpbmtFeGFjdEFjdGl2ZUNsYXNzIiwiYWN0aXZlQ2xhc3NGYWxsYmFjayIsImV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayIsImNvbXBhcmVUYXJnZXQiLCJxdWVyeUluY2x1ZGVzIiwiaXNJbmNsdWRlZFJvdXRlIiwiZ3VhcmRFdmVudCIsImNsaWNrIiwiZmluZEFuY2hvciIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwiY3VycmVudFRhcmdldCIsInByZXZlbnREZWZhdWx0IiwicmVzb2x2ZVBhdGgiLCJyZWxhdGl2ZSIsImZpcnN0Q2hhciIsInN0YWNrIiwic2VnbWVudCIsImNsZWFuUGF0aCIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHBfMSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlXzEiLCJjb21waWxlXzEiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9GdW5jdGlvbl8xIiwidG9rZW5zVG9SZWdFeHBfMSIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsImVzY2FwZWQiLCJvZmZzZXQiLCJuZXh0IiwicHJlZml4IiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJwcmV0dHkiLCJhdHRhY2hLZXlzIiwicmUiLCJmbGFncyIsInNlbnNpdGl2ZSIsInN0cmljdCIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwicmVnZXhwVG9SZWdleHAiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJjb21waWxlIiwicmVnZXhwQ29tcGlsZUNhY2hlIiwiZmlsbFBhcmFtcyIsInJvdXRlTXNnIiwiY3JlYXRlUm91dGVNYXAiLCJyb3V0ZXMiLCJvbGRQYXRoTGlzdCIsIm9sZFBhdGhNYXAiLCJvbGROYW1lTWFwIiwicGF0aExpc3QiLCJwYXRoTWFwIiwibmFtZU1hcCIsImFkZFJvdXRlUmVjb3JkIiwibWF0Y2hBcyIsInBhdGhUb1JlZ2V4cE9wdGlvbnMiLCJub3JtYWxpemVkUGF0aCIsIm5vcm1hbGl6ZVBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwicmVnZXgiLCJjb21waWxlUm91dGVSZWdleCIsInJlZGlyZWN0IiwiY2hpbGRNYXRjaEFzIiwiYWxpYXMiLCJhbGlhc2VzIiwiYWxpYXNSb3V0ZSIsIm5vcm1hbGl6ZUxvY2F0aW9uIiwiX25vcm1hbGl6ZWQiLCJyYXdQYXRoIiwicGFyc2VkUGF0aCIsImhhc2hJbmRleCIsInF1ZXJ5SW5kZXgiLCJiYXNlUGF0aCIsImV4dHJhUXVlcnkiLCJfcGFyc2VRdWVyeSIsInBhcnNlZFF1ZXJ5IiwicmVzb2x2ZVF1ZXJ5IiwiY3JlYXRlTWF0Y2hlciIsImN1cnJlbnRSb3V0ZSIsIl9jcmVhdGVSb3V0ZSIsInBhcmFtTmFtZXMiLCJyZWNvcmQkMSIsIm1hdGNoUm91dGUiLCJvcmlnaW5hbFJlZGlyZWN0IiwicmVzb2x2ZVJlY29yZFBhdGgiLCJhbGlhc2VkTWF0Y2giLCJhbGlhc2VkUmVjb3JkIiwiYWRkUm91dGVzIiwicG9zaXRpb25TdG9yZSIsInNldHVwU2Nyb2xsIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsImdldFN0YXRlS2V5Iiwib3JpZ2luIiwic2F2ZVNjcm9sbFBvc2l0aW9uIiwiX2tleSIsImhhbmRsZVNjcm9sbCIsImlzUG9wIiwiYXBwIiwiYmVoYXZpb3IiLCJzY3JvbGxCZWhhdmlvciIsInBvc2l0aW9uIiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJzaG91bGRTY3JvbGwiLCJzY3JvbGxUb1Bvc2l0aW9uIiwiY2F0Y2giLCJwYWdlWE9mZnNldCIsInkiLCJwYWdlWU9mZnNldCIsImlzVmFsaWRQb3NpdGlvbiIsIm5vcm1hbGl6ZVBvc2l0aW9uIiwic2VsZWN0b3IiLCJkb2NSZWN0IiwiZWxSZWN0IiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwic2Nyb2xsVG8iLCJ1YSIsInN1cHBvcnRzUHVzaFN0YXRlIiwiVGltZSIsImdlbktleSIsInRvRml4ZWQiLCJwdXNoU3RhdGUiLCJydW5RdWV1ZSIsInN0ZXAiLCJyZXNvbHZlQXN5bmNDb21wb25lbnRzIiwiaGFzQXN5bmMiLCJmbGF0TWFwQ29tcG9uZW50cyIsInJlc29sdmVkRGVmIiwibXNnIiwiZmxhdHRlbiIsIkhpc3RvcnkiLCJiYXNlRWwiLCJub3JtYWxpemVCYXNlIiwicmVhZHkiLCJyZWFkeUNicyIsInJlYWR5RXJyb3JDYnMiLCJlcnJvckNicyIsImV4dHJhY3RHdWFyZHMiLCJyZWNvcmRzIiwicmV2ZXJzZSIsImd1YXJkcyIsImd1YXJkIiwiZXh0cmFjdEd1YXJkIiwiYmluZEd1YXJkIiwibGlzdGVuIiwib25SZWFkeSIsImVycm9yQ2IiLCJvbkVycm9yIiwidHJhbnNpdGlvblRvIiwib25Db21wbGV0ZSIsIm9uQWJvcnQiLCJjb25maXJtVHJhbnNpdGlvbiIsInVwZGF0ZVJvdXRlIiwiZW5zdXJlVVJMIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJyZXNvbHZlUXVldWUiLCJleHRyYWN0TGVhdmVHdWFyZHMiLCJiZWZvcmVIb29rcyIsImV4dHJhY3RVcGRhdGVIb29rcyIsIml0ZXJhdG9yIiwicG9zdEVudGVyQ2JzIiwiaXNWYWxpZCIsInBvbGwiLCJiaW5kRW50ZXJHdWFyZCIsImV4dHJhY3RFbnRlckd1YXJkcyIsInJlc29sdmVIb29rcyIsInByZXYiLCJhZnRlckhvb2tzIiwiSFRNTDVIaXN0b3J5IiwiSGlzdG9yeSQkMSIsImV4cGVjdFNjcm9sbCIsInN1cHBvcnRzU2Nyb2xsIiwiaW5pdExvY2F0aW9uIiwiZ2V0TG9jYXRpb24iLCJnbyIsImZyb21Sb3V0ZSIsImdldEN1cnJlbnRMb2NhdGlvbiIsImRlY29kZVVSSSIsIkhhc2hIaXN0b3J5IiwiY2hlY2tGYWxsYmFjayIsImVuc3VyZVNsYXNoIiwic2V0dXBMaXN0ZW5lcnMiLCJnZXRIYXNoIiwicmVwbGFjZUhhc2giLCJwdXNoSGFzaCIsImdldFVybCIsIkFic3RyYWN0SGlzdG9yeSIsInRhcmdldEluZGV4IiwiVnVlUm91dGVyIiwiYXBwcyIsIm1hdGNoZXIiLCJyZWdpc3Rlckhvb2siLCJzZXR1cEhhc2hMaXN0ZW5lciIsIl9yb3V0ZSIsImJlZm9yZUVhY2giLCJiZWZvcmVSZXNvbHZlIiwiYWZ0ZXJFYWNoIiwiYmFjayIsImZvcndhcmQiLCJnZXRNYXRjaGVkQ29tcG9uZW50cyIsImNyZWF0ZUhyZWYiLCJub3JtYWxpemVkVG8iLCJpbnN0YWxsZWQiLCJyZWdpc3Rlckluc3RhbmNlIiwiY2FsbFZhbCIsIl9yb3V0ZXIiLCJiZWZvcmVSb3V0ZUVudGVyIiwiYmVmb3JlUm91dGVMZWF2ZSIsImJlZm9yZVJvdXRlVXBkYXRlIiwidnVlX3JvdXRlcl9lc20iLCJsb2FkIiwibG9hZFBhZ2UiLCJwYWdlIiwibG9hZExheW91dCIsImxheW91dCIsImFwcGx5TWl4aW4iLCJ2dWV4SW5pdCIsInN0b3JlIiwiZGV2dG9vbEhvb2siLCJmb3JFYWNoVmFsdWUiLCJNb2R1bGUiLCJyYXdNb2R1bGUiLCJydW50aW1lIiwiX2NoaWxkcmVuIiwiX3Jhd01vZHVsZSIsInJhd1N0YXRlIiwicHJvdG90eXBlQWNjZXNzb3JzJDEiLCJuYW1lc3BhY2VkIiwiYWRkQ2hpbGQiLCJnZXRDaGlsZCIsImdldHRlcnMiLCJmb3JFYWNoQ2hpbGQiLCJmb3JFYWNoR2V0dGVyIiwiZm9yRWFjaEFjdGlvbiIsImZvckVhY2hNdXRhdGlvbiIsIk1vZHVsZUNvbGxlY3Rpb24iLCJyYXdSb290TW9kdWxlIiwicmVnaXN0ZXIiLCJyZWR1Y2UiLCJyb290IiwiZ2V0TmFtZXNwYWNlIiwidGFyZ2V0TW9kdWxlIiwibmV3TW9kdWxlIiwicmF3Q2hpbGRNb2R1bGUiLCJ1bnJlZ2lzdGVyIiwiU3RvcmUiLCJ2dWV4X2VzbV9pbnN0YWxsIiwicGx1Z2lucyIsIl9jb21taXR0aW5nIiwiX2FjdGlvbnMiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXMiLCJfbW9kdWxlc05hbWVzcGFjZU1hcCIsIl9zdWJzY3JpYmVycyIsIl93YXRjaGVyVk0iLCJkaXNwYXRjaCIsInBheWxvYWQiLCJpbnN0YWxsTW9kdWxlIiwicmVzZXRTdG9yZVZNIiwiX2RldnRvb2xIb29rIiwidGFyZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJtdXRhdGlvbiIsImRldnRvb2xQbHVnaW4iLCJ2dWV4X2VzbV9wcm90b3R5cGVBY2Nlc3NvcnMiLCJnZW5lcmljU3Vic2NyaWJlIiwicmVzZXRTdG9yZSIsImhvdCIsIm9sZFZtIiwiX3ZtIiwid3JhcHBlZEdldHRlcnMiLCIkJHN0YXRlIiwiZW5hYmxlU3RyaWN0TW9kZSIsIl93aXRoQ29tbWl0Iiwicm9vdFN0YXRlIiwiaXNSb290IiwicGFyZW50U3RhdGUiLCJnZXROZXN0ZWRTdGF0ZSIsIm1vZHVsZU5hbWUiLCJsb2NhbCIsIm5vTmFtZXNwYWNlIiwiX3R5cGUiLCJfcGF5bG9hZCIsIl9vcHRpb25zIiwidW5pZnlPYmplY3RTdHlsZSIsImdldHRlcnNQcm94eSIsInNwbGl0UG9zIiwibG9jYWxUeXBlIiwibWFrZUxvY2FsR2V0dGVycyIsIm1ha2VMb2NhbENvbnRleHQiLCJyZWdpc3Rlck11dGF0aW9uIiwiYWN0aW9uIiwicm9vdEdldHRlcnMiLCJyZWdpc3RlckFjdGlvbiIsInJhd0dldHRlciIsInJlZ2lzdGVyR2V0dGVyIiwiZW50cnkiLCJzdWJzY3JpYmVBY3Rpb24iLCJyZWdpc3Rlck1vZHVsZSIsInByZXNlcnZlU3RhdGUiLCJ1bnJlZ2lzdGVyTW9kdWxlIiwiaG90VXBkYXRlIiwibmV3T3B0aW9ucyIsImNvbW1pdHRpbmciLCJtYXBTdGF0ZSIsIm5vcm1hbGl6ZU5hbWVzcGFjZSIsInN0YXRlcyIsIm5vcm1hbGl6ZU1hcCIsImdldE1vZHVsZUJ5TmFtZXNwYWNlIiwidnVleCIsIm1hcE11dGF0aW9ucyIsIm1hcEdldHRlcnMiLCJtYXBBY3Rpb25zIiwiaGVscGVyIiwidnVleF9lc20iLCJjcmVhdGVOYW1lc3BhY2VkSGVscGVycyIsIlZ1ZXgiLCJyZXNwIiwiJGF4aW9zIiwiQXBwIl0sIm1hcHBpbmdzIjoiYUFDQSxTQUFBQSxFQUFBQyxHQVFBLElBUEEsSUFNQUMsRUFBQUMsRUFOQUMsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBS0FLLEVBQUEsRUFBQUMsRUFBQSxHQUNRRCxFQUFBRixFQUFBSSxPQUFvQkYsSUFDNUJILEVBQUFDLEVBQUFFLEdBQ0FHLEVBQUFOLElBQ0FJLEVBQUFHLEtBQUFELEVBQUFOLEdBQUEsSUFFQU0sRUFBQU4sR0FBQSxFQUVBLElBQUFELEtBQUFHLEVBQ0FNLE9BQUFDLFVBQUFDLGVBQUFDLEtBQUFULEVBQUFILEtBQ0FhLEVBQUFiLEdBQUFHLEVBQUFILElBS0EsSUFGQWMsS0FBQWYsR0FFQU0sRUFBQUMsUUFDQUQsRUFBQVUsT0FBQVYsR0FPQSxJQUFBVyxFQUFBLEdBS0FULEVBQUEsQ0FDQVUsRUFBQSxHQVdBLFNBQUFDLEVBQUFsQixHQUdBLEdBQUFnQixFQUFBaEIsR0FDQSxPQUFBZ0IsRUFBQWhCLEdBQUFtQixRQUdBLElBQUFDLEVBQUFKLEVBQUFoQixHQUFBLENBQ0FJLEVBQUFKLEVBQ0FxQixHQUFBLEVBQ0FGLFFBQUEsSUFVQSxPQU5BTixFQUFBYixHQUFBWSxLQUFBUSxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRCxHQUdBRSxFQUFBQyxHQUFBLEVBR0FELEVBQUFELFFBS0FELEVBQUFJLEVBQUEsU0FBQXJCLEdBQ0EsSUFBQXNCLEVBQUEsR0FLQUMsRUFBQWpCLEVBQUFOLEdBQ0EsT0FBQXVCLEVBR0EsR0FBQUEsRUFDQUQsRUFBQWYsS0FBQWdCLEVBQUEsUUFDSyxDQUVMLElBQUFDLEVBQUEsSUFBQUMsUUFBQSxTQUFBQyxFQUFBQyxHQUNB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SXdnQixLQUFJLENBQ1BxQyxHQUFJLE9BQ0ppaUMsU0FDQXhRLFVBQ0F4OUIsT0FBUSxTQUFBc2tCLEdBQUMsT0FBSUEsRUFBRWt3QiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG5cblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0fTtcblxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fTtcblxuXG5cbiBcdC8vIHNjcmlwdCBwYXRoIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBqc29ucFNjcmlwdFNyYyhjaHVua0lkKSB7XG4gXHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLm1haW4uanNcIlxuIFx0fVxuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cbiBcdC8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbiBcdC8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5lID0gZnVuY3Rpb24gcmVxdWlyZUVuc3VyZShjaHVua0lkKSB7XG4gXHRcdHZhciBwcm9taXNlcyA9IFtdO1xuXG5cbiBcdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXG4gXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuIFx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcbiBcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdO1xuIFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG4gXHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG4gXHRcdFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gXHRcdFx0XHR2YXIgb25TY3JpcHRDb21wbGV0ZTtcblxuIFx0XHRcdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuIFx0XHRcdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG4gXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuIFx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzY3JpcHQuc3JjID0ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCk7XG5cbiBcdFx0XHRcdG9uU2NyaXB0Q29tcGxldGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiBcdFx0XHRcdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuIFx0XHRcdFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuIFx0XHRcdFx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG4gXHRcdFx0XHRcdHZhciBjaHVuayA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdFx0XHRcdFx0aWYoY2h1bmsgIT09IDApIHtcbiBcdFx0XHRcdFx0XHRpZihjaHVuaykge1xuIFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcbiBcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG4gXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknKTtcbiBcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcbiBcdFx0XHRcdFx0XHRcdGNodW5rWzFdKGVycm9yKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9O1xuIFx0XHRcdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gXHRcdFx0XHRcdG9uU2NyaXB0Q29tcGxldGUoeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pO1xuIFx0XHRcdFx0fSwgMTIwMDAwKTtcbiBcdFx0XHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGU7XG4gXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gXHR9O1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL3dlYi9cIjtcblxuIFx0Ly8gb24gZXJyb3IgZnVuY3Rpb24gZm9yIGFzeW5jIGxvYWRpbmdcbiBcdF9fd2VicGFja19yZXF1aXJlX18ub2UgPSBmdW5jdGlvbihlcnIpIHsgY29uc29sZS5lcnJvcihlcnIpOyB0aHJvdyBlcnI7IH07XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE2KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCIvKiFcbiAqIFZ1ZS5qcyB2Mi41LjIxXG4gKiAoYykgMjAxNC0yMDE4IEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nLlxuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiB0eXBlb2YgdmFsID09PSAnb2JqZWN0J1xuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gL1teXFx3LiRdLztcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtIHx8IHt9O1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyB0aGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyB0aGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG9ubHkgb25lXG4vLyB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZCBhdCBhbnkgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIHRhcmdldFN0YWNrLnBvcCgpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcm9tKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHJldHVybiBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWxcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIS9eW2EtekEtWl1bXFx3LV0qJC8udGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ2NhbiBvbmx5IGNvbnRhaW4gYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgYW5kIHRoZSBoeXBoZW4sICcgK1xuICAgICAgJ2FuZCBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIuJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmLCB1cGRhdGU6IGRlZiB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuICBcbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHZtKSB7XG4gICAgdmFyIGN1ciA9IHZtO1xuICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICB2YXIgaG9va3MgPSBjdXIuJG9wdGlvbnMuZXJyb3JDYXB0dXJlZDtcbiAgICAgIGlmIChob29rcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBib3RoIG1pY3JvdGFza3MgYW5kIChtYWNybykgdGFza3MuXG4vLyBJbiA8IDIuNCB3ZSB1c2VkIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYnV0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvcyB3aGVyZVxuLy8gbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTApIG9yIGV2ZW4gYmV0d2VlbiBidWJibGluZyBvZiB0aGUgc2FtZVxuLy8gZXZlbnQgKCM2NTY2KS4gSG93ZXZlciwgdXNpbmcgKG1hY3JvKSB0YXNrcyBldmVyeXdoZXJlIGFsc28gaGFzIHN1YnRsZSBwcm9ibGVtc1xuLy8gd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50IChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gSGVyZSB3ZSB1c2UgbWljcm90YXNrIGJ5IGRlZmF1bHQsIGJ1dCBleHBvc2UgYSB3YXkgdG8gZm9yY2UgKG1hY3JvKSB0YXNrIHdoZW5cbi8vIG5lZWRlZCAoZS5nLiBpbiBldmVudCBoYW5kbGVycyBhdHRhY2hlZCBieSB2LW9uKS5cbnZhciBtaWNyb1RpbWVyRnVuYztcbnZhciBtYWNyb1RpbWVyRnVuYztcbnZhciB1c2VNYWNyb1Rhc2sgPSBmYWxzZTtcblxuLy8gRGV0ZXJtaW5lIChtYWNybykgdGFzayBkZWZlciBpbXBsZW1lbnRhdGlvbi5cbi8vIFRlY2huaWNhbGx5IHNldEltbWVkaWF0ZSBzaG91bGQgYmUgdGhlIGlkZWFsIGNob2ljZSwgYnV0IGl0J3Mgb25seSBhdmFpbGFibGVcbi8vIGluIElFLiBUaGUgb25seSBwb2x5ZmlsbCB0aGF0IGNvbnNpc3RlbnRseSBxdWV1ZXMgdGhlIGNhbGxiYWNrIGFmdGVyIGFsbCBET01cbi8vIGV2ZW50cyB0cmlnZ2VyZWQgaW4gdGhlIHNhbWUgbG9vcCBpcyBieSB1c2luZyBNZXNzYWdlQ2hhbm5lbC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKHNldEltbWVkaWF0ZSkpIHtcbiAgbWFjcm9UaW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSBpZiAodHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE1lc3NhZ2VDaGFubmVsKSB8fFxuICAvLyBQaGFudG9tSlNcbiAgTWVzc2FnZUNoYW5uZWwudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTWVzc2FnZUNoYW5uZWxDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gIHZhciBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaENhbGxiYWNrcztcbiAgbWFjcm9UaW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcG9ydC5wb3N0TWVzc2FnZSgxKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIG1hY3JvVGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG4vLyBEZXRlcm1pbmUgbWljcm90YXNrIGRlZmVyIGltcGxlbWVudGF0aW9uLlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICBtaWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIGluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIGZhbGxiYWNrIHRvIG1hY3JvXG4gIG1pY3JvVGltZXJGdW5jID0gbWFjcm9UaW1lckZ1bmM7XG59XG5cbi8qKlxuICogV3JhcCBhIGZ1bmN0aW9uIHNvIHRoYXQgaWYgYW55IGNvZGUgaW5zaWRlIHRyaWdnZXJzIHN0YXRlIGNoYW5nZSxcbiAqIHRoZSBjaGFuZ2VzIGFyZSBxdWV1ZWQgdXNpbmcgYSAobWFjcm8pIHRhc2sgaW5zdGVhZCBvZiBhIG1pY3JvdGFzay5cbiAqL1xuZnVuY3Rpb24gd2l0aE1hY3JvVGFzayAoZm4pIHtcbiAgcmV0dXJuIGZuLl93aXRoVGFzayB8fCAoZm4uX3dpdGhUYXNrID0gZnVuY3Rpb24gKCkge1xuICAgIHVzZU1hY3JvVGFzayA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHVzZU1hY3JvVGFzayA9IGZhbHNlOyAgICBcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgaWYgKHVzZU1hY3JvVGFzaykge1xuICAgICAgbWFjcm9UaW1lckZ1bmMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWljcm9UaW1lckZ1bmMoKTtcbiAgICB9XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbG9uZWRbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzJDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGZucy5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1cik7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvcixcbiAgY29udGV4dFxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LmNvbnRleHRzKSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3RvcnkuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGV4dHMgPSBmYWN0b3J5LmNvbnRleHRzID0gW2NvbnRleHRdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY29udGV4dHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnRleHRzW2ldLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICAgIGNvbnRleHRzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKHR5cGVvZiByZXMudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihyZXMuY29tcG9uZW50KSAmJiB0eXBlb2YgcmVzLmNvbXBvbmVudC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKGZuKSB7XG4gICAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgICB2YXIgY2I7XG4gICAgICB2YXIgaSQxID0gY2JzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpJDEtLSkge1xuICAgICAgICBjYiA9IGNic1tpJDFdO1xuICAgICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICAgIGNicy5zcGxpY2UoaSQxLCAxKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2JzW2ldLmFwcGx5KHZtLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIHZhciBzbG90cyA9IHt9O1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHNsb3RzXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlc1xuKSB7XG4gIHJlcyA9IHJlcyB8fCB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnNbaV0pKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoZm5zW2ldLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbZm5zW2ldLmtleV0gPSBmbnNbaV0uZm47XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW5cbiAgdmFyIGhhc0NoaWxkcmVuID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzIHx8IC8vIGhhcyBuZXcgc2NvcGVkIHNsb3RzXG4gICAgdm0uJHNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAvLyBoYXMgb2xkIHNjb3BlZCBzbG90c1xuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGhhbmRsZXJzW2ldLmNhbGwodm0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDEgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMTsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldCB8fCBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlckludm9rZXIoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCB0aGlzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIHZtLCAoXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdCkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaW5qZWN0LCBrZXkpLmVudW1lcmFibGVcbiAgICAgIH0pXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgaWYgKCEoa2V5IGluIGhhc2gpICYmICEoY2FtZWxpemVkS2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcblxuICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvblsoXCJ1cGRhdGU6XCIgKyBjYW1lbGl6ZWRLZXkpXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgaW5kZXgsXG4gIGlzSW5Gb3Jcbikge1xuICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnMgKHRhcmdldCkge1xuICB0YXJnZXQuX28gPSBtYXJrT25jZTtcbiAgdGFyZ2V0Ll9uID0gdG9OdW1iZXI7XG4gIHRhcmdldC5fcyA9IHRvU3RyaW5nO1xuICB0YXJnZXQuX2wgPSByZW5kZXJMaXN0O1xuICB0YXJnZXQuX3QgPSByZW5kZXJTbG90O1xuICB0YXJnZXQuX3EgPSBsb29zZUVxdWFsO1xuICB0YXJnZXQuX2kgPSBsb29zZUluZGV4T2Y7XG4gIHRhcmdldC5fbSA9IHJlbmRlclN0YXRpYztcbiAgdGFyZ2V0Ll9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgdGFyZ2V0Ll9rID0gY2hlY2tLZXlDb2RlcztcbiAgdGFyZ2V0Ll9iID0gYmluZE9iamVjdFByb3BzO1xuICB0YXJnZXQuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIHRhcmdldC5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gIHRhcmdldC5fdSA9IHJlc29sdmVTY29wZWRTbG90cztcbiAgdGFyZ2V0Ll9nID0gYmluZE9iamVjdExpc3RlbmVycztcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlU2xvdHMoY2hpbGRyZW4sIHBhcmVudCk7IH07XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IGRhdGEuc2NvcGVkU2xvdHMgfHwgZW1wdHlPYmplY3Q7XG4gIH1cblxuICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTtcbiAgICAgIGlmICh2bm9kZSAmJiAhQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgICAgdm5vZGUuZm5Db250ZXh0ID0gcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZub2RlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07XG4gIH1cbn1cblxuaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG4gIEN0b3IsXG4gIHByb3BzRGF0YSxcbiAgZGF0YSxcbiAgY29udGV4dFZtLFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwgZW1wdHlPYmplY3QpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuXG4gIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KFxuICAgIGRhdGEsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY29udGV4dFZtLFxuICAgIEN0b3JcbiAgKTtcblxuICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgdmFyIHZub2RlcyA9IG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlKSB8fCBbXTtcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCAodm5vZGUsIGRhdGEsIGNvbnRleHRWbSwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCkge1xuICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZFxuICAvLyAoZS5nLiBpdCB3YXMgZnJvbSBhIGNhY2hlZCBub3JtYWwgc2xvdCkgdGhlIGZuQ29udGV4dCBjYXVzZXMgbmFtZWQgc2xvdHNcbiAgLy8gdGhhdCBzaG91bGQgbm90IGJlIG1hdGNoZWQgdG8gbWF0Y2guXG4gIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBjbG9uZS5mbkNvbnRleHQgPSBjb250ZXh0Vm07XG4gIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gIH1cbiAgaWYgKGRhdGEuc2xvdCkge1xuICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yLCBjb250ZXh0KTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcbikge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5zdGFsbENvbXBvbmVudEhvb2tzIChkYXRhKSB7XG4gIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTtcbiAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBpZiAoZXhpc3RpbmcgIT09IHRvTWVyZ2UgJiYgIShleGlzdGluZyAmJiBleGlzdGluZy5fbWVyZ2VkKSkge1xuICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAvLyBmbG93IGNvbXBsYWlucyBhYm91dCBleHRyYSBhcmdzIHdoaWNoIGlzIHdoeSB3ZSB1c2UgYW55XG4gICAgZjEoYSwgYik7XG4gICAgZjIoYSwgYik7XG4gIH07XG4gIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgcmV0dXJuIG1lcmdlZFxufVxuXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4vLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1vZGVsIChvcHRpb25zLCBkYXRhKSB7XG4gIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnXG4gIDsoZGF0YS5wcm9wcyB8fCAoZGF0YS5wcm9wcyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07XG4gIHZhciBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGV4aXN0aW5nKVxuICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFja1xuICAgICkge1xuICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyB8fCBlbXB0eU9iamVjdDtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIGV4dGVuZGVkID0gQ3Rvci5leHRlbmRPcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gZGVkdXBlKGxhdGVzdFtrZXldLCBleHRlbmRlZFtrZXldLCBzZWFsZWRba2V5XSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBkZWR1cGUgKGxhdGVzdCwgZXh0ZW5kZWQsIHNlYWxlZCkge1xuICAvLyBjb21wYXJlIGxhdGVzdCBhbmQgc2VhbGVkIHRvIGVuc3VyZSBsaWZlY3ljbGUgaG9va3Mgd29uJ3QgYmUgZHVwbGljYXRlZFxuICAvLyBiZXR3ZWVuIG1lcmdlc1xuICBpZiAoQXJyYXkuaXNBcnJheShsYXRlc3QpKSB7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHNlYWxlZCA9IEFycmF5LmlzQXJyYXkoc2VhbGVkKSA/IHNlYWxlZCA6IFtzZWFsZWRdO1xuICAgIGV4dGVuZGVkID0gQXJyYXkuaXNBcnJheShleHRlbmRlZCkgPyBleHRlbmRlZCA6IFtleHRlbmRlZF07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXRlc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIHB1c2ggb3JpZ2luYWwgb3B0aW9ucyBhbmQgbm90IHNlYWxlZCBvcHRpb25zIHRvIGV4Y2x1ZGUgZHVwbGljYXRlZCBvcHRpb25zXG4gICAgICBpZiAoZXh0ZW5kZWQuaW5kZXhPZihsYXRlc3RbaV0pID49IDAgfHwgc2VhbGVkLmluZGV4T2YobGF0ZXN0W2ldKSA8IDApIHtcbiAgICAgICAgcmVzLnB1c2gobGF0ZXN0W2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsYXRlc3RcbiAgfVxufVxuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBTdWIgPSBmdW5jdGlvbiBWdWVDb21wb25lbnQgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICApO1xuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xuICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgIGluaXRQcm9wcyQxKFN1Yik7XG4gICAgfVxuICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTtcbiAgICB9XG5cbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gIHZhciBwcm9wcyA9IENvbXAub3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzIChWdWUpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICovXG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZSAoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikge1xuICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgdmFyIGtleXMgPSBrZWVwQWxpdmVJbnN0YW5jZS5rZXlzO1xuICB2YXIgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlO1xuICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICB2YXIgY2FjaGVkTm9kZSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZE5vZGUpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleSwga2V5cywgX3Zub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5IChcbiAgY2FjaGUsXG4gIGtleSxcbiAga2V5cyxcbiAgY3VycmVudFxuKSB7XG4gIHZhciBjYWNoZWQkJDEgPSBjYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkJCQxICYmICghY3VycmVudCB8fCBjYWNoZWQkJDEudGFnICE9PSBjdXJyZW50LnRhZykpIHtcbiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH0sXG5cbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcy5jYWNoZSwga2V5LCB0aGlzLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuXG4gIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cbiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cbiAgVnVlLnV0aWwgPSB7XG4gICAgd2Fybjogd2FybixcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDFcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0pO1xuXG4gIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG4gIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlO1xuXG4gIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgaW5pdFVzZShWdWUpO1xuICBpbml0TWl4aW4kMShWdWUpO1xuICBpbml0RXh0ZW5kKFZ1ZSk7XG4gIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpO1xufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHRcbiAgfVxufSk7XG5cbi8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xuICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbn0pO1xuXG5WdWUudmVyc2lvbiA9ICcyLjUuMjEnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0ZWRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoc2NvcGVJZCwgJycpO1xufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgdGFnTmFtZTogdGFnTmFtZSxcbiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICghaXNEZWYoa2V5KSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gc2FtZVZub2RlIChhLCBiKSB7XG4gIHJldHVybiAoXG4gICAgYS5rZXkgPT09IGIua2V5ICYmIChcbiAgICAgIChcbiAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXG4gICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICkgfHwgKFxuICAgICAgICBpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmXG4gICAgICAgIGEuYXN5bmNGYWN0b3J5ID09PSBiLmFzeW5jRmFjdG9yeSAmJlxuICAgICAgICBpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG5mdW5jdGlvbiBzYW1lSW5wdXRUeXBlIChhLCBiKSB7XG4gIGlmIChhLnRhZyAhPT0gJ2lucHV0JykgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpO1xuICB2YXIgdHlwZUEgPSBpc0RlZihpID0gYS5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICB2YXIgdHlwZUIgPSBpc0RlZihpID0gYi5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICByZXR1cm4gdHlwZUEgPT09IHR5cGVCIHx8IGlzVGV4dElucHV0VHlwZSh0eXBlQSkgJiYgaXNUZXh0SW5wdXRUeXBlKHR5cGVCKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeCAoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgdmFyIGksIGtleTtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcbiAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH1cbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcbiAgdmFyIGksIGo7XG4gIHZhciBjYnMgPSB7fTtcblxuICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcztcbiAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgY2JzW2hvb2tzW2ldXSA9IFtdO1xuICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7XG4gICAgICAgIGNic1tob29rc1tpXV0ucHVzaChtb2R1bGVzW2pdW2hvb2tzW2ldXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHlOb2RlQXQgKGVsbSkge1xuICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IgKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHtcbiAgICBmdW5jdGlvbiByZW1vdmUkJDEgKCkge1xuICAgICAgaWYgKC0tcmVtb3ZlJCQxLmxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICByZW1vdmVOb2RlKGNoaWxkRWxtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlJCQxLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICByZXR1cm4gcmVtb3ZlJCQxXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVOb2RlIChlbCkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQkJDEgKHZub2RlLCBpblZQcmUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIWluVlByZSAmJlxuICAgICAgIXZub2RlLm5zICYmXG4gICAgICAhKFxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZSkge1xuICAgICAgICAgIHJldHVybiBpc1JlZ0V4cChpZ25vcmUpXG4gICAgICAgICAgICA/IGlnbm9yZS50ZXN0KHZub2RlLnRhZylcbiAgICAgICAgICAgIDogaWdub3JlID09PSB2bm9kZS50YWdcbiAgICAgICAgfSlcbiAgICAgICkgJiZcbiAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHZub2RlLnRhZylcbiAgICApXG4gIH1cblxuICB2YXIgY3JlYXRpbmdFbG1JblZQcmUgPSAwO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsbSAoXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIHBhcmVudEVsbSxcbiAgICByZWZFbG0sXG4gICAgbmVzdGVkLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXhcbiAgKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIFRoaXMgdm5vZGUgd2FzIHVzZWQgaW4gYSBwcmV2aW91cyByZW5kZXIhXG4gICAgICAvLyBub3cgaXQncyB1c2VkIGFzIGEgbmV3IG5vZGUsIG92ZXJ3cml0aW5nIGl0cyBlbG0gd291bGQgY2F1c2VcbiAgICAgIC8vIHBvdGVudGlhbCBwYXRjaCBlcnJvcnMgZG93biB0aGUgcm9hZCB3aGVuIGl0J3MgdXNlZCBhcyBhbiBpbnNlcnRpb25cbiAgICAgIC8vIHJlZmVyZW5jZSBub2RlLiBJbnN0ZWFkLCB3ZSBjbG9uZSB0aGUgbm9kZSBvbi1kZW1hbmQgYmVmb3JlIGNyZWF0aW5nXG4gICAgICAvLyBhc3NvY2lhdGVkIERPTSBlbGVtZW50IGZvciBpdC5cbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkpIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7XG4gICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHtcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICAgIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCA9IG51bGw7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYkJDEpIHtcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgaWYgKGlzRGVmKHJlZiQkMSkpIHtcbiAgICAgICAgaWYgKG5vZGVPcHMucGFyZW50Tm9kZShyZWYkJDEpID09PSBwYXJlbnQpIHtcbiAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmJCQxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHBhcmVudEVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tEdXBsaWNhdGVLZXlzIChjaGlsZHJlbikge1xuICAgIHZhciBzZWVuS2V5cyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2bm9kZSA9IGNoaWxkcmVuW2ldO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleTtcbiAgICAgIGlmIChpc0RlZihrZXkpKSB7XG4gICAgICAgIGlmIChzZWVuS2V5c1trZXldKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIChcIkR1cGxpY2F0ZSBrZXlzIGRldGVjdGVkOiAnXCIgKyBrZXkgKyBcIicuIFRoaXMgbWF5IGNhdXNlIGFuIHVwZGF0ZSBlcnJvci5cIiksXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWVuS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRJZHhJbk9sZCAobm9kZSwgb2xkQ2gsIHN0YXJ0LCBlbmQpIHtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdmFyIGMgPSBvbGRDaFtpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiBzYW1lVm5vZGUobm9kZSwgYykpIHsgcmV0dXJuIGkgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdGNoVm5vZGUgKFxuICAgIG9sZFZub2RlLFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4LFxuICAgIHJlbW92ZU9ubHlcbiAgKSB7XG4gICAgaWYgKG9sZFZub2RlID09PSB2bm9kZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIGNsb25lIHJldXNlZCB2bm9kZVxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTsgfVxuICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7XG4gICAgICAgIHJlbW92ZVZub2RlcyhlbG0sIG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbiAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQocXVldWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTtcbiAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbiAgLy8gTm90ZTogc3R5bGUgaXMgZXhjbHVkZWQgYmVjYXVzZSBpdCByZWxpZXMgb24gaW5pdGlhbCBjbG9uZSBmb3IgZnV0dXJlXG4gIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTtcbiAgICB2bm9kZS5lbG0gPSBlbG07XG5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkgJiYgaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5KSkge1xuICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIGFzc2VydCBub2RlIG1hdGNoXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2VydmVyIGlubmVySFRNTDogJywgaSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjbGllbnQgaW5uZXJIVE1MOiAnLCBlbG0uaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaXRlcmF0ZSBhbmQgY29tcGFyZSBjaGlsZHJlbiBsaXN0c1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcbiAgICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICB2YXIgZnVsbEludm9rZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAvLyBlbnN1cmUgY29sbGVjdGluZyBkZXBzIGZvciBkZWVwIGNsYXNzIGJpbmRpbmdzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgJiZcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbnVsbCwgbnVsbCwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoU1NSX0FUVFIpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoU1NSX0FUVFIpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XG4gICAgICAgICAgICBpZiAoaHlkcmF0ZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkpIHtcbiAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpIHx8IHZhbHVlID09PSAnZmFsc2UnID8gJ2ZhbHNlJyA6ICd0cnVlJyk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICAoZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyB8fCBlbC50YWdOYW1lID09PSAnSU5QVVQnKSAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICBoYW5kbGVyID0gd2l0aE1hY3JvVGFzayhoYW5kbGVyKTtcbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBldmVudCxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBldmVudCxcbiAgICBoYW5kbGVyLl93aXRoVGFzayB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKGlzVW5kZWYocHJvcHNba2V5XSkpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlXG4gICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxuICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubGF6eSkge1xuICAgICAgLy8gaW5wdXRzIHdpdGggbGF6eSBzaG91bGQgb25seSBiZSB1cGRhdGVkIHdoZW4gbm90IGluIGZvY3VzXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duIChpLmUuIGFjdGluZ1xuLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdyAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbiAodmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gXCIgK1xuICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgTmFOIC0gXCIgK1xuICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKVxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICovXG5mdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoIChmbikge1xuICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKVxuICAgICAgICA/IGludm9rZXJGbnNbMF1cbiAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlJCQxICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59IDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl07XG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAvLyAjNjkwM1xuICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHtcbiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBwcmV2T3B0aW9ucyA9IGVsLl92T3B0aW9ucztcbiAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKTsgfSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTtcbiAgICB0aGlzLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgICB0aGlzJDEuX19wYXRjaF9fKFxuICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICB0aGlzJDEua2VwdCxcbiAgICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICk7XG4gICAgICB0aGlzJDEuX3Zub2RlID0gdGhpcyQxLmtlcHQ7XG4gICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgICAgaXNDaHJvbWVcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuY29uc3QgZmlsZXMgPSByZXF1aXJlLmNvbnRleHQoJy4nLCBmYWxzZSwgL1xcLmpzJC8pXHJcbmNvbnN0IG1vZHVsZXMgPSB7fVxyXG5cclxuZmlsZXMua2V5cygpLmZvckVhY2goa2V5ID0+IHtcclxuXHRpZiAoa2V5ID09PSAnLi9pbmRleC5qcycpIHtcclxuXHRcdHJldHVyblxyXG5cdH1cclxuXHJcblx0bW9kdWxlc1trZXkucmVwbGFjZSgvKFxcLlxcL3xcXC5qcykvZywgJycpXSA9IGZpbGVzKGtleSkuZGVmYXVsdFxyXG59KVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbW9kdWxlc1xyXG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgYXR0cnM6IHsgaWQ6IFwiYXBwXCIgfSB9LCBbX2MoXCJSb3V0ZXJWaWV3XCIpXSwgMSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcblx0PGRpdiBpZD1cImFwcFwiPlxyXG5cdFx0PFJvdXRlclZpZXcgLz5cclxuXHQ8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbmNvbnN0IFNUT1JFX05BTUUgPSAndXNlcidcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRiZWZvcmVDcmVhdGUoKSB7XHJcblx0XHRjb25zdCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU1RPUkVfTkFNRSlcclxuXHJcblx0XHRpZiAoIWRhdGEpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuJHJvdXRlci5wdXNoKHsgbmFtZTogJ2F1dGgnIH0pXHJcblx0XHR9XHJcblxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Y29uc3QgdXNlciA9IEpTT04ucGFyc2UoZGF0YSlcclxuXHJcblx0XHRcdHRoaXMuJHN0b3JlLmNvbW1pdCgnU0VUX1VTRVInLCB1c2VyKVxyXG5cdFx0XHQvLyBUT0RPIENvbm5lY3QgdG8gd2Vic29ja2V0XHJcblxyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShTVE9SRV9OQU1FKVxyXG5cdFx0XHR0aGlzLiRyb3V0ZXIucHVzaCh7IG5hbWU6ICdhdXRoJyB9KVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG48L3NjcmlwdD5cclxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdiYTViZDkwJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXGRldlxcXFx0b2RvXFxcXHdlYlxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnN2JhNWJkOTAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnN2JhNWJkOTAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2JhNWJkOTAmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignN2JhNWJkOTAnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9BcHAudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcy9pc3N1ZXMvMjAxKVxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gMjA0IDogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiAnQG1lZGlhICcgKyBpdGVtWzJdICsgJ3snICsgY29udGVudCArICd9JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBtb2R1bGVzW2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSAnKCcgKyBpdGVtWzJdICsgJykgYW5kICgnICsgbWVkaWFRdWVyeSArICcpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJztcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcbiAgcmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgcGFyZW50KSB7XG4gIGlmIChwYXJlbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCwgcGFyZW50KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUsIHRhcmdldCk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0aWYob3B0aW9ucy5hdHRycy5ub25jZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcblx0XHRpZiAobm9uY2UpIHtcblx0XHRcdG9wdGlvbnMuYXR0cnMubm9uY2UgPSBub25jZTtcblx0XHR9XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXROb25jZSgpIHtcblx0aWYgKHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiBfX3dlYnBhY2tfbm9uY2VfXztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSB0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbidcblx0XHQgPyBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSBcblx0XHQgOiBvcHRpb25zLnRyYW5zZm9ybS5kZWZhdWx0KG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwidmFyIG1hcCA9IHtcblx0XCIuL0FwcC52dWVcIjogW1xuXHRcdDVcblx0XSxcblx0XCIuL2xheW91dHMvRGVmYXVsdC52dWVcIjogW1xuXHRcdDUzLFxuXHRcdDFcblx0XSxcblx0XCIuL2xheW91dHMvTm90QXV0aG9yaXplZC52dWVcIjogW1xuXHRcdDU0LFxuXHRcdDJcblx0XSxcblx0XCIuL3BhZ2VzL0F1dGgudnVlXCI6IFtcblx0XHQ1Nixcblx0XHQzXG5cdF0sXG5cdFwiLi9wYWdlcy9EYXNoYm9hcmQudnVlXCI6IFtcblx0XHQ1NSxcblx0XHQ0XG5cdF1cbn07XG5mdW5jdGlvbiB3ZWJwYWNrQXN5bmNDb250ZXh0KHJlcSkge1xuXHR2YXIgaWRzID0gbWFwW3JlcV07XG5cdGlmKCFpZHMpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHRcdHRocm93IGU7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIFByb21pc2UuYWxsKGlkcy5zbGljZSgxKS5tYXAoX193ZWJwYWNrX3JlcXVpcmVfXy5lKSkudGhlbihmdW5jdGlvbigpIHtcblx0XHR2YXIgaWQgPSBpZHNbMF07XG5cdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xuXHR9KTtcbn1cbndlYnBhY2tBc3luY0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tBc3luY0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQXN5bmNDb250ZXh0LmlkID0gMTc7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tBc3luY0NvbnRleHQ7IiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vaW5kZXguanNcIjogNCxcblx0XCIuL3Byb2ZpbGUuanNcIjogMjFcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIHsgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIGlkO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDIwOyIsIid1c2Ugc3RyaWN0J1xyXG5cclxuY29uc3Qgc3RhdGUgPSB7XHJcblx0dXNlcjogbnVsbFxyXG59XHJcblxyXG5jb25zdCBtdXRhdGlvbnMgPSB7XHJcblx0U0VUX1VTRVIoc3RhdGUsIG9iaikge1xyXG5cdFx0c3RhdGUudXNlciA9IG9ialxyXG5cdH0sXHJcblx0Q0xFQVJfVVNFUihzdGF0ZSkge1xyXG5cdFx0c3RhdGUudXNlciA9IG51bGxcclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IGFjdGlvbnMgPSB7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0c3RhdGUsIG11dGF0aW9ucywgYWN0aW9uc1xyXG59XHJcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKGRlZmF1bHRzLCB7bWV0aG9kOiAnZ2V0J30sIHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0J1xyXG5cclxuLyoqIEBzZWUgaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9ndWlkZXMvZGVwZW5kZW5jeS1tYW5hZ2VtZW50LyAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuY29uc3QgZmlsZXMgPSByZXF1aXJlLmNvbnRleHQoJy4vJywgdHJ1ZSwgL1xcLnNjc3MkLylcclxuXHJcbi8vIEV4ZWN1dGUgZmlsZXNcclxuZmlsZXMua2V5cygpLmZvckVhY2goa2V5ID0+IGZpbGVzKGtleSkpXHJcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9fX2ljb25zLnNjc3NcIjogNDIsXG5cdFwiLi9nbG9iYWwuc2Nzc1wiOiA1MFxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgeyAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gaWQ7XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gNDE7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vX19pY29ucy5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL19faWNvbnMuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vX19pY29ucy5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gSW1wb3J0c1xudmFyIHVybEVzY2FwZSA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvdXJsLWVzY2FwZS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzBfX18gPSB1cmxFc2NhcGUocmVxdWlyZShcIm1hdGVyaWFsLWRlc2lnbi1pY29ucy9pY29uZm9udC9NYXRlcmlhbEljb25zLVJlZ3VsYXIuZW90XCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzFfX18gPSB1cmxFc2NhcGUocmVxdWlyZShcIm1hdGVyaWFsLWRlc2lnbi1pY29ucy9pY29uZm9udC9NYXRlcmlhbEljb25zLVJlZ3VsYXIud29mZjJcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMl9fXyA9IHVybEVzY2FwZShyZXF1aXJlKFwibWF0ZXJpYWwtZGVzaWduLWljb25zL2ljb25mb250L01hdGVyaWFsSWNvbnMtUmVndWxhci53b2ZmXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzNfX18gPSB1cmxFc2NhcGUocmVxdWlyZShcIm1hdGVyaWFsLWRlc2lnbi1pY29ucy9pY29uZm9udC9NYXRlcmlhbEljb25zLVJlZ3VsYXIudHRmXCIpKTtcblxuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnTWF0ZXJpYWwgSWNvbnMnO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18wX19fICsgXCIpO1xcbiAgLyogRm9yIElFNi04ICovXFxuICBzcmM6IGxvY2FsKFxcXCJNYXRlcmlhbCBJY29uc1xcXCIpLCBsb2NhbChcXFwiTWF0ZXJpYWxJY29ucy1SZWd1bGFyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMV9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMl9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18zX19fICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKTsgfVxcblxcbi5tYXRlcmlhbC1pY29ucyB7XFxuICBmb250LWZhbWlseTogJ01hdGVyaWFsIEljb25zJztcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXNpemU6IDI0cHg7XFxuICAvKiBQcmVmZXJyZWQgaWNvbiBzaXplICovXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHdvcmQtd3JhcDogbm9ybWFsO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIGRpcmVjdGlvbjogbHRyO1xcbiAgLyogU3VwcG9ydCBmb3IgYWxsIFdlYktpdCBicm93c2Vycy4gKi9cXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLyogU3VwcG9ydCBmb3IgU2FmYXJpIGFuZCBDaHJvbWUuICovXFxuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xcbiAgLyogU3VwcG9ydCBmb3IgRmlyZWZveC4gKi9cXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxuICAvKiBTdXBwb3J0IGZvciBJRS4gKi9cXG4gIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogJ2xpZ2EnOyB9XFxuXCIsIFwiXCJdKTtcblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXNjYXBlKHVybCkge1xuICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gJ1wiJyArIHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpICsgJ1wiJztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImU3OWJmZDg4NTM3ZGVmNDc2OTEzZjNlZDUyZjRmNGIzLmVvdFwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjU3MGViODM4NTlkYzIzZGQwZWVjNDIzYTQ5ZTE0N2ZlLndvZmYyXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMDEyY2Y2YTEwMTI5ZTIyNzVkNzlkNmFkYWM3ZjNiMDIud29mZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImEzN2IwYzAxYzBiYWYxODg4Y2E4MTJjYzA1MDhmNmUyLnR0ZlwiOyIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZ2xvYmFsLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZ2xvYmFsLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2dsb2JhbC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIl0pO1xuXG4iLCIvKiFcbiAgKiB2dWUtcm91dGVyIHYzLjAuMlxuICAqIChjKSAyMDE4IEV2YW4gWW91XG4gICogQGxpY2Vuc2UgTUlUXG4gICovXG4vKiAgKi9cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZS1yb3V0ZXJdIFwiICsgbWVzc2FnZSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybiAoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25kaXRpb24pIHtcbiAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKChcIlt2dWUtcm91dGVyXSBcIiArIG1lc3NhZ2UpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0Vycm9yIChlcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlcnIpLmluZGV4T2YoJ0Vycm9yJykgPiAtMVxufVxuXG5mdW5jdGlvbiBleHRlbmQgKGEsIGIpIHtcbiAgZm9yICh2YXIga2V5IGluIGIpIHtcbiAgICBhW2tleV0gPSBiW2tleV07XG4gIH1cbiAgcmV0dXJuIGFcbn1cblxudmFyIFZpZXcgPSB7XG4gIG5hbWU6ICdSb3V0ZXJWaWV3JyxcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGVmYXVsdCdcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChfLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSByZWYucHJvcHM7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50O1xuICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG5cbiAgICAvLyB1c2VkIGJ5IGRldnRvb2xzIHRvIGRpc3BsYXkgYSByb3V0ZXItdmlldyBiYWRnZVxuICAgIGRhdGEucm91dGVyVmlldyA9IHRydWU7XG5cbiAgICAvLyBkaXJlY3RseSB1c2UgcGFyZW50IGNvbnRleHQncyBjcmVhdGVFbGVtZW50KCkgZnVuY3Rpb25cbiAgICAvLyBzbyB0aGF0IGNvbXBvbmVudHMgcmVuZGVyZWQgYnkgcm91dGVyLXZpZXcgY2FuIHJlc29sdmUgbmFtZWQgc2xvdHNcbiAgICB2YXIgaCA9IHBhcmVudC4kY3JlYXRlRWxlbWVudDtcbiAgICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gICAgdmFyIHJvdXRlID0gcGFyZW50LiRyb3V0ZTtcbiAgICB2YXIgY2FjaGUgPSBwYXJlbnQuX3JvdXRlclZpZXdDYWNoZSB8fCAocGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgPSB7fSk7XG5cbiAgICAvLyBkZXRlcm1pbmUgY3VycmVudCB2aWV3IGRlcHRoLCBhbHNvIGNoZWNrIHRvIHNlZSBpZiB0aGUgdHJlZVxuICAgIC8vIGhhcyBiZWVuIHRvZ2dsZWQgaW5hY3RpdmUgYnV0IGtlcHQtYWxpdmUuXG4gICAgdmFyIGRlcHRoID0gMDtcbiAgICB2YXIgaW5hY3RpdmUgPSBmYWxzZTtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5fcm91dGVyUm9vdCAhPT0gcGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LiR2bm9kZSAmJiBwYXJlbnQuJHZub2RlLmRhdGEucm91dGVyVmlldykge1xuICAgICAgICBkZXB0aCsrO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmVudC5faW5hY3RpdmUpIHtcbiAgICAgICAgaW5hY3RpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIGRhdGEucm91dGVyVmlld0RlcHRoID0gZGVwdGg7XG5cbiAgICAvLyByZW5kZXIgcHJldmlvdXMgdmlldyBpZiB0aGUgdHJlZSBpcyBpbmFjdGl2ZSBhbmQga2VwdC1hbGl2ZVxuICAgIGlmIChpbmFjdGl2ZSkge1xuICAgICAgcmV0dXJuIGgoY2FjaGVbbmFtZV0sIGRhdGEsIGNoaWxkcmVuKVxuICAgIH1cblxuICAgIHZhciBtYXRjaGVkID0gcm91dGUubWF0Y2hlZFtkZXB0aF07XG4gICAgLy8gcmVuZGVyIGVtcHR5IG5vZGUgaWYgbm8gbWF0Y2hlZCByb3V0ZVxuICAgIGlmICghbWF0Y2hlZCkge1xuICAgICAgY2FjaGVbbmFtZV0gPSBudWxsO1xuICAgICAgcmV0dXJuIGgoKVxuICAgIH1cblxuICAgIHZhciBjb21wb25lbnQgPSBjYWNoZVtuYW1lXSA9IG1hdGNoZWQuY29tcG9uZW50c1tuYW1lXTtcblxuICAgIC8vIGF0dGFjaCBpbnN0YW5jZSByZWdpc3RyYXRpb24gaG9va1xuICAgIC8vIHRoaXMgd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGluc3RhbmNlJ3MgaW5qZWN0ZWQgbGlmZWN5Y2xlIGhvb2tzXG4gICAgZGF0YS5yZWdpc3RlclJvdXRlSW5zdGFuY2UgPSBmdW5jdGlvbiAodm0sIHZhbCkge1xuICAgICAgLy8gdmFsIGNvdWxkIGJlIHVuZGVmaW5lZCBmb3IgdW5yZWdpc3RyYXRpb25cbiAgICAgIHZhciBjdXJyZW50ID0gbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV07XG4gICAgICBpZiAoXG4gICAgICAgICh2YWwgJiYgY3VycmVudCAhPT0gdm0pIHx8XG4gICAgICAgICghdmFsICYmIGN1cnJlbnQgPT09IHZtKVxuICAgICAgKSB7XG4gICAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdmFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFsc28gcmVnaXN0ZXIgaW5zdGFuY2UgaW4gcHJlcGF0Y2ggaG9va1xuICAgIC8vIGluIGNhc2UgdGhlIHNhbWUgY29tcG9uZW50IGluc3RhbmNlIGlzIHJldXNlZCBhY3Jvc3MgZGlmZmVyZW50IHJvdXRlc1xuICAgIDsoZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSkpLnByZXBhdGNoID0gZnVuY3Rpb24gKF8sIHZub2RlKSB7XG4gICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIH07XG5cbiAgICAvLyByZXNvbHZlIHByb3BzXG4gICAgdmFyIHByb3BzVG9QYXNzID0gZGF0YS5wcm9wcyA9IHJlc29sdmVQcm9wcyhyb3V0ZSwgbWF0Y2hlZC5wcm9wcyAmJiBtYXRjaGVkLnByb3BzW25hbWVdKTtcbiAgICBpZiAocHJvcHNUb1Bhc3MpIHtcbiAgICAgIC8vIGNsb25lIHRvIHByZXZlbnQgbXV0YXRpb25cbiAgICAgIHByb3BzVG9QYXNzID0gZGF0YS5wcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHNUb1Bhc3MpO1xuICAgICAgLy8gcGFzcyBub24tZGVjbGFyZWQgcHJvcHMgYXMgYXR0cnNcbiAgICAgIHZhciBhdHRycyA9IGRhdGEuYXR0cnMgPSBkYXRhLmF0dHJzIHx8IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzVG9QYXNzKSB7XG4gICAgICAgIGlmICghY29tcG9uZW50LnByb3BzIHx8ICEoa2V5IGluIGNvbXBvbmVudC5wcm9wcykpIHtcbiAgICAgICAgICBhdHRyc1trZXldID0gcHJvcHNUb1Bhc3Nba2V5XTtcbiAgICAgICAgICBkZWxldGUgcHJvcHNUb1Bhc3Nba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoKGNvbXBvbmVudCwgZGF0YSwgY2hpbGRyZW4pXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVByb3BzIChyb3V0ZSwgY29uZmlnKSB7XG4gIHN3aXRjaCAodHlwZW9mIGNvbmZpZykge1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGNvbmZpZ1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiBjb25maWcocm91dGUpXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gY29uZmlnID8gcm91dGUucGFyYW1zIDogdW5kZWZpbmVkXG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJwcm9wcyBpbiBcXFwiXCIgKyAocm91dGUucGF0aCkgKyBcIlxcXCIgaXMgYSBcIiArICh0eXBlb2YgY29uZmlnKSArIFwiLCBcIiArXG4gICAgICAgICAgXCJleHBlY3RpbmcgYW4gb2JqZWN0LCBmdW5jdGlvbiBvciBib29sZWFuLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBlbmNvZGVSZXNlcnZlUkUgPSAvWyEnKCkqXS9nO1xudmFyIGVuY29kZVJlc2VydmVSZXBsYWNlciA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpOyB9O1xudmFyIGNvbW1hUkUgPSAvJTJDL2c7XG5cbi8vIGZpeGVkIGVuY29kZVVSSUNvbXBvbmVudCB3aGljaCBpcyBtb3JlIGNvbmZvcm1hbnQgdG8gUkZDMzk4Njpcbi8vIC0gZXNjYXBlcyBbIScoKSpdXG4vLyAtIHByZXNlcnZlIGNvbW1hc1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpXG4gIC5yZXBsYWNlKGVuY29kZVJlc2VydmVSRSwgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyKVxuICAucmVwbGFjZShjb21tYVJFLCAnLCcpOyB9O1xuXG52YXIgZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xuXG5mdW5jdGlvbiByZXNvbHZlUXVlcnkgKFxuICBxdWVyeSxcbiAgZXh0cmFRdWVyeSxcbiAgX3BhcnNlUXVlcnlcbikge1xuICBpZiAoIGV4dHJhUXVlcnkgPT09IHZvaWQgMCApIGV4dHJhUXVlcnkgPSB7fTtcblxuICB2YXIgcGFyc2UgPSBfcGFyc2VRdWVyeSB8fCBwYXJzZVF1ZXJ5O1xuICB2YXIgcGFyc2VkUXVlcnk7XG4gIHRyeSB7XG4gICAgcGFyc2VkUXVlcnkgPSBwYXJzZShxdWVyeSB8fCAnJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oZmFsc2UsIGUubWVzc2FnZSk7XG4gICAgcGFyc2VkUXVlcnkgPSB7fTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gZXh0cmFRdWVyeSkge1xuICAgIHBhcnNlZFF1ZXJ5W2tleV0gPSBleHRyYVF1ZXJ5W2tleV07XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFF1ZXJ5XG59XG5cbmZ1bmN0aW9uIHBhcnNlUXVlcnkgKHF1ZXJ5KSB7XG4gIHZhciByZXMgPSB7fTtcblxuICBxdWVyeSA9IHF1ZXJ5LnRyaW0oKS5yZXBsYWNlKC9eKFxcP3wjfCYpLywgJycpO1xuXG4gIGlmICghcXVlcnkpIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBxdWVyeS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gZGVjb2RlKHBhcnRzLnNoaWZ0KCkpO1xuICAgIHZhciB2YWwgPSBwYXJ0cy5sZW5ndGggPiAwXG4gICAgICA/IGRlY29kZShwYXJ0cy5qb2luKCc9JykpXG4gICAgICA6IG51bGw7XG5cbiAgICBpZiAocmVzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzW2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc1trZXldKSkge1xuICAgICAgcmVzW2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNba2V5XSA9IFtyZXNba2V5XSwgdmFsXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkgKG9iaikge1xuICB2YXIgcmVzID0gb2JqID8gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWwgPSBvYmpba2V5XTtcblxuICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuXG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGVuY29kZShrZXkpXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFsLmZvckVhY2goZnVuY3Rpb24gKHZhbDIpIHtcbiAgICAgICAgaWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwyID09PSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlKGtleSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbDIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKVxuICAgIH1cblxuICAgIHJldHVybiBlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2YWwpXG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5sZW5ndGggPiAwOyB9KS5qb2luKCcmJykgOiBudWxsO1xuICByZXR1cm4gcmVzID8gKFwiP1wiICsgcmVzKSA6ICcnXG59XG5cbi8qICAqL1xuXG52YXIgdHJhaWxpbmdTbGFzaFJFID0gL1xcLz8kLztcblxuZnVuY3Rpb24gY3JlYXRlUm91dGUgKFxuICByZWNvcmQsXG4gIGxvY2F0aW9uLFxuICByZWRpcmVjdGVkRnJvbSxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHN0cmluZ2lmeVF1ZXJ5JCQxID0gcm91dGVyICYmIHJvdXRlci5vcHRpb25zLnN0cmluZ2lmeVF1ZXJ5O1xuXG4gIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5IHx8IHt9O1xuICB0cnkge1xuICAgIHF1ZXJ5ID0gY2xvbmUocXVlcnkpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByb3V0ZSA9IHtcbiAgICBuYW1lOiBsb2NhdGlvbi5uYW1lIHx8IChyZWNvcmQgJiYgcmVjb3JkLm5hbWUpLFxuICAgIG1ldGE6IChyZWNvcmQgJiYgcmVjb3JkLm1ldGEpIHx8IHt9LFxuICAgIHBhdGg6IGxvY2F0aW9uLnBhdGggfHwgJy8nLFxuICAgIGhhc2g6IGxvY2F0aW9uLmhhc2ggfHwgJycsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIHBhcmFtczogbG9jYXRpb24ucGFyYW1zIHx8IHt9LFxuICAgIGZ1bGxQYXRoOiBnZXRGdWxsUGF0aChsb2NhdGlvbiwgc3RyaW5naWZ5UXVlcnkkJDEpLFxuICAgIG1hdGNoZWQ6IHJlY29yZCA/IGZvcm1hdE1hdGNoKHJlY29yZCkgOiBbXVxuICB9O1xuICBpZiAocmVkaXJlY3RlZEZyb20pIHtcbiAgICByb3V0ZS5yZWRpcmVjdGVkRnJvbSA9IGdldEZ1bGxQYXRoKHJlZGlyZWN0ZWRGcm9tLCBzdHJpbmdpZnlRdWVyeSQkMSk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUocm91dGUpXG59XG5cbmZ1bmN0aW9uIGNsb25lICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGNsb25lKVxuICB9IGVsc2UgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICByZXNba2V5XSA9IGNsb25lKHZhbHVlW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbn1cblxuLy8gdGhlIHN0YXJ0aW5nIHJvdXRlIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5pdGlhbCBzdGF0ZVxudmFyIFNUQVJUID0gY3JlYXRlUm91dGUobnVsbCwge1xuICBwYXRoOiAnLydcbn0pO1xuXG5mdW5jdGlvbiBmb3JtYXRNYXRjaCAocmVjb3JkKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgd2hpbGUgKHJlY29yZCkge1xuICAgIHJlcy51bnNoaWZ0KHJlY29yZCk7XG4gICAgcmVjb3JkID0gcmVjb3JkLnBhcmVudDtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldEZ1bGxQYXRoIChcbiAgcmVmLFxuICBfc3RyaW5naWZ5UXVlcnlcbikge1xuICB2YXIgcGF0aCA9IHJlZi5wYXRoO1xuICB2YXIgcXVlcnkgPSByZWYucXVlcnk7IGlmICggcXVlcnkgPT09IHZvaWQgMCApIHF1ZXJ5ID0ge307XG4gIHZhciBoYXNoID0gcmVmLmhhc2g7IGlmICggaGFzaCA9PT0gdm9pZCAwICkgaGFzaCA9ICcnO1xuXG4gIHZhciBzdHJpbmdpZnkgPSBfc3RyaW5naWZ5UXVlcnkgfHwgc3RyaW5naWZ5UXVlcnk7XG4gIHJldHVybiAocGF0aCB8fCAnLycpICsgc3RyaW5naWZ5KHF1ZXJ5KSArIGhhc2hcbn1cblxuZnVuY3Rpb24gaXNTYW1lUm91dGUgKGEsIGIpIHtcbiAgaWYgKGIgPT09IFNUQVJUKSB7XG4gICAgcmV0dXJuIGEgPT09IGJcbiAgfSBlbHNlIGlmICghYikge1xuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKGEucGF0aCAmJiBiLnBhdGgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnJykgPT09IGIucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJycpICYmXG4gICAgICBhLmhhc2ggPT09IGIuaGFzaCAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnF1ZXJ5LCBiLnF1ZXJ5KVxuICAgIClcbiAgfSBlbHNlIGlmIChhLm5hbWUgJiYgYi5uYW1lKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGEubmFtZSA9PT0gYi5uYW1lICYmXG4gICAgICBhLmhhc2ggPT09IGIuaGFzaCAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnF1ZXJ5LCBiLnF1ZXJ5KSAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnBhcmFtcywgYi5wYXJhbXMpXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RXF1YWwgKGEsIGIpIHtcbiAgaWYgKCBhID09PSB2b2lkIDAgKSBhID0ge307XG4gIGlmICggYiA9PT0gdm9pZCAwICkgYiA9IHt9O1xuXG4gIC8vIGhhbmRsZSBudWxsIHZhbHVlICMxNTY2XG4gIGlmICghYSB8fCAhYikgeyByZXR1cm4gYSA9PT0gYiB9XG4gIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcbiAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIGFLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgYVZhbCA9IGFba2V5XTtcbiAgICB2YXIgYlZhbCA9IGJba2V5XTtcbiAgICAvLyBjaGVjayBuZXN0ZWQgZXF1YWxpdHlcbiAgICBpZiAodHlwZW9mIGFWYWwgPT09ICdvYmplY3QnICYmIHR5cGVvZiBiVmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0RXF1YWwoYVZhbCwgYlZhbClcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhhVmFsKSA9PT0gU3RyaW5nKGJWYWwpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGlzSW5jbHVkZWRSb3V0ZSAoY3VycmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiAoXG4gICAgY3VycmVudC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpLmluZGV4T2YoXG4gICAgICB0YXJnZXQucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJy8nKVxuICAgICkgPT09IDAgJiZcbiAgICAoIXRhcmdldC5oYXNoIHx8IGN1cnJlbnQuaGFzaCA9PT0gdGFyZ2V0Lmhhc2gpICYmXG4gICAgcXVlcnlJbmNsdWRlcyhjdXJyZW50LnF1ZXJ5LCB0YXJnZXQucXVlcnkpXG4gIClcbn1cblxuZnVuY3Rpb24gcXVlcnlJbmNsdWRlcyAoY3VycmVudCwgdGFyZ2V0KSB7XG4gIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICBpZiAoIShrZXkgaW4gY3VycmVudCkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vKiAgKi9cblxuLy8gd29yayBhcm91bmQgd2VpcmQgZmxvdyBidWdcbnZhciB0b1R5cGVzID0gW1N0cmluZywgT2JqZWN0XTtcbnZhciBldmVudFR5cGVzID0gW1N0cmluZywgQXJyYXldO1xuXG52YXIgTGluayA9IHtcbiAgbmFtZTogJ1JvdXRlckxpbmsnLFxuICBwcm9wczoge1xuICAgIHRvOiB7XG4gICAgICB0eXBlOiB0b1R5cGVzLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2EnXG4gICAgfSxcbiAgICBleGFjdDogQm9vbGVhbixcbiAgICBhcHBlbmQ6IEJvb2xlYW4sXG4gICAgcmVwbGFjZTogQm9vbGVhbixcbiAgICBhY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGV4YWN0QWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBldmVudDoge1xuICAgICAgdHlwZTogZXZlbnRUeXBlcyxcbiAgICAgIGRlZmF1bHQ6ICdjbGljaydcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcm91dGVyID0gdGhpcy4kcm91dGVyO1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy4kcm91dGU7XG4gICAgdmFyIHJlZiA9IHJvdXRlci5yZXNvbHZlKHRoaXMudG8sIGN1cnJlbnQsIHRoaXMuYXBwZW5kKTtcbiAgICB2YXIgbG9jYXRpb24gPSByZWYubG9jYXRpb247XG4gICAgdmFyIHJvdXRlID0gcmVmLnJvdXRlO1xuICAgIHZhciBocmVmID0gcmVmLmhyZWY7XG5cbiAgICB2YXIgY2xhc3NlcyA9IHt9O1xuICAgIHZhciBnbG9iYWxBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcztcbiAgICB2YXIgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtFeGFjdEFjdGl2ZUNsYXNzO1xuICAgIC8vIFN1cHBvcnQgZ2xvYmFsIGVtcHR5IGFjdGl2ZSBjbGFzc1xuICAgIHZhciBhY3RpdmVDbGFzc0ZhbGxiYWNrID0gZ2xvYmFsQWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgPyAncm91dGVyLWxpbmstYWN0aXZlJ1xuICAgICAgOiBnbG9iYWxBY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzc0ZhbGxiYWNrID0gZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICA/ICdyb3V0ZXItbGluay1leGFjdC1hY3RpdmUnXG4gICAgICA6IGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3M7XG4gICAgdmFyIGFjdGl2ZUNsYXNzID0gdGhpcy5hY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICA/IGFjdGl2ZUNsYXNzRmFsbGJhY2tcbiAgICAgIDogdGhpcy5hY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzcyA9IHRoaXMuZXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICA/IGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFja1xuICAgICAgOiB0aGlzLmV4YWN0QWN0aXZlQ2xhc3M7XG4gICAgdmFyIGNvbXBhcmVUYXJnZXQgPSBsb2NhdGlvbi5wYXRoXG4gICAgICA/IGNyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uLCBudWxsLCByb3V0ZXIpXG4gICAgICA6IHJvdXRlO1xuXG4gICAgY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXSA9IGlzU2FtZVJvdXRlKGN1cnJlbnQsIGNvbXBhcmVUYXJnZXQpO1xuICAgIGNsYXNzZXNbYWN0aXZlQ2xhc3NdID0gdGhpcy5leGFjdFxuICAgICAgPyBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICA6IGlzSW5jbHVkZWRSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcblxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChndWFyZEV2ZW50KGUpKSB7XG4gICAgICAgIGlmICh0aGlzJDEucmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlci5yZXBsYWNlKGxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXIucHVzaChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG9uID0geyBjbGljazogZ3VhcmRFdmVudCB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnQpKSB7XG4gICAgICB0aGlzLmV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGUpIHsgb25bZV0gPSBoYW5kbGVyOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25bdGhpcy5ldmVudF0gPSBoYW5kbGVyO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0ge1xuICAgICAgY2xhc3M6IGNsYXNzZXNcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMudGFnID09PSAnYScpIHtcbiAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIGRhdGEuYXR0cnMgPSB7IGhyZWY6IGhyZWYgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmluZCB0aGUgZmlyc3QgPGE+IGNoaWxkIGFuZCBhcHBseSBsaXN0ZW5lciBhbmQgaHJlZlxuICAgICAgdmFyIGEgPSBmaW5kQW5jaG9yKHRoaXMuJHNsb3RzLmRlZmF1bHQpO1xuICAgICAgaWYgKGEpIHtcbiAgICAgICAgLy8gaW4gY2FzZSB0aGUgPGE+IGlzIGEgc3RhdGljIG5vZGVcbiAgICAgICAgYS5pc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICB2YXIgYURhdGEgPSBhLmRhdGEgPSBleHRlbmQoe30sIGEuZGF0YSk7XG4gICAgICAgIGFEYXRhLm9uID0gb247XG4gICAgICAgIHZhciBhQXR0cnMgPSBhLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGEuZGF0YS5hdHRycyk7XG4gICAgICAgIGFBdHRycy5ocmVmID0gaHJlZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRvZXNuJ3QgaGF2ZSA8YT4gY2hpbGQsIGFwcGx5IGxpc3RlbmVyIHRvIHNlbGZcbiAgICAgICAgZGF0YS5vbiA9IG9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoKHRoaXMudGFnLCBkYXRhLCB0aGlzLiRzbG90cy5kZWZhdWx0KVxuICB9XG59XG5cbmZ1bmN0aW9uIGd1YXJkRXZlbnQgKGUpIHtcbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgd2l0aCBjb250cm9sIGtleXNcbiAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCB3aGVuIHByZXZlbnREZWZhdWx0IGNhbGxlZFxuICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IG9uIHJpZ2h0IGNsaWNrXG4gIGlmIChlLmJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIGUuYnV0dG9uICE9PSAwKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IGlmIGB0YXJnZXQ9XCJfYmxhbmtcImBcbiAgaWYgKGUuY3VycmVudFRhcmdldCAmJiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpO1xuICAgIGlmICgvXFxiX2JsYW5rXFxiL2kudGVzdCh0YXJnZXQpKSB7IHJldHVybiB9XG4gIH1cbiAgLy8gdGhpcyBtYXkgYmUgYSBXZWV4IGV2ZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0aGlzIG1ldGhvZFxuICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaW5kQW5jaG9yIChjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgY2hpbGQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICdhJykge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5jaGlsZHJlbiAmJiAoY2hpbGQgPSBmaW5kQW5jaG9yKGNoaWxkLmNoaWxkcmVuKSkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBfVnVlO1xuXG5mdW5jdGlvbiBpbnN0YWxsIChWdWUpIHtcbiAgaWYgKGluc3RhbGwuaW5zdGFsbGVkICYmIF9WdWUgPT09IFZ1ZSkgeyByZXR1cm4gfVxuICBpbnN0YWxsLmluc3RhbGxlZCA9IHRydWU7XG5cbiAgX1Z1ZSA9IFZ1ZTtcblxuICB2YXIgaXNEZWYgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gdiAhPT0gdW5kZWZpbmVkOyB9O1xuXG4gIHZhciByZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCBjYWxsVmFsKSB7XG4gICAgdmFyIGkgPSB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gICAgaWYgKGlzRGVmKGkpICYmIGlzRGVmKGkgPSBpLmRhdGEpICYmIGlzRGVmKGkgPSBpLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSkpIHtcbiAgICAgIGkodm0sIGNhbGxWYWwpO1xuICAgIH1cbiAgfTtcblxuICBWdWUubWl4aW4oe1xuICAgIGJlZm9yZUNyZWF0ZTogZnVuY3Rpb24gYmVmb3JlQ3JlYXRlICgpIHtcbiAgICAgIGlmIChpc0RlZih0aGlzLiRvcHRpb25zLnJvdXRlcikpIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JvdXRlciA9IHRoaXMuJG9wdGlvbnMucm91dGVyO1xuICAgICAgICB0aGlzLl9yb3V0ZXIuaW5pdCh0aGlzKTtcbiAgICAgICAgVnVlLnV0aWwuZGVmaW5lUmVhY3RpdmUodGhpcywgJ19yb3V0ZScsIHRoaXMuX3JvdXRlci5oaXN0b3J5LmN1cnJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9ICh0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50Ll9yb3V0ZXJSb290KSB8fCB0aGlzO1xuICAgICAgfVxuICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCB0aGlzKTtcbiAgICB9LFxuICAgIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRyb3V0ZXInLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGVyIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGUgfVxuICB9KTtcblxuICBWdWUuY29tcG9uZW50KCdSb3V0ZXJWaWV3JywgVmlldyk7XG4gIFZ1ZS5jb21wb25lbnQoJ1JvdXRlckxpbmsnLCBMaW5rKTtcblxuICB2YXIgc3RyYXRzID0gVnVlLmNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG4gIC8vIHVzZSB0aGUgc2FtZSBob29rIG1lcmdpbmcgc3RyYXRlZ3kgZm9yIHJvdXRlIGhvb2tzXG4gIHN0cmF0cy5iZWZvcmVSb3V0ZUVudGVyID0gc3RyYXRzLmJlZm9yZVJvdXRlTGVhdmUgPSBzdHJhdHMuYmVmb3JlUm91dGVVcGRhdGUgPSBzdHJhdHMuY3JlYXRlZDtcbn1cblxuLyogICovXG5cbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVQYXRoIChcbiAgcmVsYXRpdmUsXG4gIGJhc2UsXG4gIGFwcGVuZFxuKSB7XG4gIHZhciBmaXJzdENoYXIgPSByZWxhdGl2ZS5jaGFyQXQoMCk7XG4gIGlmIChmaXJzdENoYXIgPT09ICcvJykge1xuICAgIHJldHVybiByZWxhdGl2ZVxuICB9XG5cbiAgaWYgKGZpcnN0Q2hhciA9PT0gJz8nIHx8IGZpcnN0Q2hhciA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGJhc2UgKyByZWxhdGl2ZVxuICB9XG5cbiAgdmFyIHN0YWNrID0gYmFzZS5zcGxpdCgnLycpO1xuXG4gIC8vIHJlbW92ZSB0cmFpbGluZyBzZWdtZW50IGlmOlxuICAvLyAtIG5vdCBhcHBlbmRpbmdcbiAgLy8gLSBhcHBlbmRpbmcgdG8gdHJhaWxpbmcgc2xhc2ggKGxhc3Qgc2VnbWVudCBpcyBlbXB0eSlcbiAgaWYgKCFhcHBlbmQgfHwgIXN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdKSB7XG4gICAgc3RhY2sucG9wKCk7XG4gIH1cblxuICAvLyByZXNvbHZlIHJlbGF0aXZlIHBhdGhcbiAgdmFyIHNlZ21lbnRzID0gcmVsYXRpdmUucmVwbGFjZSgvXlxcLy8sICcnKS5zcGxpdCgnLycpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICBpZiAoc2VnbWVudCA9PT0gJy4uJykge1xuICAgICAgc3RhY2sucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSAnLicpIHtcbiAgICAgIHN0YWNrLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9XG5cbiAgLy8gZW5zdXJlIGxlYWRpbmcgc2xhc2hcbiAgaWYgKHN0YWNrWzBdICE9PSAnJykge1xuICAgIHN0YWNrLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgcmV0dXJuIHN0YWNrLmpvaW4oJy8nKVxufVxuXG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIHF1ZXJ5ID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICBoYXNoID0gcGF0aC5zbGljZShoYXNoSW5kZXgpO1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgcXVlcnlJbmRleCA9IHBhdGguaW5kZXhPZignPycpO1xuICBpZiAocXVlcnlJbmRleCA+PSAwKSB7XG4gICAgcXVlcnkgPSBwYXRoLnNsaWNlKHF1ZXJ5SW5kZXggKyAxKTtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBxdWVyeUluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aDogcGF0aCxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgaGFzaDogaGFzaFxuICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFuUGF0aCAocGF0aCkge1xuICByZXR1cm4gcGF0aC5yZXBsYWNlKC9cXC9cXC8vZywgJy8nKVxufVxuXG52YXIgaXNhcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG52YXIgcGF0aFRvUmVnZXhwXzEgPSBwYXRoVG9SZWdleHA7XG52YXIgcGFyc2VfMSA9IHBhcnNlO1xudmFyIGNvbXBpbGVfMSA9IGNvbXBpbGU7XG52YXIgdG9rZW5zVG9GdW5jdGlvbl8xID0gdG9rZW5zVG9GdW5jdGlvbjtcbnZhciB0b2tlbnNUb1JlZ0V4cF8xID0gdG9rZW5zVG9SZWdFeHA7XG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJyk7XG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIGtleSA9IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBwYXRoID0gJyc7XG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLyc7XG4gIHZhciByZXM7XG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXTtcbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXTtcbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4O1xuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpO1xuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGg7XG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdO1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF07XG4gICAgdmFyIHByZWZpeCA9IHJlc1syXTtcbiAgICB2YXIgbmFtZSA9IHJlc1szXTtcbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XTtcbiAgICB2YXIgZ3JvdXAgPSByZXNbNV07XG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdO1xuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XTtcblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpO1xuICAgICAgcGF0aCA9ICcnO1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeDtcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonO1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJztcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXI7XG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwO1xuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleCk7XG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpO1xuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJztcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fTtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge307XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlbjtcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdO1xuICAgICAgdmFyIHNlZ21lbnQ7XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pO1xuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSk7XG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXM7XG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKTtcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKTtcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpO1xuICAgIGtleXMgPSBbXTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdDtcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZTtcbiAgdmFyIHJvdXRlID0gJyc7XG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpO1xuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSc7XG5cbiAgICAgIGtleXMucHVzaCh0b2tlbik7XG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonO1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/JztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSc7XG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmU7XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpO1xuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlcjtcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/JztcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCc7XG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJztcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKTtcbiAgICBrZXlzID0gW107XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG5wYXRoVG9SZWdleHBfMS5wYXJzZSA9IHBhcnNlXzE7XG5wYXRoVG9SZWdleHBfMS5jb21waWxlID0gY29tcGlsZV8xO1xucGF0aFRvUmVnZXhwXzEudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25fMTtcbnBhdGhUb1JlZ2V4cF8xLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBfMTtcblxuLyogICovXG5cbi8vICRmbG93LWRpc2FibGUtbGluZVxudmFyIHJlZ2V4cENvbXBpbGVDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIGZpbGxQYXJhbXMgKFxuICBwYXRoLFxuICBwYXJhbXMsXG4gIHJvdXRlTXNnXG4pIHtcbiAgdHJ5IHtcbiAgICB2YXIgZmlsbGVyID1cbiAgICAgIHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSB8fFxuICAgICAgKHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSA9IHBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUocGF0aCkpO1xuICAgIHJldHVybiBmaWxsZXIocGFyYW1zIHx8IHt9LCB7IHByZXR0eTogdHJ1ZSB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oZmFsc2UsIChcIm1pc3NpbmcgcGFyYW0gZm9yIFwiICsgcm91dGVNc2cgKyBcIjogXCIgKyAoZS5tZXNzYWdlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVNYXAgKFxuICByb3V0ZXMsXG4gIG9sZFBhdGhMaXN0LFxuICBvbGRQYXRoTWFwLFxuICBvbGROYW1lTWFwXG4pIHtcbiAgLy8gdGhlIHBhdGggbGlzdCBpcyB1c2VkIHRvIGNvbnRyb2wgcGF0aCBtYXRjaGluZyBwcmlvcml0eVxuICB2YXIgcGF0aExpc3QgPSBvbGRQYXRoTGlzdCB8fCBbXTtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciBwYXRoTWFwID0gb2xkUGF0aE1hcCB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIG5hbWVNYXAgPSBvbGROYW1lTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgcm91dGVzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgYWRkUm91dGVSZWNvcmQocGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXAsIHJvdXRlKTtcbiAgfSk7XG5cbiAgLy8gZW5zdXJlIHdpbGRjYXJkIHJvdXRlcyBhcmUgYWx3YXlzIGF0IHRoZSBlbmRcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXRoTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAocGF0aExpc3RbaV0gPT09ICcqJykge1xuICAgICAgcGF0aExpc3QucHVzaChwYXRoTGlzdC5zcGxpY2UoaSwgMSlbMF0pO1xuICAgICAgbC0tO1xuICAgICAgaS0tO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aExpc3Q6IHBhdGhMaXN0LFxuICAgIHBhdGhNYXA6IHBhdGhNYXAsXG4gICAgbmFtZU1hcDogbmFtZU1hcFxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFJvdXRlUmVjb3JkIChcbiAgcGF0aExpc3QsXG4gIHBhdGhNYXAsXG4gIG5hbWVNYXAsXG4gIHJvdXRlLFxuICBwYXJlbnQsXG4gIG1hdGNoQXNcbikge1xuICB2YXIgcGF0aCA9IHJvdXRlLnBhdGg7XG4gIHZhciBuYW1lID0gcm91dGUubmFtZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQocGF0aCAhPSBudWxsLCBcIlxcXCJwYXRoXFxcIiBpcyByZXF1aXJlZCBpbiBhIHJvdXRlIGNvbmZpZ3VyYXRpb24uXCIpO1xuICAgIGFzc2VydChcbiAgICAgIHR5cGVvZiByb3V0ZS5jb21wb25lbnQgIT09ICdzdHJpbmcnLFxuICAgICAgXCJyb3V0ZSBjb25maWcgXFxcImNvbXBvbmVudFxcXCIgZm9yIHBhdGg6IFwiICsgKFN0cmluZyhwYXRoIHx8IG5hbWUpKSArIFwiIGNhbm5vdCBiZSBhIFwiICtcbiAgICAgIFwic3RyaW5nIGlkLiBVc2UgYW4gYWN0dWFsIGNvbXBvbmVudCBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuXG4gIHZhciBwYXRoVG9SZWdleHBPcHRpb25zID0gcm91dGUucGF0aFRvUmVnZXhwT3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChcbiAgICBwYXRoLFxuICAgIHBhcmVudCxcbiAgICBwYXRoVG9SZWdleHBPcHRpb25zLnN0cmljdFxuICApO1xuXG4gIGlmICh0eXBlb2Ygcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcGF0aFRvUmVnZXhwT3B0aW9ucy5zZW5zaXRpdmUgPSByb3V0ZS5jYXNlU2Vuc2l0aXZlO1xuICB9XG5cbiAgdmFyIHJlY29yZCA9IHtcbiAgICBwYXRoOiBub3JtYWxpemVkUGF0aCxcbiAgICByZWdleDogY29tcGlsZVJvdXRlUmVnZXgobm9ybWFsaXplZFBhdGgsIHBhdGhUb1JlZ2V4cE9wdGlvbnMpLFxuICAgIGNvbXBvbmVudHM6IHJvdXRlLmNvbXBvbmVudHMgfHwgeyBkZWZhdWx0OiByb3V0ZS5jb21wb25lbnQgfSxcbiAgICBpbnN0YW5jZXM6IHt9LFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgbWF0Y2hBczogbWF0Y2hBcyxcbiAgICByZWRpcmVjdDogcm91dGUucmVkaXJlY3QsXG4gICAgYmVmb3JlRW50ZXI6IHJvdXRlLmJlZm9yZUVudGVyLFxuICAgIG1ldGE6IHJvdXRlLm1ldGEgfHwge30sXG4gICAgcHJvcHM6IHJvdXRlLnByb3BzID09IG51bGxcbiAgICAgID8ge31cbiAgICAgIDogcm91dGUuY29tcG9uZW50c1xuICAgICAgICA/IHJvdXRlLnByb3BzXG4gICAgICAgIDogeyBkZWZhdWx0OiByb3V0ZS5wcm9wcyB9XG4gIH07XG5cbiAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgLy8gV2FybiBpZiByb3V0ZSBpcyBuYW1lZCwgZG9lcyBub3QgcmVkaXJlY3QgYW5kIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuXG4gICAgLy8gSWYgdXNlcnMgbmF2aWdhdGUgdG8gdGhpcyByb3V0ZSBieSBuYW1lLCB0aGUgZGVmYXVsdCBjaGlsZCB3aWxsXG4gICAgLy8gbm90IGJlIHJlbmRlcmVkIChHSCBJc3N1ZSAjNjI5KVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocm91dGUubmFtZSAmJiAhcm91dGUucmVkaXJlY3QgJiYgcm91dGUuY2hpbGRyZW4uc29tZShmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIC9eXFwvPyQvLnRlc3QoY2hpbGQucGF0aCk7IH0pKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJOYW1lZCBSb3V0ZSAnXCIgKyAocm91dGUubmFtZSkgKyBcIicgaGFzIGEgZGVmYXVsdCBjaGlsZCByb3V0ZS4gXCIgK1xuICAgICAgICAgIFwiV2hlbiBuYXZpZ2F0aW5nIHRvIHRoaXMgbmFtZWQgcm91dGUgKDp0bz1cXFwie25hbWU6ICdcIiArIChyb3V0ZS5uYW1lKSArIFwiJ1xcXCIpLCBcIiArXG4gICAgICAgICAgXCJ0aGUgZGVmYXVsdCBjaGlsZCByb3V0ZSB3aWxsIG5vdCBiZSByZW5kZXJlZC4gUmVtb3ZlIHRoZSBuYW1lIGZyb20gXCIgK1xuICAgICAgICAgIFwidGhpcyByb3V0ZSBhbmQgdXNlIHRoZSBuYW1lIG9mIHRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIGZvciBuYW1lZCBcIiArXG4gICAgICAgICAgXCJsaW5rcyBpbnN0ZWFkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRNYXRjaEFzID0gbWF0Y2hBc1xuICAgICAgICA/IGNsZWFuUGF0aCgobWF0Y2hBcyArIFwiL1wiICsgKGNoaWxkLnBhdGgpKSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgY2hpbGQsIHJlY29yZCwgY2hpbGRNYXRjaEFzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChyb3V0ZS5hbGlhcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KHJvdXRlLmFsaWFzKVxuICAgICAgPyByb3V0ZS5hbGlhc1xuICAgICAgOiBbcm91dGUuYWxpYXNdO1xuXG4gICAgYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgdmFyIGFsaWFzUm91dGUgPSB7XG4gICAgICAgIHBhdGg6IGFsaWFzLFxuICAgICAgICBjaGlsZHJlbjogcm91dGUuY2hpbGRyZW5cbiAgICAgIH07XG4gICAgICBhZGRSb3V0ZVJlY29yZChcbiAgICAgICAgcGF0aExpc3QsXG4gICAgICAgIHBhdGhNYXAsXG4gICAgICAgIG5hbWVNYXAsXG4gICAgICAgIGFsaWFzUm91dGUsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgcmVjb3JkLnBhdGggfHwgJy8nIC8vIG1hdGNoQXNcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIXBhdGhNYXBbcmVjb3JkLnBhdGhdKSB7XG4gICAgcGF0aExpc3QucHVzaChyZWNvcmQucGF0aCk7XG4gICAgcGF0aE1hcFtyZWNvcmQucGF0aF0gPSByZWNvcmQ7XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIGlmICghbmFtZU1hcFtuYW1lXSkge1xuICAgICAgbmFtZU1hcFtuYW1lXSA9IHJlY29yZDtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1hdGNoQXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBcIkR1cGxpY2F0ZSBuYW1lZCByb3V0ZXMgZGVmaW5pdGlvbjogXCIgK1xuICAgICAgICBcInsgbmFtZTogXFxcIlwiICsgbmFtZSArIFwiXFxcIiwgcGF0aDogXFxcIlwiICsgKHJlY29yZC5wYXRoKSArIFwiXFxcIiB9XCJcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVSb3V0ZVJlZ2V4IChwYXRoLCBwYXRoVG9SZWdleHBPcHRpb25zKSB7XG4gIHZhciByZWdleCA9IHBhdGhUb1JlZ2V4cF8xKHBhdGgsIFtdLCBwYXRoVG9SZWdleHBPcHRpb25zKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmVnZXgua2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHdhcm4oIWtleXNba2V5Lm5hbWVdLCAoXCJEdXBsaWNhdGUgcGFyYW0ga2V5cyBpbiByb3V0ZSB3aXRoIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCJcIikpO1xuICAgICAga2V5c1trZXkubmFtZV0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiByZWdleFxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQYXRoIChwYXRoLCBwYXJlbnQsIHN0cmljdCkge1xuICBpZiAoIXN0cmljdCkgeyBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXC8kLywgJycpOyB9XG4gIGlmIChwYXRoWzBdID09PSAnLycpIHsgcmV0dXJuIHBhdGggfVxuICBpZiAocGFyZW50ID09IG51bGwpIHsgcmV0dXJuIHBhdGggfVxuICByZXR1cm4gY2xlYW5QYXRoKCgocGFyZW50LnBhdGgpICsgXCIvXCIgKyBwYXRoKSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2F0aW9uIChcbiAgcmF3LFxuICBjdXJyZW50LFxuICBhcHBlbmQsXG4gIHJvdXRlclxuKSB7XG4gIHZhciBuZXh0ID0gdHlwZW9mIHJhdyA9PT0gJ3N0cmluZycgPyB7IHBhdGg6IHJhdyB9IDogcmF3O1xuICAvLyBuYW1lZCB0YXJnZXRcbiAgaWYgKG5leHQubmFtZSB8fCBuZXh0Ll9ub3JtYWxpemVkKSB7XG4gICAgcmV0dXJuIG5leHRcbiAgfVxuXG4gIC8vIHJlbGF0aXZlIHBhcmFtc1xuICBpZiAoIW5leHQucGF0aCAmJiBuZXh0LnBhcmFtcyAmJiBjdXJyZW50KSB7XG4gICAgbmV4dCA9IGV4dGVuZCh7fSwgbmV4dCk7XG4gICAgbmV4dC5fbm9ybWFsaXplZCA9IHRydWU7XG4gICAgdmFyIHBhcmFtcyA9IGV4dGVuZChleHRlbmQoe30sIGN1cnJlbnQucGFyYW1zKSwgbmV4dC5wYXJhbXMpO1xuICAgIGlmIChjdXJyZW50Lm5hbWUpIHtcbiAgICAgIG5leHQubmFtZSA9IGN1cnJlbnQubmFtZTtcbiAgICAgIG5leHQucGFyYW1zID0gcGFyYW1zO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudC5tYXRjaGVkLmxlbmd0aCkge1xuICAgICAgdmFyIHJhd1BhdGggPSBjdXJyZW50Lm1hdGNoZWRbY3VycmVudC5tYXRjaGVkLmxlbmd0aCAtIDFdLnBhdGg7XG4gICAgICBuZXh0LnBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcywgKFwicGF0aCBcIiArIChjdXJyZW50LnBhdGgpKSk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKGZhbHNlLCBcInJlbGF0aXZlIHBhcmFtcyBuYXZpZ2F0aW9uIHJlcXVpcmVzIGEgY3VycmVudCByb3V0ZS5cIik7XG4gICAgfVxuICAgIHJldHVybiBuZXh0XG4gIH1cblxuICB2YXIgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChuZXh0LnBhdGggfHwgJycpO1xuICB2YXIgYmFzZVBhdGggPSAoY3VycmVudCAmJiBjdXJyZW50LnBhdGgpIHx8ICcvJztcbiAgdmFyIHBhdGggPSBwYXJzZWRQYXRoLnBhdGhcbiAgICA/IHJlc29sdmVQYXRoKHBhcnNlZFBhdGgucGF0aCwgYmFzZVBhdGgsIGFwcGVuZCB8fCBuZXh0LmFwcGVuZClcbiAgICA6IGJhc2VQYXRoO1xuXG4gIHZhciBxdWVyeSA9IHJlc29sdmVRdWVyeShcbiAgICBwYXJzZWRQYXRoLnF1ZXJ5LFxuICAgIG5leHQucXVlcnksXG4gICAgcm91dGVyICYmIHJvdXRlci5vcHRpb25zLnBhcnNlUXVlcnlcbiAgKTtcblxuICB2YXIgaGFzaCA9IG5leHQuaGFzaCB8fCBwYXJzZWRQYXRoLmhhc2g7XG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIHtcbiAgICBoYXNoID0gXCIjXCIgKyBoYXNoO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICBwYXRoOiBwYXRoLFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBoYXNoOiBoYXNoXG4gIH1cbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBjcmVhdGVNYXRjaGVyIChcbiAgcm91dGVzLFxuICByb3V0ZXJcbikge1xuICB2YXIgcmVmID0gY3JlYXRlUm91dGVNYXAocm91dGVzKTtcbiAgdmFyIHBhdGhMaXN0ID0gcmVmLnBhdGhMaXN0O1xuICB2YXIgcGF0aE1hcCA9IHJlZi5wYXRoTWFwO1xuICB2YXIgbmFtZU1hcCA9IHJlZi5uYW1lTWFwO1xuXG4gIGZ1bmN0aW9uIGFkZFJvdXRlcyAocm91dGVzKSB7XG4gICAgY3JlYXRlUm91dGVNYXAocm91dGVzLCBwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXRjaCAoXG4gICAgcmF3LFxuICAgIGN1cnJlbnRSb3V0ZSxcbiAgICByZWRpcmVjdGVkRnJvbVxuICApIHtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVMb2NhdGlvbihyYXcsIGN1cnJlbnRSb3V0ZSwgZmFsc2UsIHJvdXRlcik7XG4gICAgdmFyIG5hbWUgPSBsb2NhdGlvbi5uYW1lO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHZhciByZWNvcmQgPSBuYW1lTWFwW25hbWVdO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihyZWNvcmQsIChcIlJvdXRlIHdpdGggbmFtZSAnXCIgKyBuYW1lICsgXCInIGRvZXMgbm90IGV4aXN0XCIpKTtcbiAgICAgIH1cbiAgICAgIGlmICghcmVjb3JkKSB7IHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pIH1cbiAgICAgIHZhciBwYXJhbU5hbWVzID0gcmVjb3JkLnJlZ2V4LmtleXNcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAha2V5Lm9wdGlvbmFsOyB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleS5uYW1lOyB9KTtcblxuICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbi5wYXJhbXMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGxvY2F0aW9uLnBhcmFtcyA9IHt9O1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFJvdXRlICYmIHR5cGVvZiBjdXJyZW50Um91dGUucGFyYW1zID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gY3VycmVudFJvdXRlLnBhcmFtcykge1xuICAgICAgICAgIGlmICghKGtleSBpbiBsb2NhdGlvbi5wYXJhbXMpICYmIHBhcmFtTmFtZXMuaW5kZXhPZihrZXkpID4gLTEpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLnBhcmFtc1trZXldID0gY3VycmVudFJvdXRlLnBhcmFtc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgIGxvY2F0aW9uLnBhdGggPSBmaWxsUGFyYW1zKHJlY29yZC5wYXRoLCBsb2NhdGlvbi5wYXJhbXMsIChcIm5hbWVkIHJvdXRlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCJcIikpO1xuICAgICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aCkge1xuICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aExpc3RbaV07XG4gICAgICAgIHZhciByZWNvcmQkMSA9IHBhdGhNYXBbcGF0aF07XG4gICAgICAgIGlmIChtYXRjaFJvdXRlKHJlY29yZCQxLnJlZ2V4LCBsb2NhdGlvbi5wYXRoLCBsb2NhdGlvbi5wYXJhbXMpKSB7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQkMSwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG5vIG1hdGNoXG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZGlyZWN0IChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb25cbiAgKSB7XG4gICAgdmFyIG9yaWdpbmFsUmVkaXJlY3QgPSByZWNvcmQucmVkaXJlY3Q7XG4gICAgdmFyIHJlZGlyZWN0ID0gdHlwZW9mIG9yaWdpbmFsUmVkaXJlY3QgPT09ICdmdW5jdGlvbidcbiAgICAgID8gb3JpZ2luYWxSZWRpcmVjdChjcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCBudWxsLCByb3V0ZXIpKVxuICAgICAgOiBvcmlnaW5hbFJlZGlyZWN0O1xuXG4gICAgaWYgKHR5cGVvZiByZWRpcmVjdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlZGlyZWN0ID0geyBwYXRoOiByZWRpcmVjdCB9O1xuICAgIH1cblxuICAgIGlmICghcmVkaXJlY3QgfHwgdHlwZW9mIHJlZGlyZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSwgKFwiaW52YWxpZCByZWRpcmVjdCBvcHRpb246IFwiICsgKEpTT04uc3RyaW5naWZ5KHJlZGlyZWN0KSkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cblxuICAgIHZhciByZSA9IHJlZGlyZWN0O1xuICAgIHZhciBuYW1lID0gcmUubmFtZTtcbiAgICB2YXIgcGF0aCA9IHJlLnBhdGg7XG4gICAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnk7XG4gICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXJhbXMgPSBsb2NhdGlvbi5wYXJhbXM7XG4gICAgcXVlcnkgPSByZS5oYXNPd25Qcm9wZXJ0eSgncXVlcnknKSA/IHJlLnF1ZXJ5IDogcXVlcnk7XG4gICAgaGFzaCA9IHJlLmhhc093blByb3BlcnR5KCdoYXNoJykgPyByZS5oYXNoIDogaGFzaDtcbiAgICBwYXJhbXMgPSByZS5oYXNPd25Qcm9wZXJ0eSgncGFyYW1zJykgPyByZS5wYXJhbXMgOiBwYXJhbXM7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgLy8gcmVzb2x2ZWQgbmFtZWQgZGlyZWN0XG4gICAgICB2YXIgdGFyZ2V0UmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydCh0YXJnZXRSZWNvcmQsIChcInJlZGlyZWN0IGZhaWxlZDogbmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBub3QgZm91bmQuXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaCh7XG4gICAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2gsXG4gICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSBpZiAocGF0aCkge1xuICAgICAgLy8gMS4gcmVzb2x2ZSByZWxhdGl2ZSByZWRpcmVjdFxuICAgICAgdmFyIHJhd1BhdGggPSByZXNvbHZlUmVjb3JkUGF0aChwYXRoLCByZWNvcmQpO1xuICAgICAgLy8gMi4gcmVzb2x2ZSBwYXJhbXNcbiAgICAgIHZhciByZXNvbHZlZFBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcywgKFwicmVkaXJlY3Qgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIHJhd1BhdGggKyBcIlxcXCJcIikpO1xuICAgICAgLy8gMy4gcmVtYXRjaCB3aXRoIGV4aXN0aW5nIHF1ZXJ5IGFuZCBoYXNoXG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgcGF0aDogcmVzb2x2ZWRQYXRoLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2hcbiAgICAgIH0sIHVuZGVmaW5lZCwgbG9jYXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFsaWFzIChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb24sXG4gICAgbWF0Y2hBc1xuICApIHtcbiAgICB2YXIgYWxpYXNlZFBhdGggPSBmaWxsUGFyYW1zKG1hdGNoQXMsIGxvY2F0aW9uLnBhcmFtcywgKFwiYWxpYXNlZCByb3V0ZSB3aXRoIHBhdGggXFxcIlwiICsgbWF0Y2hBcyArIFwiXFxcIlwiKSk7XG4gICAgdmFyIGFsaWFzZWRNYXRjaCA9IG1hdGNoKHtcbiAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgcGF0aDogYWxpYXNlZFBhdGhcbiAgICB9KTtcbiAgICBpZiAoYWxpYXNlZE1hdGNoKSB7XG4gICAgICB2YXIgbWF0Y2hlZCA9IGFsaWFzZWRNYXRjaC5tYXRjaGVkO1xuICAgICAgdmFyIGFsaWFzZWRSZWNvcmQgPSBtYXRjaGVkW21hdGNoZWQubGVuZ3RoIC0gMV07XG4gICAgICBsb2NhdGlvbi5wYXJhbXMgPSBhbGlhc2VkTWF0Y2gucGFyYW1zO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShhbGlhc2VkUmVjb3JkLCBsb2NhdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVSb3V0ZSAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLnJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gcmVkaXJlY3QocmVjb3JkLCByZWRpcmVjdGVkRnJvbSB8fCBsb2NhdGlvbilcbiAgICB9XG4gICAgaWYgKHJlY29yZCAmJiByZWNvcmQubWF0Y2hBcykge1xuICAgICAgcmV0dXJuIGFsaWFzKHJlY29yZCwgbG9jYXRpb24sIHJlY29yZC5tYXRjaEFzKVxuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20sIHJvdXRlcilcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWF0Y2g6IG1hdGNoLFxuICAgIGFkZFJvdXRlczogYWRkUm91dGVzXG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZSAoXG4gIHJlZ2V4LFxuICBwYXRoLFxuICBwYXJhbXNcbikge1xuICB2YXIgbSA9IHBhdGgubWF0Y2gocmVnZXgpO1xuXG4gIGlmICghbSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IG0ubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIga2V5ID0gcmVnZXgua2V5c1tpIC0gMV07XG4gICAgdmFyIHZhbCA9IHR5cGVvZiBtW2ldID09PSAnc3RyaW5nJyA/IGRlY29kZVVSSUNvbXBvbmVudChtW2ldKSA6IG1baV07XG4gICAgaWYgKGtleSkge1xuICAgICAgLy8gRml4ICMxOTk0OiB1c2luZyAqIHdpdGggcHJvcHM6IHRydWUgZ2VuZXJhdGVzIGEgcGFyYW0gbmFtZWQgMFxuICAgICAgcGFyYW1zW2tleS5uYW1lIHx8ICdwYXRoTWF0Y2gnXSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUmVjb3JkUGF0aCAocGF0aCwgcmVjb3JkKSB7XG4gIHJldHVybiByZXNvbHZlUGF0aChwYXRoLCByZWNvcmQucGFyZW50ID8gcmVjb3JkLnBhcmVudC5wYXRoIDogJy8nLCB0cnVlKVxufVxuXG4vKiAgKi9cblxudmFyIHBvc2l0aW9uU3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBzZXR1cFNjcm9sbCAoKSB7XG4gIC8vIEZpeCBmb3IgIzE1ODUgZm9yIEZpcmVmb3hcbiAgLy8gRml4IGZvciAjMjE5NSBBZGQgb3B0aW9uYWwgdGhpcmQgYXR0cmlidXRlIHRvIHdvcmthcm91bmQgYSBidWcgaW4gc2FmYXJpIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODI2NzhcbiAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBnZXRTdGF0ZUtleSgpIH0sICcnLCB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sICcnKSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gICAgaWYgKGUuc3RhdGUgJiYgZS5zdGF0ZS5rZXkpIHtcbiAgICAgIHNldFN0YXRlS2V5KGUuc3RhdGUua2V5KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTY3JvbGwgKFxuICByb3V0ZXIsXG4gIHRvLFxuICBmcm9tLFxuICBpc1BvcFxuKSB7XG4gIGlmICghcm91dGVyLmFwcCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJlaGF2aW9yID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gIGlmICghYmVoYXZpb3IpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiZWhhdmlvciA9PT0gJ2Z1bmN0aW9uJywgXCJzY3JvbGxCZWhhdmlvciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICAvLyB3YWl0IHVudGlsIHJlLXJlbmRlciBmaW5pc2hlcyBiZWZvcmUgc2Nyb2xsaW5nXG4gIHJvdXRlci5hcHAuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIHZhciBzaG91bGRTY3JvbGwgPSBiZWhhdmlvci5jYWxsKHJvdXRlciwgdG8sIGZyb20sIGlzUG9wID8gcG9zaXRpb24gOiBudWxsKTtcblxuICAgIGlmICghc2hvdWxkU2Nyb2xsKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNob3VsZFNjcm9sbC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzaG91bGRTY3JvbGwudGhlbihmdW5jdGlvbiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgIHNjcm9sbFRvUG9zaXRpb24oKHNob3VsZFNjcm9sbCksIHBvc2l0aW9uKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBhc3NlcnQoZmFsc2UsIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcm9sbFRvUG9zaXRpb24oc2hvdWxkU2Nyb2xsLCBwb3NpdGlvbik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICBwb3NpdGlvblN0b3JlW2tleV0gPSB7XG4gICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICByZXR1cm4gcG9zaXRpb25TdG9yZVtrZXldXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFBvc2l0aW9uIChlbCwgb2Zmc2V0KSB7XG4gIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGRvY1JlY3QgPSBkb2NFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHg6IGVsUmVjdC5sZWZ0IC0gZG9jUmVjdC5sZWZ0IC0gb2Zmc2V0LngsXG4gICAgeTogZWxSZWN0LnRvcCAtIGRvY1JlY3QudG9wIC0gb2Zmc2V0LnlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUG9zaXRpb24gKG9iaikge1xuICByZXR1cm4gaXNOdW1iZXIob2JqLngpIHx8IGlzTnVtYmVyKG9iai55KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQb3NpdGlvbiAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogaXNOdW1iZXIob2JqLnkpID8gb2JqLnkgOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPZmZzZXQgKG9iaikge1xuICByZXR1cm4ge1xuICAgIHg6IGlzTnVtYmVyKG9iai54KSA/IG9iai54IDogMCxcbiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBpc051bWJlciAodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdudW1iZXInXG59XG5cbmZ1bmN0aW9uIHNjcm9sbFRvUG9zaXRpb24gKHNob3VsZFNjcm9sbCwgcG9zaXRpb24pIHtcbiAgdmFyIGlzT2JqZWN0ID0gdHlwZW9mIHNob3VsZFNjcm9sbCA9PT0gJ29iamVjdCc7XG4gIGlmIChpc09iamVjdCAmJiB0eXBlb2Ygc2hvdWxkU2Nyb2xsLnNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2hvdWxkU2Nyb2xsLnNlbGVjdG9yKTtcbiAgICBpZiAoZWwpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBzaG91bGRTY3JvbGwub2Zmc2V0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwub2Zmc2V0ID09PSAnb2JqZWN0JyA/IHNob3VsZFNjcm9sbC5vZmZzZXQgOiB7fTtcbiAgICAgIG9mZnNldCA9IG5vcm1hbGl6ZU9mZnNldChvZmZzZXQpO1xuICAgICAgcG9zaXRpb24gPSBnZXRFbGVtZW50UG9zaXRpb24oZWwsIG9mZnNldCk7XG4gICAgfSBlbHNlIGlmIChpc1ZhbGlkUG9zaXRpb24oc2hvdWxkU2Nyb2xsKSkge1xuICAgICAgcG9zaXRpb24gPSBub3JtYWxpemVQb3NpdGlvbihzaG91bGRTY3JvbGwpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCAmJiBpc1ZhbGlkUG9zaXRpb24oc2hvdWxkU2Nyb2xsKSkge1xuICAgIHBvc2l0aW9uID0gbm9ybWFsaXplUG9zaXRpb24oc2hvdWxkU2Nyb2xsKTtcbiAgfVxuXG4gIGlmIChwb3NpdGlvbikge1xuICAgIHdpbmRvdy5zY3JvbGxUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHN1cHBvcnRzUHVzaFN0YXRlID0gaW5Ccm93c2VyICYmIChmdW5jdGlvbiAoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmIChcbiAgICAodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiZcbiAgICB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmXG4gICAgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmXG4gICAgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMVxuICApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeVxufSkoKTtcblxuLy8gdXNlIFVzZXIgVGltaW5nIGFwaSAoaWYgcHJlc2VudCkgZm9yIG1vcmUgYWNjdXJhdGUga2V5IHByZWNpc2lvblxudmFyIFRpbWUgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3dcbiAgPyB3aW5kb3cucGVyZm9ybWFuY2VcbiAgOiBEYXRlO1xuXG52YXIgX2tleSA9IGdlbktleSgpO1xuXG5mdW5jdGlvbiBnZW5LZXkgKCkge1xuICByZXR1cm4gVGltZS5ub3coKS50b0ZpeGVkKDMpXG59XG5cbmZ1bmN0aW9uIGdldFN0YXRlS2V5ICgpIHtcbiAgcmV0dXJuIF9rZXlcbn1cblxuZnVuY3Rpb24gc2V0U3RhdGVLZXkgKGtleSkge1xuICBfa2V5ID0ga2V5O1xufVxuXG5mdW5jdGlvbiBwdXNoU3RhdGUgKHVybCwgcmVwbGFjZSkge1xuICBzYXZlU2Nyb2xsUG9zaXRpb24oKTtcbiAgLy8gdHJ5Li4uY2F0Y2ggdGhlIHB1c2hTdGF0ZSBjYWxsIHRvIGdldCBhcm91bmQgU2FmYXJpXG4gIC8vIERPTSBFeGNlcHRpb24gMTggd2hlcmUgaXQgbGltaXRzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHNcbiAgdmFyIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdHJ5IHtcbiAgICBpZiAocmVwbGFjZSkge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IF9rZXkgfSwgJycsIHVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9rZXkgPSBnZW5LZXkoKTtcbiAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBfa2V5IH0sICcnLCB1cmwpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHdpbmRvdy5sb2NhdGlvbltyZXBsYWNlID8gJ3JlcGxhY2UnIDogJ2Fzc2lnbiddKHVybCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZVN0YXRlICh1cmwpIHtcbiAgcHVzaFN0YXRlKHVybCwgdHJ1ZSk7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBydW5RdWV1ZSAocXVldWUsIGZuLCBjYikge1xuICB2YXIgc3RlcCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIGlmIChpbmRleCA+PSBxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGNiKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChxdWV1ZVtpbmRleF0pIHtcbiAgICAgICAgZm4ocXVldWVbaW5kZXhdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RlcChpbmRleCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ZXAoaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHN0ZXAoMCk7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnRzIChtYXRjaGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20sIG5leHQpIHtcbiAgICB2YXIgaGFzQXN5bmMgPSBmYWxzZTtcbiAgICB2YXIgcGVuZGluZyA9IDA7XG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIGZsYXRNYXBDb21wb25lbnRzKG1hdGNoZWQsIGZ1bmN0aW9uIChkZWYsIF8sIG1hdGNoLCBrZXkpIHtcbiAgICAgIC8vIGlmIGl0J3MgYSBmdW5jdGlvbiBhbmQgZG9lc24ndCBoYXZlIGNpZCBhdHRhY2hlZCxcbiAgICAgIC8vIGFzc3VtZSBpdCdzIGFuIGFzeW5jIGNvbXBvbmVudCByZXNvbHZlIGZ1bmN0aW9uLlxuICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBWdWUncyBkZWZhdWx0IGFzeW5jIHJlc29sdmluZyBtZWNoYW5pc20gYmVjYXVzZVxuICAgICAgLy8gd2Ugd2FudCB0byBoYWx0IHRoZSBuYXZpZ2F0aW9uIHVudGlsIHRoZSBpbmNvbWluZyBjb21wb25lbnQgaGFzIGJlZW5cbiAgICAgIC8vIHJlc29sdmVkLlxuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZGVmLmNpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhhc0FzeW5jID0gdHJ1ZTtcbiAgICAgICAgcGVuZGluZysrO1xuXG4gICAgICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzb2x2ZWREZWYpIHtcbiAgICAgICAgICBpZiAoaXNFU01vZHVsZShyZXNvbHZlZERlZikpIHtcbiAgICAgICAgICAgIHJlc29sdmVkRGVmID0gcmVzb2x2ZWREZWYuZGVmYXVsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc2F2ZSByZXNvbHZlZCBvbiBhc3luYyBmYWN0b3J5IGluIGNhc2UgaXQncyB1c2VkIGVsc2V3aGVyZVxuICAgICAgICAgIGRlZi5yZXNvbHZlZCA9IHR5cGVvZiByZXNvbHZlZERlZiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyByZXNvbHZlZERlZlxuICAgICAgICAgICAgOiBfVnVlLmV4dGVuZChyZXNvbHZlZERlZik7XG4gICAgICAgICAgbWF0Y2guY29tcG9uZW50c1trZXldID0gcmVzb2x2ZWREZWY7XG4gICAgICAgICAgcGVuZGluZy0tO1xuICAgICAgICAgIGlmIChwZW5kaW5nIDw9IDApIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQgXCIgKyBrZXkgKyBcIjogXCIgKyByZWFzb247XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBtc2cpO1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yID0gaXNFcnJvcihyZWFzb24pXG4gICAgICAgICAgICAgID8gcmVhc29uXG4gICAgICAgICAgICAgIDogbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICBuZXh0KGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gZGVmKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5ldyBzeW50YXggaW4gVnVlIDIuM1xuICAgICAgICAgICAgdmFyIGNvbXAgPSByZXMuY29tcG9uZW50O1xuICAgICAgICAgICAgaWYgKGNvbXAgJiYgdHlwZW9mIGNvbXAudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjb21wLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghaGFzQXN5bmMpIHsgbmV4dCgpOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxhdE1hcENvbXBvbmVudHMgKFxuICBtYXRjaGVkLFxuICBmblxuKSB7XG4gIHJldHVybiBmbGF0dGVuKG1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZuKFxuICAgICAgbS5jb21wb25lbnRzW2tleV0sXG4gICAgICBtLmluc3RhbmNlc1trZXldLFxuICAgICAgbSwga2V5XG4gICAgKTsgfSlcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4gKGFycikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxuZnVuY3Rpb24gaXNFU01vZHVsZSAob2JqKSB7XG4gIHJldHVybiBvYmouX19lc01vZHVsZSB8fCAoaGFzU3ltYm9sICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbn1cblxuLy8gaW4gV2VicGFjayAyLCByZXF1aXJlLmVuc3VyZSBub3cgYWxzbyByZXR1cm5zIGEgUHJvbWlzZVxuLy8gc28gdGhlIHJlc29sdmUvcmVqZWN0IGZ1bmN0aW9ucyBtYXkgZ2V0IGNhbGxlZCBhbiBleHRyYSB0aW1lXG4vLyBpZiB0aGUgdXNlciB1c2VzIGFuIGFycm93IGZ1bmN0aW9uIHNob3J0aGFuZCB0aGF0IGhhcHBlbnMgdG9cbi8vIHJldHVybiB0aGF0IFByb21pc2UuXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgaWYgKGNhbGxlZCkgeyByZXR1cm4gfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBIaXN0b3J5ID0gZnVuY3Rpb24gSGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gIHRoaXMucm91dGVyID0gcm91dGVyO1xuICB0aGlzLmJhc2UgPSBub3JtYWxpemVCYXNlKGJhc2UpO1xuICAvLyBzdGFydCB3aXRoIGEgcm91dGUgb2JqZWN0IHRoYXQgc3RhbmRzIGZvciBcIm5vd2hlcmVcIlxuICB0aGlzLmN1cnJlbnQgPSBTVEFSVDtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB0aGlzLnJlYWR5Q2JzID0gW107XG4gIHRoaXMucmVhZHlFcnJvckNicyA9IFtdO1xuICB0aGlzLmVycm9yQ2JzID0gW107XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4gKGNiKSB7XG4gIHRoaXMuY2IgPSBjYjtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICBpZiAodGhpcy5yZWFkeSkge1xuICAgIGNiKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWFkeUNicy5wdXNoKGNiKTtcbiAgICBpZiAoZXJyb3JDYikge1xuICAgICAgdGhpcy5yZWFkeUVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG4gICAgfVxuICB9XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS50cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiB0cmFuc2l0aW9uVG8gKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHJvdXRlID0gdGhpcy5yb3V0ZXIubWF0Y2gobG9jYXRpb24sIHRoaXMuY3VycmVudCk7XG4gIHRoaXMuY29uZmlybVRyYW5zaXRpb24ocm91dGUsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzJDEudXBkYXRlUm91dGUocm91dGUpO1xuICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgdGhpcyQxLmVuc3VyZVVSTCgpO1xuXG4gICAgLy8gZmlyZSByZWFkeSBjYnMgb25jZVxuICAgIGlmICghdGhpcyQxLnJlYWR5KSB7XG4gICAgICB0aGlzJDEucmVhZHkgPSB0cnVlO1xuICAgICAgdGhpcyQxLnJlYWR5Q2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IGNiKHJvdXRlKTsgfSk7XG4gICAgfVxuICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKG9uQWJvcnQpIHtcbiAgICAgIG9uQWJvcnQoZXJyKTtcbiAgICB9XG4gICAgaWYgKGVyciAmJiAhdGhpcyQxLnJlYWR5KSB7XG4gICAgICB0aGlzJDEucmVhZHkgPSB0cnVlO1xuICAgICAgdGhpcyQxLnJlYWR5RXJyb3JDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgY2IoZXJyKTsgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLmNvbmZpcm1UcmFuc2l0aW9uID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb24gKHJvdXRlLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gIHZhciBhYm9ydCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoaXNFcnJvcihlcnIpKSB7XG4gICAgICBpZiAodGhpcyQxLmVycm9yQ2JzLmxlbmd0aCkge1xuICAgICAgICB0aGlzJDEuZXJyb3JDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgY2IoZXJyKTsgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKGZhbHNlLCAndW5jYXVnaHQgZXJyb3IgZHVyaW5nIHJvdXRlIG5hdmlnYXRpb246Jyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgb25BYm9ydCAmJiBvbkFib3J0KGVycik7XG4gIH07XG4gIGlmIChcbiAgICBpc1NhbWVSb3V0ZShyb3V0ZSwgY3VycmVudCkgJiZcbiAgICAvLyBpbiB0aGUgY2FzZSB0aGUgcm91dGUgbWFwIGhhcyBiZWVuIGR5bmFtaWNhbGx5IGFwcGVuZGVkIHRvXG4gICAgcm91dGUubWF0Y2hlZC5sZW5ndGggPT09IGN1cnJlbnQubWF0Y2hlZC5sZW5ndGhcbiAgKSB7XG4gICAgdGhpcy5lbnN1cmVVUkwoKTtcbiAgICByZXR1cm4gYWJvcnQoKVxuICB9XG5cbiAgdmFyIHJlZiA9IHJlc29sdmVRdWV1ZSh0aGlzLmN1cnJlbnQubWF0Y2hlZCwgcm91dGUubWF0Y2hlZCk7XG4gICAgdmFyIHVwZGF0ZWQgPSByZWYudXBkYXRlZDtcbiAgICB2YXIgZGVhY3RpdmF0ZWQgPSByZWYuZGVhY3RpdmF0ZWQ7XG4gICAgdmFyIGFjdGl2YXRlZCA9IHJlZi5hY3RpdmF0ZWQ7XG5cbiAgdmFyIHF1ZXVlID0gW10uY29uY2F0KFxuICAgIC8vIGluLWNvbXBvbmVudCBsZWF2ZSBndWFyZHNcbiAgICBleHRyYWN0TGVhdmVHdWFyZHMoZGVhY3RpdmF0ZWQpLFxuICAgIC8vIGdsb2JhbCBiZWZvcmUgaG9va3NcbiAgICB0aGlzLnJvdXRlci5iZWZvcmVIb29rcyxcbiAgICAvLyBpbi1jb21wb25lbnQgdXBkYXRlIGhvb2tzXG4gICAgZXh0cmFjdFVwZGF0ZUhvb2tzKHVwZGF0ZWQpLFxuICAgIC8vIGluLWNvbmZpZyBlbnRlciBndWFyZHNcbiAgICBhY3RpdmF0ZWQubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmJlZm9yZUVudGVyOyB9KSxcbiAgICAvLyBhc3luYyBjb21wb25lbnRzXG4gICAgcmVzb2x2ZUFzeW5jQ29tcG9uZW50cyhhY3RpdmF0ZWQpXG4gICk7XG5cbiAgdGhpcy5wZW5kaW5nID0gcm91dGU7XG4gIHZhciBpdGVyYXRvciA9IGZ1bmN0aW9uIChob29rLCBuZXh0KSB7XG4gICAgaWYgKHRoaXMkMS5wZW5kaW5nICE9PSByb3V0ZSkge1xuICAgICAgcmV0dXJuIGFib3J0KClcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGhvb2socm91dGUsIGN1cnJlbnQsIGZ1bmN0aW9uICh0bykge1xuICAgICAgICBpZiAodG8gPT09IGZhbHNlIHx8IGlzRXJyb3IodG8pKSB7XG4gICAgICAgICAgLy8gbmV4dChmYWxzZSkgLT4gYWJvcnQgbmF2aWdhdGlvbiwgZW5zdXJlIGN1cnJlbnQgVVJMXG4gICAgICAgICAgdGhpcyQxLmVuc3VyZVVSTCh0cnVlKTtcbiAgICAgICAgICBhYm9ydCh0byk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRvID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICh0eXBlb2YgdG8gPT09ICdvYmplY3QnICYmIChcbiAgICAgICAgICAgIHR5cGVvZiB0by5wYXRoID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgdHlwZW9mIHRvLm5hbWUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gbmV4dCgnLycpIG9yIG5leHQoeyBwYXRoOiAnLycgfSkgLT4gcmVkaXJlY3RcbiAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09ICdvYmplY3QnICYmIHRvLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHRoaXMkMS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcyQxLnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb25maXJtIHRyYW5zaXRpb24gYW5kIHBhc3Mgb24gdGhlIHZhbHVlXG4gICAgICAgICAgbmV4dCh0byk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFib3J0KGUpO1xuICAgIH1cbiAgfTtcblxuICBydW5RdWV1ZShxdWV1ZSwgaXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zdEVudGVyQ2JzID0gW107XG4gICAgdmFyIGlzVmFsaWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuY3VycmVudCA9PT0gcm91dGU7IH07XG4gICAgLy8gd2FpdCB1bnRpbCBhc3luYyBjb21wb25lbnRzIGFyZSByZXNvbHZlZCBiZWZvcmVcbiAgICAvLyBleHRyYWN0aW5nIGluLWNvbXBvbmVudCBlbnRlciBndWFyZHNcbiAgICB2YXIgZW50ZXJHdWFyZHMgPSBleHRyYWN0RW50ZXJHdWFyZHMoYWN0aXZhdGVkLCBwb3N0RW50ZXJDYnMsIGlzVmFsaWQpO1xuICAgIHZhciBxdWV1ZSA9IGVudGVyR3VhcmRzLmNvbmNhdCh0aGlzJDEucm91dGVyLnJlc29sdmVIb29rcyk7XG4gICAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcyQxLnBlbmRpbmcgIT09IHJvdXRlKSB7XG4gICAgICAgIHJldHVybiBhYm9ydCgpXG4gICAgICB9XG4gICAgICB0aGlzJDEucGVuZGluZyA9IG51bGw7XG4gICAgICBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIGlmICh0aGlzJDEucm91dGVyLmFwcCkge1xuICAgICAgICB0aGlzJDEucm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBvc3RFbnRlckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgeyBjYigpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudXBkYXRlUm91dGUgPSBmdW5jdGlvbiB1cGRhdGVSb3V0ZSAocm91dGUpIHtcbiAgdmFyIHByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMuY3VycmVudCA9IHJvdXRlO1xuICB0aGlzLmNiICYmIHRoaXMuY2Iocm91dGUpO1xuICB0aGlzLnJvdXRlci5hZnRlckhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UgKGJhc2UpIHtcbiAgaWYgKCFiYXNlKSB7XG4gICAgaWYgKGluQnJvd3Nlcikge1xuICAgICAgLy8gcmVzcGVjdCA8YmFzZT4gdGFnXG4gICAgICB2YXIgYmFzZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgICAgYmFzZSA9IChiYXNlRWwgJiYgYmFzZUVsLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB8fCAnLyc7XG4gICAgICAvLyBzdHJpcCBmdWxsIFVSTCBvcmlnaW5cbiAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15odHRwcz86XFwvXFwvW15cXC9dKy8sICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZSA9ICcvJztcbiAgICB9XG4gIH1cbiAgLy8gbWFrZSBzdXJlIHRoZXJlJ3MgdGhlIHN0YXJ0aW5nIHNsYXNoXG4gIGlmIChiYXNlLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgYmFzZSA9ICcvJyArIGJhc2U7XG4gIH1cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNsYXNoXG4gIHJldHVybiBiYXNlLnJlcGxhY2UoL1xcLyQvLCAnJylcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVF1ZXVlIChcbiAgY3VycmVudCxcbiAgbmV4dFxuKSB7XG4gIHZhciBpO1xuICB2YXIgbWF4ID0gTWF0aC5tYXgoY3VycmVudC5sZW5ndGgsIG5leHQubGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgaWYgKGN1cnJlbnRbaV0gIT09IG5leHRbaV0pIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdXBkYXRlZDogbmV4dC5zbGljZSgwLCBpKSxcbiAgICBhY3RpdmF0ZWQ6IG5leHQuc2xpY2UoaSksXG4gICAgZGVhY3RpdmF0ZWQ6IGN1cnJlbnQuc2xpY2UoaSlcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0R3VhcmRzIChcbiAgcmVjb3JkcyxcbiAgbmFtZSxcbiAgYmluZCxcbiAgcmV2ZXJzZVxuKSB7XG4gIHZhciBndWFyZHMgPSBmbGF0TWFwQ29tcG9uZW50cyhyZWNvcmRzLCBmdW5jdGlvbiAoZGVmLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSkge1xuICAgIHZhciBndWFyZCA9IGV4dHJhY3RHdWFyZChkZWYsIG5hbWUpO1xuICAgIGlmIChndWFyZCkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZ3VhcmQpXG4gICAgICAgID8gZ3VhcmQubWFwKGZ1bmN0aW9uIChndWFyZCkgeyByZXR1cm4gYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpOyB9KVxuICAgICAgICA6IGJpbmQoZ3VhcmQsIGluc3RhbmNlLCBtYXRjaCwga2V5KVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmbGF0dGVuKHJldmVyc2UgPyBndWFyZHMucmV2ZXJzZSgpIDogZ3VhcmRzKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0R3VhcmQgKFxuICBkZWYsXG4gIGtleVxuKSB7XG4gIGlmICh0eXBlb2YgZGVmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXh0ZW5kIG5vdyBzbyB0aGF0IGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQuXG4gICAgZGVmID0gX1Z1ZS5leHRlbmQoZGVmKTtcbiAgfVxuICByZXR1cm4gZGVmLm9wdGlvbnNba2V5XVxufVxuXG5mdW5jdGlvbiBleHRyYWN0TGVhdmVHdWFyZHMgKGRlYWN0aXZhdGVkKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKGRlYWN0aXZhdGVkLCAnYmVmb3JlUm91dGVMZWF2ZScsIGJpbmRHdWFyZCwgdHJ1ZSlcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFVwZGF0ZUhvb2tzICh1cGRhdGVkKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKHVwZGF0ZWQsICdiZWZvcmVSb3V0ZVVwZGF0ZScsIGJpbmRHdWFyZClcbn1cblxuZnVuY3Rpb24gYmluZEd1YXJkIChndWFyZCwgaW5zdGFuY2UpIHtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJvdW5kUm91dGVHdWFyZCAoKSB7XG4gICAgICByZXR1cm4gZ3VhcmQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdEVudGVyR3VhcmRzIChcbiAgYWN0aXZhdGVkLFxuICBjYnMsXG4gIGlzVmFsaWRcbikge1xuICByZXR1cm4gZXh0cmFjdEd1YXJkcyhhY3RpdmF0ZWQsICdiZWZvcmVSb3V0ZUVudGVyJywgZnVuY3Rpb24gKGd1YXJkLCBfLCBtYXRjaCwga2V5KSB7XG4gICAgcmV0dXJuIGJpbmRFbnRlckd1YXJkKGd1YXJkLCBtYXRjaCwga2V5LCBjYnMsIGlzVmFsaWQpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGJpbmRFbnRlckd1YXJkIChcbiAgZ3VhcmQsXG4gIG1hdGNoLFxuICBrZXksXG4gIGNicyxcbiAgaXNWYWxpZFxuKSB7XG4gIHJldHVybiBmdW5jdGlvbiByb3V0ZUVudGVyR3VhcmQgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgcmV0dXJuIGd1YXJkKHRvLCBmcm9tLCBmdW5jdGlvbiAoY2IpIHtcbiAgICAgIG5leHQoY2IpO1xuICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gIzc1MFxuICAgICAgICAgIC8vIGlmIGEgcm91dGVyLXZpZXcgaXMgd3JhcHBlZCB3aXRoIGFuIG91dC1pbiB0cmFuc2l0aW9uLFxuICAgICAgICAgIC8vIHRoZSBpbnN0YW5jZSBtYXkgbm90IGhhdmUgYmVlbiByZWdpc3RlcmVkIGF0IHRoaXMgdGltZS5cbiAgICAgICAgICAvLyB3ZSB3aWxsIG5lZWQgdG8gcG9sbCBmb3IgcmVnaXN0cmF0aW9uIHVudGlsIGN1cnJlbnQgcm91dGVcbiAgICAgICAgICAvLyBpcyBubyBsb25nZXIgdmFsaWQuXG4gICAgICAgICAgcG9sbChjYiwgbWF0Y2guaW5zdGFuY2VzLCBrZXksIGlzVmFsaWQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIHBvbGwgKFxuICBjYiwgLy8gc29tZWhvdyBmbG93IGNhbm5vdCBpbmZlciB0aGlzIGlzIGEgZnVuY3Rpb25cbiAgaW5zdGFuY2VzLFxuICBrZXksXG4gIGlzVmFsaWRcbikge1xuICBpZiAoXG4gICAgaW5zdGFuY2VzW2tleV0gJiZcbiAgICAhaW5zdGFuY2VzW2tleV0uX2lzQmVpbmdEZXN0cm95ZWQgLy8gZG8gbm90IHJldXNlIGJlaW5nIGRlc3Ryb3llZCBpbnN0YW5jZVxuICApIHtcbiAgICBjYihpbnN0YW5jZXNba2V5XSk7XG4gIH0gZWxzZSBpZiAoaXNWYWxpZCgpKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBwb2xsKGNiLCBpbnN0YW5jZXMsIGtleSwgaXNWYWxpZCk7XG4gICAgfSwgMTYpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgSFRNTDVIaXN0b3J5ID0gKGZ1bmN0aW9uIChIaXN0b3J5JCQxKSB7XG4gIGZ1bmN0aW9uIEhUTUw1SGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBIaXN0b3J5JCQxLmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcblxuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHNldHVwU2Nyb2xsKCk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRMb2NhdGlvbiA9IGdldExvY2F0aW9uKHRoaXMuYmFzZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG5cbiAgICAgIC8vIEF2b2lkaW5nIGZpcnN0IGBwb3BzdGF0ZWAgZXZlbnQgZGlzcGF0Y2hlZCBpbiBzb21lIGJyb3dzZXJzIGJ1dCBmaXJzdFxuICAgICAgLy8gaGlzdG9yeSByb3V0ZSBub3QgdXBkYXRlZCBzaW5jZSBhc3luYyBndWFyZCBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24odGhpcyQxLmJhc2UpO1xuICAgICAgaWYgKHRoaXMkMS5jdXJyZW50ID09PSBTVEFSVCAmJiBsb2NhdGlvbiA9PT0gaW5pdExvY2F0aW9uKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgaGFuZGxlU2Nyb2xsKHJvdXRlciwgcm91dGUsIGN1cnJlbnQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSQkMSApIEhUTUw1SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5JCQxO1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSQkMSAmJiBIaXN0b3J5JCQxLnByb3RvdHlwZSApO1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSFRNTDVIaXN0b3J5O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcHVzaFN0YXRlKGNsZWFuUGF0aCh0aGlzJDEuYmFzZSArIHJvdXRlLmZ1bGxQYXRoKSk7XG4gICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHJlcGxhY2VTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKHB1c2gpIHtcbiAgICBpZiAoZ2V0TG9jYXRpb24odGhpcy5iYXNlKSAhPT0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGNsZWFuUGF0aCh0aGlzLmJhc2UgKyB0aGlzLmN1cnJlbnQuZnVsbFBhdGgpO1xuICAgICAgcHVzaCA/IHB1c2hTdGF0ZShjdXJyZW50KSA6IHJlcGxhY2VTdGF0ZShjdXJyZW50KTtcbiAgICB9XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHJldHVybiBnZXRMb2NhdGlvbih0aGlzLmJhc2UpXG4gIH07XG5cbiAgcmV0dXJuIEhUTUw1SGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG5mdW5jdGlvbiBnZXRMb2NhdGlvbiAoYmFzZSkge1xuICB2YXIgcGF0aCA9IGRlY29kZVVSSSh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICBpZiAoYmFzZSAmJiBwYXRoLmluZGV4T2YoYmFzZSkgPT09IDApIHtcbiAgICBwYXRoID0gcGF0aC5zbGljZShiYXNlLmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgd2luZG93LmxvY2F0aW9uLmhhc2hcbn1cblxuLyogICovXG5cbnZhciBIYXNoSGlzdG9yeSA9IChmdW5jdGlvbiAoSGlzdG9yeSQkMSkge1xuICBmdW5jdGlvbiBIYXNoSGlzdG9yeSAocm91dGVyLCBiYXNlLCBmYWxsYmFjaykge1xuICAgIEhpc3RvcnkkJDEuY2FsbCh0aGlzLCByb3V0ZXIsIGJhc2UpO1xuICAgIC8vIGNoZWNrIGhpc3RvcnkgZmFsbGJhY2sgZGVlcGxpbmtpbmdcbiAgICBpZiAoZmFsbGJhY2sgJiYgY2hlY2tGYWxsYmFjayh0aGlzLmJhc2UpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZW5zdXJlU2xhc2goKTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSQkMSApIEhhc2hIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3RvcnkkJDE7XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkkJDEgJiYgSGlzdG9yeSQkMS5wcm90b3R5cGUgKTtcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSGFzaEhpc3Rvcnk7XG5cbiAgLy8gdGhpcyBpcyBkZWxheWVkIHVudGlsIHRoZSBhcHAgbW91bnRzXG4gIC8vIHRvIGF2b2lkIHRoZSBoYXNoY2hhbmdlIGxpc3RlbmVyIGJlaW5nIGZpcmVkIHRvbyBlYXJseVxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cExpc3RlbmVycyAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcm91dGVyID0gdGhpcy5yb3V0ZXI7XG4gICAgdmFyIGV4cGVjdFNjcm9sbCA9IHJvdXRlci5vcHRpb25zLnNjcm9sbEJlaGF2aW9yO1xuICAgIHZhciBzdXBwb3J0c1Njcm9sbCA9IHN1cHBvcnRzUHVzaFN0YXRlICYmIGV4cGVjdFNjcm9sbDtcblxuICAgIGlmIChzdXBwb3J0c1Njcm9sbCkge1xuICAgICAgc2V0dXBTY3JvbGwoKTtcbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihzdXBwb3J0c1B1c2hTdGF0ZSA/ICdwb3BzdGF0ZScgOiAnaGFzaGNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG4gICAgICBpZiAoIWVuc3VyZVNsYXNoKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGdldEhhc2goKSwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c1Njcm9sbCkge1xuICAgICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgICAgICAgIHJlcGxhY2VIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHB1c2hIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICByZXBsYWNlSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKHB1c2gpIHtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudC5mdWxsUGF0aDtcbiAgICBpZiAoZ2V0SGFzaCgpICE9PSBjdXJyZW50KSB7XG4gICAgICBwdXNoID8gcHVzaEhhc2goY3VycmVudCkgOiByZXBsYWNlSGFzaChjdXJyZW50KTtcbiAgICB9XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEhhc2goKVxuICB9O1xuXG4gIHJldHVybiBIYXNoSGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG5mdW5jdGlvbiBjaGVja0ZhbGxiYWNrIChiYXNlKSB7XG4gIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGJhc2UpO1xuICBpZiAoIS9eXFwvIy8udGVzdChsb2NhdGlvbikpIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShcbiAgICAgIGNsZWFuUGF0aChiYXNlICsgJy8jJyArIGxvY2F0aW9uKVxuICAgICk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBlbnN1cmVTbGFzaCAoKSB7XG4gIHZhciBwYXRoID0gZ2V0SGFzaCgpO1xuICBpZiAocGF0aC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmVwbGFjZUhhc2goJy8nICsgcGF0aCk7XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZXRIYXNoICgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGluZGV4ID09PSAtMSA/ICcnIDogZGVjb2RlVVJJKGhyZWYuc2xpY2UoaW5kZXggKyAxKSlcbn1cblxuZnVuY3Rpb24gZ2V0VXJsIChwYXRoKSB7XG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBpID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHZhciBiYXNlID0gaSA+PSAwID8gaHJlZi5zbGljZSgwLCBpKSA6IGhyZWY7XG4gIHJldHVybiAoYmFzZSArIFwiI1wiICsgcGF0aClcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2ggKHBhdGgpIHtcbiAgaWYgKHN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgcHVzaFN0YXRlKGdldFVybChwYXRoKSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoIChwYXRoKSB7XG4gIGlmIChzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgIHJlcGxhY2VTdGF0ZShnZXRVcmwocGF0aCkpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGdldFVybChwYXRoKSk7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBBYnN0cmFjdEhpc3RvcnkgPSAoZnVuY3Rpb24gKEhpc3RvcnkkJDEpIHtcbiAgZnVuY3Rpb24gQWJzdHJhY3RIaXN0b3J5IChyb3V0ZXIsIGJhc2UpIHtcbiAgICBIaXN0b3J5JCQxLmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5pbmRleCA9IC0xO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5JCQxICkgQWJzdHJhY3RIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3RvcnkkJDE7XG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBIaXN0b3J5JCQxICYmIEhpc3RvcnkkJDEucHJvdG90eXBlICk7XG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBYnN0cmFjdEhpc3Rvcnk7XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHRoaXMkMS5zdGFjayA9IHRoaXMkMS5zdGFjay5zbGljZSgwLCB0aGlzJDEuaW5kZXggKyAxKS5jb25jYXQocm91dGUpO1xuICAgICAgdGhpcyQxLmluZGV4Kys7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICB0aGlzJDEuc3RhY2sgPSB0aGlzJDEuc3RhY2suc2xpY2UoMCwgdGhpcyQxLmluZGV4KS5jb25jYXQocm91dGUpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB0YXJnZXRJbmRleCA9IHRoaXMuaW5kZXggKyBuO1xuICAgIGlmICh0YXJnZXRJbmRleCA8IDAgfHwgdGFyZ2V0SW5kZXggPj0gdGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgcm91dGUgPSB0aGlzLnN0YWNrW3RhcmdldEluZGV4XTtcbiAgICB0aGlzLmNvbmZpcm1UcmFuc2l0aW9uKHJvdXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzJDEuaW5kZXggPSB0YXJnZXRJbmRleDtcbiAgICAgIHRoaXMkMS51cGRhdGVSb3V0ZShyb3V0ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBjdXJyZW50ID8gY3VycmVudC5mdWxsUGF0aCA6ICcvJ1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZW5zdXJlVVJMID0gZnVuY3Rpb24gZW5zdXJlVVJMICgpIHtcbiAgICAvLyBub29wXG4gIH07XG5cbiAgcmV0dXJuIEFic3RyYWN0SGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG4vKiAgKi9cblxuXG5cbnZhciBWdWVSb3V0ZXIgPSBmdW5jdGlvbiBWdWVSb3V0ZXIgKG9wdGlvbnMpIHtcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgdGhpcy5hcHAgPSBudWxsO1xuICB0aGlzLmFwcHMgPSBbXTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5iZWZvcmVIb29rcyA9IFtdO1xuICB0aGlzLnJlc29sdmVIb29rcyA9IFtdO1xuICB0aGlzLmFmdGVySG9va3MgPSBbXTtcbiAgdGhpcy5tYXRjaGVyID0gY3JlYXRlTWF0Y2hlcihvcHRpb25zLnJvdXRlcyB8fCBbXSwgdGhpcyk7XG5cbiAgdmFyIG1vZGUgPSBvcHRpb25zLm1vZGUgfHwgJ2hhc2gnO1xuICB0aGlzLmZhbGxiYWNrID0gbW9kZSA9PT0gJ2hpc3RvcnknICYmICFzdXBwb3J0c1B1c2hTdGF0ZSAmJiBvcHRpb25zLmZhbGxiYWNrICE9PSBmYWxzZTtcbiAgaWYgKHRoaXMuZmFsbGJhY2spIHtcbiAgICBtb2RlID0gJ2hhc2gnO1xuICB9XG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgbW9kZSA9ICdhYnN0cmFjdCc7XG4gIH1cbiAgdGhpcy5tb2RlID0gbW9kZTtcblxuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlICdoaXN0b3J5JzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIVE1MNUhpc3RvcnkodGhpcywgb3B0aW9ucy5iYXNlKTtcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnaGFzaCc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSGFzaEhpc3RvcnkodGhpcywgb3B0aW9ucy5iYXNlLCB0aGlzLmZhbGxiYWNrKTtcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYWJzdHJhY3QnOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEFic3RyYWN0SGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UpO1xuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgYXNzZXJ0KGZhbHNlLCAoXCJpbnZhbGlkIG1vZGU6IFwiICsgbW9kZSkpO1xuICAgICAgfVxuICB9XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjdXJyZW50Um91dGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5tYXRjaCA9IGZ1bmN0aW9uIG1hdGNoIChcbiAgcmF3LFxuICBjdXJyZW50LFxuICByZWRpcmVjdGVkRnJvbVxuKSB7XG4gIHJldHVybiB0aGlzLm1hdGNoZXIubWF0Y2gocmF3LCBjdXJyZW50LCByZWRpcmVjdGVkRnJvbSlcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5jdXJyZW50Um91dGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5oaXN0b3J5ICYmIHRoaXMuaGlzdG9yeS5jdXJyZW50XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiBpbml0IChhcHAgLyogVnVlIGNvbXBvbmVudCBpbnN0YW5jZSAqLykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0KFxuICAgIGluc3RhbGwuaW5zdGFsbGVkLFxuICAgIFwibm90IGluc3RhbGxlZC4gTWFrZSBzdXJlIHRvIGNhbGwgYFZ1ZS51c2UoVnVlUm91dGVyKWAgXCIgK1xuICAgIFwiYmVmb3JlIGNyZWF0aW5nIHJvb3QgaW5zdGFuY2UuXCJcbiAgKTtcblxuICB0aGlzLmFwcHMucHVzaChhcHApO1xuXG4gIC8vIG1haW4gYXBwIGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gIGlmICh0aGlzLmFwcCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdGhpcy5hcHAgPSBhcHA7XG5cbiAgdmFyIGhpc3RvcnkgPSB0aGlzLmhpc3Rvcnk7XG5cbiAgaWYgKGhpc3RvcnkgaW5zdGFuY2VvZiBIVE1MNUhpc3RvcnkpIHtcbiAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhoaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpKTtcbiAgfSBlbHNlIGlmIChoaXN0b3J5IGluc3RhbmNlb2YgSGFzaEhpc3RvcnkpIHtcbiAgICB2YXIgc2V0dXBIYXNoTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBoaXN0b3J5LnNldHVwTGlzdGVuZXJzKCk7XG4gICAgfTtcbiAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhcbiAgICAgIGhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCksXG4gICAgICBzZXR1cEhhc2hMaXN0ZW5lcixcbiAgICAgIHNldHVwSGFzaExpc3RlbmVyXG4gICAgKTtcbiAgfVxuXG4gIGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHRoaXMkMS5hcHBzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkge1xuICAgICAgYXBwLl9yb3V0ZSA9IHJvdXRlO1xuICAgIH0pO1xuICB9KTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlRWFjaCA9IGZ1bmN0aW9uIGJlZm9yZUVhY2ggKGZuKSB7XG4gIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5iZWZvcmVIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJlZm9yZVJlc29sdmUgPSBmdW5jdGlvbiBiZWZvcmVSZXNvbHZlIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMucmVzb2x2ZUhvb2tzLCBmbilcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWZ0ZXJFYWNoID0gZnVuY3Rpb24gYWZ0ZXJFYWNoIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYWZ0ZXJIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICB0aGlzLmhpc3Rvcnkub25SZWFkeShjYiwgZXJyb3JDYik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yIChlcnJvckNiKSB7XG4gIHRoaXMuaGlzdG9yeS5vbkVycm9yKGVycm9yQ2IpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgdGhpcy5oaXN0b3J5LnB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgdGhpcy5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gIHRoaXMuaGlzdG9yeS5nbyhuKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmFjayA9IGZ1bmN0aW9uIGJhY2sgKCkge1xuICB0aGlzLmdvKC0xKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uIGZvcndhcmQgKCkge1xuICB0aGlzLmdvKDEpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5nZXRNYXRjaGVkQ29tcG9uZW50cyA9IGZ1bmN0aW9uIGdldE1hdGNoZWRDb21wb25lbnRzICh0bykge1xuICB2YXIgcm91dGUgPSB0b1xuICAgID8gdG8ubWF0Y2hlZFxuICAgICAgPyB0b1xuICAgICAgOiB0aGlzLnJlc29sdmUodG8pLnJvdXRlXG4gICAgOiB0aGlzLmN1cnJlbnRSb3V0ZTtcbiAgaWYgKCFyb3V0ZSkge1xuICAgIHJldHVybiBbXVxuICB9XG4gIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIHJvdXRlLm1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBtLmNvbXBvbmVudHNba2V5XVxuICAgIH0pXG4gIH0pKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSAoXG4gIHRvLFxuICBjdXJyZW50LFxuICBhcHBlbmRcbikge1xuICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVMb2NhdGlvbihcbiAgICB0byxcbiAgICBjdXJyZW50IHx8IHRoaXMuaGlzdG9yeS5jdXJyZW50LFxuICAgIGFwcGVuZCxcbiAgICB0aGlzXG4gICk7XG4gIHZhciByb3V0ZSA9IHRoaXMubWF0Y2gobG9jYXRpb24sIGN1cnJlbnQpO1xuICB2YXIgZnVsbFBhdGggPSByb3V0ZS5yZWRpcmVjdGVkRnJvbSB8fCByb3V0ZS5mdWxsUGF0aDtcbiAgdmFyIGJhc2UgPSB0aGlzLmhpc3RvcnkuYmFzZTtcbiAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGJhc2UsIGZ1bGxQYXRoLCB0aGlzLm1vZGUpO1xuICByZXR1cm4ge1xuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICByb3V0ZTogcm91dGUsXG4gICAgaHJlZjogaHJlZixcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIG5vcm1hbGl6ZWRUbzogbG9jYXRpb24sXG4gICAgcmVzb2x2ZWQ6IHJvdXRlXG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWRkUm91dGVzID0gZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgdGhpcy5tYXRjaGVyLmFkZFJvdXRlcyhyb3V0ZXMpO1xuICBpZiAodGhpcy5oaXN0b3J5LmN1cnJlbnQgIT09IFNUQVJUKSB7XG4gICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlUm91dGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySG9vayAobGlzdCwgZm4pIHtcbiAgbGlzdC5wdXNoKGZuKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IGxpc3QuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkgeyBsaXN0LnNwbGljZShpLCAxKTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhyZWYgKGJhc2UsIGZ1bGxQYXRoLCBtb2RlKSB7XG4gIHZhciBwYXRoID0gbW9kZSA9PT0gJ2hhc2gnID8gJyMnICsgZnVsbFBhdGggOiBmdWxsUGF0aDtcbiAgcmV0dXJuIGJhc2UgPyBjbGVhblBhdGgoYmFzZSArICcvJyArIHBhdGgpIDogcGF0aFxufVxuXG5WdWVSb3V0ZXIuaW5zdGFsbCA9IGluc3RhbGw7XG5WdWVSb3V0ZXIudmVyc2lvbiA9ICczLjAuMic7XG5cbmlmIChpbkJyb3dzZXIgJiYgd2luZG93LlZ1ZSkge1xuICB3aW5kb3cuVnVlLnVzZShWdWVSb3V0ZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWdWVSb3V0ZXI7XG4iLCIndXNlIHN0cmljdCdcclxuXHJcbi8qKlxyXG4gKiBGaWxlIEltcG9ydCBBc3Npc3RhbnQuXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXHJcbiAqIEByZXR1cm4ge2Z1bmN0aW9uKCk6IChQcm9taXNlPCo+fCopfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWQobmFtZSkge1xyXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG5cdHJldHVybiAoKSA9PiBpbXBvcnQoYEAvJHtuYW1lfS52dWVgKVxyXG59XHJcblxyXG4vKipcclxuICogRmlsZSBJbXBvcnQgQXNzaXN0YW50IChDb21wb25lbnQpLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29tcG9uZW50XHJcbiAqIEByZXR1cm4ge2Z1bmN0aW9uKCk6IChQcm9taXNlPCo+fCopfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDb21wb25lbnQoY29tcG9uZW50KSB7XHJcblx0cmV0dXJuIGxvYWQoYGNvbXBvbmVudHMvJHtjb21wb25lbnR9YClcclxufVxyXG5cclxuLyoqXHJcbiAqIEZpbGUgSW1wb3J0IEFzc2lzdGFudCAoQ29tcG9uZW50KS5cclxuICogQHBhcmFtIHtTdHJpbmd9IHBhZ2VcclxuICogQHJldHVybiB7ZnVuY3Rpb24oKTogKFByb21pc2U8Kj58Kil9XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9hZFBhZ2UocGFnZSkge1xyXG5cdHJldHVybiBsb2FkKGBwYWdlcy8ke3BhZ2V9YClcclxufVxyXG5cclxuLyoqXHJcbiAqIEZpbGUgSW1wb3J0IEFzc2lzdGFudCAoTGF5b3V0KS5cclxuICogQHBhcmFtIHtTdHJpbmd9IGxheW91dFxyXG4gKiBAcmV0dXJuIHtmdW5jdGlvbigpOiAoUHJvbWlzZTwqPnwqKX1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkTGF5b3V0KGxheW91dCkge1xyXG5cdHJldHVybiBsb2FkKGBsYXlvdXRzLyR7bGF5b3V0fWApXHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgeyBsb2FkUGFnZSwgbG9hZExheW91dCB9IGZyb20gJy4vaGVscGVyJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgW1xyXG5cdHtcclxuXHRcdHBhdGg6ICcnLFxyXG5cdFx0Y29tcG9uZW50OiBsb2FkTGF5b3V0KCdOb3RBdXRob3JpemVkJyksXHJcblx0XHRjaGlsZHJlbjogW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGF0aDogJy9hdXRoJyxcclxuXHRcdFx0XHRuYW1lOiAnYXV0aCcsXHJcblx0XHRcdFx0Y29tcG9uZW50OiBsb2FkUGFnZSgnQXV0aCcpXHJcblx0XHRcdH1cclxuXHRcdF1cclxuXHR9LFxyXG5cdHtcclxuXHRcdHBhdGg6ICcnLFxyXG5cdFx0Y29tcG9uZW50OiBsb2FkTGF5b3V0KCdEZWZhdWx0JyksXHJcblx0XHRjaGlsZHJlbjogW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGF0aDogJy9kYXNoYm9hcmQnLFxyXG5cdFx0XHRcdG5hbWU6ICdkYXNoYm9hcmQnLFxyXG5cdFx0XHRcdGNvbXBvbmVudDogbG9hZFBhZ2UoJ0Rhc2hib2FyZCcpXHJcblx0XHRcdH1cclxuXHRcdF1cclxuXHR9XHJcbl1cclxuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgVnVlUm91dGVyIGZyb20gJ3Z1ZS1yb3V0ZXInXHJcbmltcG9ydCByb3V0ZXMgZnJvbSAnLi9yb3V0ZXMnXHJcbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5cclxuVnVlLnVzZShWdWVSb3V0ZXIpXHJcblxyXG5jb25zdCByb3V0ZXIgPSBuZXcgVnVlUm91dGVyKHtcclxuXHRzY3JvbGxCZWhhdmlvcjogKCkgPT4gKHsgeTogMCB9KSxcclxuXHRyb3V0ZXNcclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlclxyXG4iLCIndXNlIHN0cmljdCdcclxuXHJcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi9yb3V0ZXInXHJcblxyXG4vLyBUT0RPIEd1YXJkXHJcblxyXG5leHBvcnQgZGVmYXVsdCByb3V0ZXJcclxuIiwiLyoqXG4gKiB2dWV4IHYzLjAuMVxuICogKGMpIDIwMTcgRXZhbiBZb3VcbiAqIEBsaWNlbnNlIE1JVFxuICovXG52YXIgYXBwbHlNaXhpbiA9IGZ1bmN0aW9uIChWdWUpIHtcbiAgdmFyIHZlcnNpb24gPSBOdW1iZXIoVnVlLnZlcnNpb24uc3BsaXQoJy4nKVswXSk7XG5cbiAgaWYgKHZlcnNpb24gPj0gMikge1xuICAgIFZ1ZS5taXhpbih7IGJlZm9yZUNyZWF0ZTogdnVleEluaXQgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3ZlcnJpZGUgaW5pdCBhbmQgaW5qZWN0IHZ1ZXggaW5pdCBwcm9jZWR1cmVcbiAgICAvLyBmb3IgMS54IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgIHZhciBfaW5pdCA9IFZ1ZS5wcm90b3R5cGUuX2luaXQ7XG4gICAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAgICAgb3B0aW9ucy5pbml0ID0gb3B0aW9ucy5pbml0XG4gICAgICAgID8gW3Z1ZXhJbml0XS5jb25jYXQob3B0aW9ucy5pbml0KVxuICAgICAgICA6IHZ1ZXhJbml0O1xuICAgICAgX2luaXQuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFZ1ZXggaW5pdCBob29rLCBpbmplY3RlZCBpbnRvIGVhY2ggaW5zdGFuY2VzIGluaXQgaG9va3MgbGlzdC5cbiAgICovXG5cbiAgZnVuY3Rpb24gdnVleEluaXQgKCkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgICAvLyBzdG9yZSBpbmplY3Rpb25cbiAgICBpZiAob3B0aW9ucy5zdG9yZSkge1xuICAgICAgdGhpcy4kc3RvcmUgPSB0eXBlb2Ygb3B0aW9ucy5zdG9yZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IG9wdGlvbnMuc3RvcmUoKVxuICAgICAgICA6IG9wdGlvbnMuc3RvcmU7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC4kc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gb3B0aW9ucy5wYXJlbnQuJHN0b3JlO1xuICAgIH1cbiAgfVxufTtcblxudmFyIGRldnRvb2xIb29rID1cbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbmZ1bmN0aW9uIGRldnRvb2xQbHVnaW4gKHN0b3JlKSB7XG4gIGlmICghZGV2dG9vbEhvb2spIHsgcmV0dXJuIH1cblxuICBzdG9yZS5fZGV2dG9vbEhvb2sgPSBkZXZ0b29sSG9vaztcblxuICBkZXZ0b29sSG9vay5lbWl0KCd2dWV4OmluaXQnLCBzdG9yZSk7XG5cbiAgZGV2dG9vbEhvb2sub24oJ3Z1ZXg6dHJhdmVsLXRvLXN0YXRlJywgZnVuY3Rpb24gKHRhcmdldFN0YXRlKSB7XG4gICAgc3RvcmUucmVwbGFjZVN0YXRlKHRhcmdldFN0YXRlKTtcbiAgfSk7XG5cbiAgc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uIChtdXRhdGlvbiwgc3RhdGUpIHtcbiAgICBkZXZ0b29sSG9vay5lbWl0KCd2dWV4Om11dGF0aW9uJywgbXV0YXRpb24sIHN0YXRlKTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBmaXJzdCBpdGVtIHRoYXQgcGFzcyB0aGUgdGVzdFxuICogYnkgc2Vjb25kIGFyZ3VtZW50IGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gbGlzdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZlxuICogQHJldHVybiB7Kn1cbiAqL1xuLyoqXG4gKiBEZWVwIGNvcHkgdGhlIGdpdmVuIG9iamVjdCBjb25zaWRlcmluZyBjaXJjdWxhciBzdHJ1Y3R1cmUuXG4gKiBUaGlzIGZ1bmN0aW9uIGNhY2hlcyBhbGwgbmVzdGVkIG9iamVjdHMgYW5kIGl0cyBjb3BpZXMuXG4gKiBJZiBpdCBkZXRlY3RzIGNpcmN1bGFyIHN0cnVjdHVyZSwgdXNlIGNhY2hlZCBjb3B5IHRvIGF2b2lkIGluZmluaXRlIGxvb3AuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gY2FjaGVcbiAqIEByZXR1cm4geyp9XG4gKi9cblxuXG4vKipcbiAqIGZvckVhY2ggZm9yIG9iamVjdFxuICovXG5mdW5jdGlvbiBmb3JFYWNoVmFsdWUgKG9iaiwgZm4pIHtcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZuKG9ialtrZXldLCBrZXkpOyB9KTtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiB2YWwgJiYgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nXG59XG5cbmZ1bmN0aW9uIGFzc2VydCAoY29uZGl0aW9uLCBtc2cpIHtcbiAgaWYgKCFjb25kaXRpb24pIHsgdGhyb3cgbmV3IEVycm9yKChcIlt2dWV4XSBcIiArIG1zZykpIH1cbn1cblxudmFyIE1vZHVsZSA9IGZ1bmN0aW9uIE1vZHVsZSAocmF3TW9kdWxlLCBydW50aW1lKSB7XG4gIHRoaXMucnVudGltZSA9IHJ1bnRpbWU7XG4gIHRoaXMuX2NoaWxkcmVuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fcmF3TW9kdWxlID0gcmF3TW9kdWxlO1xuICB2YXIgcmF3U3RhdGUgPSByYXdNb2R1bGUuc3RhdGU7XG4gIHRoaXMuc3RhdGUgPSAodHlwZW9mIHJhd1N0YXRlID09PSAnZnVuY3Rpb24nID8gcmF3U3RhdGUoKSA6IHJhd1N0YXRlKSB8fCB7fTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSA9IHsgbmFtZXNwYWNlZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5uYW1lc3BhY2VkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWRcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiBhZGRDaGlsZCAoa2V5LCBtb2R1bGUpIHtcbiAgdGhpcy5fY2hpbGRyZW5ba2V5XSA9IG1vZHVsZTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCAoa2V5KSB7XG4gIGRlbGV0ZSB0aGlzLl9jaGlsZHJlbltrZXldO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5nZXRDaGlsZCA9IGZ1bmN0aW9uIGdldENoaWxkIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW2tleV1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChyYXdNb2R1bGUpIHtcbiAgdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWQgPSByYXdNb2R1bGUubmFtZXNwYWNlZDtcbiAgaWYgKHJhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMgPSByYXdNb2R1bGUuYWN0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMgPSByYXdNb2R1bGUubXV0YXRpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzID0gcmF3TW9kdWxlLmdldHRlcnM7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gZm9yRWFjaENoaWxkIChmbikge1xuICBmb3JFYWNoVmFsdWUodGhpcy5fY2hpbGRyZW4sIGZuKTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEdldHRlciA9IGZ1bmN0aW9uIGZvckVhY2hHZXR0ZXIgKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hBY3Rpb24gPSBmdW5jdGlvbiBmb3JFYWNoQWN0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoTXV0YXRpb24gPSBmdW5jdGlvbiBmb3JFYWNoTXV0YXRpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1vZHVsZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxICk7XG5cbnZhciBNb2R1bGVDb2xsZWN0aW9uID0gZnVuY3Rpb24gTW9kdWxlQ29sbGVjdGlvbiAocmF3Um9vdE1vZHVsZSkge1xuICAvLyByZWdpc3RlciByb290IG1vZHVsZSAoVnVleC5TdG9yZSBvcHRpb25zKVxuICB0aGlzLnJlZ2lzdGVyKFtdLCByYXdSb290TW9kdWxlLCBmYWxzZSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChtb2R1bGUsIGtleSkge1xuICAgIHJldHVybiBtb2R1bGUuZ2V0Q2hpbGQoa2V5KVxuICB9LCB0aGlzLnJvb3QpXG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXROYW1lc3BhY2UgPSBmdW5jdGlvbiBnZXROYW1lc3BhY2UgKHBhdGgpIHtcbiAgdmFyIG1vZHVsZSA9IHRoaXMucm9vdDtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGtleSkge1xuICAgIG1vZHVsZSA9IG1vZHVsZS5nZXRDaGlsZChrZXkpO1xuICAgIHJldHVybiBuYW1lc3BhY2UgKyAobW9kdWxlLm5hbWVzcGFjZWQgPyBrZXkgKyAnLycgOiAnJylcbiAgfSwgJycpXG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUkMSAocmF3Um9vdE1vZHVsZSkge1xuICB1cGRhdGUoW10sIHRoaXMucm9vdCwgcmF3Um9vdE1vZHVsZSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyIChwYXRoLCByYXdNb2R1bGUsIHJ1bnRpbWUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICBpZiAoIHJ1bnRpbWUgPT09IHZvaWQgMCApIHJ1bnRpbWUgPSB0cnVlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIHJhd01vZHVsZSk7XG4gIH1cblxuICB2YXIgbmV3TW9kdWxlID0gbmV3IE1vZHVsZShyYXdNb2R1bGUsIHJ1bnRpbWUpO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLnJvb3QgPSBuZXdNb2R1bGU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBwYXJlbnQuYWRkQ2hpbGQocGF0aFtwYXRoLmxlbmd0aCAtIDFdLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKHJhd01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZS5tb2R1bGVzLCBmdW5jdGlvbiAocmF3Q2hpbGRNb2R1bGUsIGtleSkge1xuICAgICAgdGhpcyQxLnJlZ2lzdGVyKHBhdGguY29uY2F0KGtleSksIHJhd0NoaWxkTW9kdWxlLCBydW50aW1lKTtcbiAgICB9KTtcbiAgfVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIgKHBhdGgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgdmFyIGtleSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgaWYgKCFwYXJlbnQuZ2V0Q2hpbGQoa2V5KS5ydW50aW1lKSB7IHJldHVybiB9XG5cbiAgcGFyZW50LnJlbW92ZUNoaWxkKGtleSk7XG59O1xuXG5mdW5jdGlvbiB1cGRhdGUgKHBhdGgsIHRhcmdldE1vZHVsZSwgbmV3TW9kdWxlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIG5ld01vZHVsZSk7XG4gIH1cblxuICAvLyB1cGRhdGUgdGFyZ2V0IG1vZHVsZVxuICB0YXJnZXRNb2R1bGUudXBkYXRlKG5ld01vZHVsZSk7XG5cbiAgLy8gdXBkYXRlIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChuZXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvciAodmFyIGtleSBpbiBuZXdNb2R1bGUubW9kdWxlcykge1xuICAgICAgaWYgKCF0YXJnZXRNb2R1bGUuZ2V0Q2hpbGQoa2V5KSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiW3Z1ZXhdIHRyeWluZyB0byBhZGQgYSBuZXcgbW9kdWxlICdcIiArIGtleSArIFwiJyBvbiBob3QgcmVsb2FkaW5nLCBcIiArXG4gICAgICAgICAgICAnbWFudWFsIHJlbG9hZCBpcyBuZWVkZWQnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHVwZGF0ZShcbiAgICAgICAgcGF0aC5jb25jYXQoa2V5KSxcbiAgICAgICAgdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSksXG4gICAgICAgIG5ld01vZHVsZS5tb2R1bGVzW2tleV1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBmdW5jdGlvbkFzc2VydCA9IHtcbiAgYXNzZXJ0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzsgfSxcbiAgZXhwZWN0ZWQ6ICdmdW5jdGlvbidcbn07XG5cbnZhciBvYmplY3RBc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUuaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJyk7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggXCJoYW5kbGVyXCIgZnVuY3Rpb24nXG59O1xuXG52YXIgYXNzZXJ0VHlwZXMgPSB7XG4gIGdldHRlcnM6IGZ1bmN0aW9uQXNzZXJ0LFxuICBtdXRhdGlvbnM6IGZ1bmN0aW9uQXNzZXJ0LFxuICBhY3Rpb25zOiBvYmplY3RBc3NlcnRcbn07XG5cbmZ1bmN0aW9uIGFzc2VydFJhd01vZHVsZSAocGF0aCwgcmF3TW9kdWxlKSB7XG4gIE9iamVjdC5rZXlzKGFzc2VydFR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIXJhd01vZHVsZVtrZXldKSB7IHJldHVybiB9XG5cbiAgICB2YXIgYXNzZXJ0T3B0aW9ucyA9IGFzc2VydFR5cGVzW2tleV07XG5cbiAgICBmb3JFYWNoVmFsdWUocmF3TW9kdWxlW2tleV0sIGZ1bmN0aW9uICh2YWx1ZSwgdHlwZSkge1xuICAgICAgYXNzZXJ0KFxuICAgICAgICBhc3NlcnRPcHRpb25zLmFzc2VydCh2YWx1ZSksXG4gICAgICAgIG1ha2VBc3NlcnRpb25NZXNzYWdlKHBhdGgsIGtleSwgdHlwZSwgdmFsdWUsIGFzc2VydE9wdGlvbnMuZXhwZWN0ZWQpXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFrZUFzc2VydGlvbk1lc3NhZ2UgKHBhdGgsIGtleSwgdHlwZSwgdmFsdWUsIGV4cGVjdGVkKSB7XG4gIHZhciBidWYgPSBrZXkgKyBcIiBzaG91bGQgYmUgXCIgKyBleHBlY3RlZCArIFwiIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIi5cIiArIHR5cGUgKyBcIlxcXCJcIjtcbiAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgIGJ1ZiArPSBcIiBpbiBtb2R1bGUgXFxcIlwiICsgKHBhdGguam9pbignLicpKSArIFwiXFxcIlwiO1xuICB9XG4gIGJ1ZiArPSBcIiBpcyBcIiArIChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpICsgXCIuXCI7XG4gIHJldHVybiBidWZcbn1cblxudmFyIFZ1ZTsgLy8gYmluZCBvbiBpbnN0YWxsXG5cbnZhciBTdG9yZSA9IGZ1bmN0aW9uIFN0b3JlIChvcHRpb25zKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAvLyBBdXRvIGluc3RhbGwgaWYgaXQgaXMgbm90IGRvbmUgeWV0IGFuZCBgd2luZG93YCBoYXMgYFZ1ZWAuXG4gIC8vIFRvIGFsbG93IHVzZXJzIHRvIGF2b2lkIGF1dG8taW5zdGFsbGF0aW9uIGluIHNvbWUgY2FzZXMsXG4gIC8vIHRoaXMgY29kZSBzaG91bGQgYmUgcGxhY2VkIGhlcmUuIFNlZSAjNzMxXG4gIGlmICghVnVlICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WdWUpIHtcbiAgICBpbnN0YWxsKHdpbmRvdy5WdWUpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoVnVlLCBcIm11c3QgY2FsbCBWdWUudXNlKFZ1ZXgpIGJlZm9yZSBjcmVhdGluZyBhIHN0b3JlIGluc3RhbmNlLlwiKTtcbiAgICBhc3NlcnQodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnLCBcInZ1ZXggcmVxdWlyZXMgYSBQcm9taXNlIHBvbHlmaWxsIGluIHRoaXMgYnJvd3Nlci5cIik7XG4gICAgYXNzZXJ0KHRoaXMgaW5zdGFuY2VvZiBTdG9yZSwgXCJTdG9yZSBtdXN0IGJlIGNhbGxlZCB3aXRoIHRoZSBuZXcgb3BlcmF0b3IuXCIpO1xuICB9XG5cbiAgdmFyIHBsdWdpbnMgPSBvcHRpb25zLnBsdWdpbnM7IGlmICggcGx1Z2lucyA9PT0gdm9pZCAwICkgcGx1Z2lucyA9IFtdO1xuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3Q7IGlmICggc3RyaWN0ID09PSB2b2lkIDAgKSBzdHJpY3QgPSBmYWxzZTtcblxuICB2YXIgc3RhdGUgPSBvcHRpb25zLnN0YXRlOyBpZiAoIHN0YXRlID09PSB2b2lkIDAgKSBzdGF0ZSA9IHt9O1xuICBpZiAodHlwZW9mIHN0YXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc3RhdGUgPSBzdGF0ZSgpIHx8IHt9O1xuICB9XG5cbiAgLy8gc3RvcmUgaW50ZXJuYWwgc3RhdGVcbiAgdGhpcy5fY29tbWl0dGluZyA9IGZhbHNlO1xuICB0aGlzLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9tb2R1bGVzID0gbmV3IE1vZHVsZUNvbGxlY3Rpb24ob3B0aW9ucyk7XG4gIHRoaXMuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl93YXRjaGVyVk0gPSBuZXcgVnVlKCk7XG5cbiAgLy8gYmluZCBjb21taXQgYW5kIGRpc3BhdGNoIHRvIHNlbGZcbiAgdmFyIHN0b3JlID0gdGhpcztcbiAgdmFyIHJlZiA9IHRoaXM7XG4gIHZhciBkaXNwYXRjaCA9IHJlZi5kaXNwYXRjaDtcbiAgdmFyIGNvbW1pdCA9IHJlZi5jb21taXQ7XG4gIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiBib3VuZERpc3BhdGNoICh0eXBlLCBwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoLmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQpXG4gIH07XG4gIHRoaXMuY29tbWl0ID0gZnVuY3Rpb24gYm91bmRDb21taXQgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tbWl0LmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpXG4gIH07XG5cbiAgLy8gc3RyaWN0IG1vZGVcbiAgdGhpcy5zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgLy8gaW5pdCByb290IG1vZHVsZS5cbiAgLy8gdGhpcyBhbHNvIHJlY3Vyc2l2ZWx5IHJlZ2lzdGVycyBhbGwgc3ViLW1vZHVsZXNcbiAgLy8gYW5kIGNvbGxlY3RzIGFsbCBtb2R1bGUgZ2V0dGVycyBpbnNpZGUgdGhpcy5fd3JhcHBlZEdldHRlcnNcbiAgaW5zdGFsbE1vZHVsZSh0aGlzLCBzdGF0ZSwgW10sIHRoaXMuX21vZHVsZXMucm9vdCk7XG5cbiAgLy8gaW5pdGlhbGl6ZSB0aGUgc3RvcmUgdm0sIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgcmVhY3Rpdml0eVxuICAvLyAoYWxzbyByZWdpc3RlcnMgX3dyYXBwZWRHZXR0ZXJzIGFzIGNvbXB1dGVkIHByb3BlcnRpZXMpXG4gIHJlc2V0U3RvcmVWTSh0aGlzLCBzdGF0ZSk7XG5cbiAgLy8gYXBwbHkgcGx1Z2luc1xuICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikgeyByZXR1cm4gcGx1Z2luKHRoaXMkMSk7IH0pO1xuXG4gIGlmIChWdWUuY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbFBsdWdpbih0aGlzKTtcbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgc3RhdGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzLnN0YXRlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3ZtLl9kYXRhLiQkc3RhdGVcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5zdGF0ZS5zZXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChmYWxzZSwgXCJVc2Ugc3RvcmUucmVwbGFjZVN0YXRlKCkgdG8gZXhwbGljaXQgcmVwbGFjZSBzdG9yZSBzdGF0ZS5cIik7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5jb21taXQgPSBmdW5jdGlvbiBjb21taXQgKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyBjaGVjayBvYmplY3Qtc3R5bGUgY29tbWl0XG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgdmFyIHBheWxvYWQgPSByZWYucGF5bG9hZDtcbiAgICB2YXIgb3B0aW9ucyA9IHJlZi5vcHRpb25zO1xuXG4gIHZhciBtdXRhdGlvbiA9IHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCB9O1xuICB2YXIgZW50cnkgPSB0aGlzLl9tdXRhdGlvbnNbdHlwZV07XG4gIGlmICghZW50cnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgZW50cnkuZm9yRWFjaChmdW5jdGlvbiBjb21taXRJdGVyYXRvciAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcihwYXlsb2FkKTtcbiAgICB9KTtcbiAgfSk7XG4gIHRoaXMuX3N1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViKG11dGF0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcblxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnRcbiAgKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJbdnVleF0gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlICsgXCIuIFNpbGVudCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gXCIgK1xuICAgICAgJ1VzZSB0aGUgZmlsdGVyIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHZ1ZS1kZXZ0b29scydcbiAgICApO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCAoX3R5cGUsIF9wYXlsb2FkKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGRpc3BhdGNoXG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuXG4gIHZhciBhY3Rpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fYWN0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGFjdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1YihhY3Rpb24sIHRoaXMkMS5zdGF0ZSk7IH0pO1xuXG4gIHJldHVybiBlbnRyeS5sZW5ndGggPiAxXG4gICAgPyBQcm9taXNlLmFsbChlbnRyeS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGhhbmRsZXIocGF5bG9hZCk7IH0pKVxuICAgIDogZW50cnlbMF0ocGF5bG9hZClcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUgKGZuKSB7XG4gIHJldHVybiBnZW5lcmljU3Vic2NyaWJlKGZuLCB0aGlzLl9zdWJzY3JpYmVycylcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmVBY3Rpb24gPSBmdW5jdGlvbiBzdWJzY3JpYmVBY3Rpb24gKGZuKSB7XG4gIHJldHVybiBnZW5lcmljU3Vic2NyaWJlKGZuLCB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycylcbn07XG5cblN0b3JlLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uIHdhdGNoIChnZXR0ZXIsIGNiLCBvcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIGdldHRlciA9PT0gJ2Z1bmN0aW9uJywgXCJzdG9yZS53YXRjaCBvbmx5IGFjY2VwdHMgYSBmdW5jdGlvbi5cIik7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX3dhdGNoZXJWTS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0dGVyKHRoaXMkMS5zdGF0ZSwgdGhpcyQxLmdldHRlcnMpOyB9LCBjYiwgb3B0aW9ucylcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZXBsYWNlU3RhdGUgPSBmdW5jdGlvbiByZXBsYWNlU3RhdGUgKHN0YXRlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgdGhpcyQxLl92bS5fZGF0YS4kJHN0YXRlID0gc3RhdGU7XG4gIH0pO1xufTtcblxuU3RvcmUucHJvdG90eXBlLnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gcmVnaXN0ZXJNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSwgb3B0aW9ucykge1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gICAgYXNzZXJ0KHBhdGgubGVuZ3RoID4gMCwgJ2Nhbm5vdCByZWdpc3RlciB0aGUgcm9vdCBtb2R1bGUgYnkgdXNpbmcgcmVnaXN0ZXJNb2R1bGUuJyk7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnJlZ2lzdGVyKHBhdGgsIHJhd01vZHVsZSk7XG4gIGluc3RhbGxNb2R1bGUodGhpcywgdGhpcy5zdGF0ZSwgcGF0aCwgdGhpcy5fbW9kdWxlcy5nZXQocGF0aCksIG9wdGlvbnMucHJlc2VydmVTdGF0ZSk7XG4gIC8vIHJlc2V0IHN0b3JlIHRvIHVwZGF0ZSBnZXR0ZXJzLi4uXG4gIHJlc2V0U3RvcmVWTSh0aGlzLCB0aGlzLnN0YXRlKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS51bnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gdW5yZWdpc3Rlck1vZHVsZSAocGF0aCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnVucmVnaXN0ZXIocGF0aCk7XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHRoaXMkMS5zdGF0ZSwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIFZ1ZS5kZWxldGUocGFyZW50U3RhdGUsIHBhdGhbcGF0aC5sZW5ndGggLSAxXSk7XG4gIH0pO1xuICByZXNldFN0b3JlKHRoaXMpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLmhvdFVwZGF0ZSA9IGZ1bmN0aW9uIGhvdFVwZGF0ZSAobmV3T3B0aW9ucykge1xuICB0aGlzLl9tb2R1bGVzLnVwZGF0ZShuZXdPcHRpb25zKTtcbiAgcmVzZXRTdG9yZSh0aGlzLCB0cnVlKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5fd2l0aENvbW1pdCA9IGZ1bmN0aW9uIF93aXRoQ29tbWl0IChmbikge1xuICB2YXIgY29tbWl0dGluZyA9IHRoaXMuX2NvbW1pdHRpbmc7XG4gIHRoaXMuX2NvbW1pdHRpbmcgPSB0cnVlO1xuICBmbigpO1xuICB0aGlzLl9jb21taXR0aW5nID0gY29tbWl0dGluZztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTdG9yZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG5mdW5jdGlvbiBnZW5lcmljU3Vic2NyaWJlIChmbiwgc3Vicykge1xuICBpZiAoc3Vicy5pbmRleE9mKGZuKSA8IDApIHtcbiAgICBzdWJzLnB1c2goZm4pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBzdWJzLmluZGV4T2YoZm4pO1xuICAgIGlmIChpID4gLTEpIHtcbiAgICAgIHN1YnMuc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlIChzdG9yZSwgaG90KSB7XG4gIHN0b3JlLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX211dGF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl93cmFwcGVkR2V0dGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHN0YXRlID0gc3RvcmUuc3RhdGU7XG4gIC8vIGluaXQgYWxsIG1vZHVsZXNcbiAgaW5zdGFsbE1vZHVsZShzdG9yZSwgc3RhdGUsIFtdLCBzdG9yZS5fbW9kdWxlcy5yb290LCB0cnVlKTtcbiAgLy8gcmVzZXQgdm1cbiAgcmVzZXRTdG9yZVZNKHN0b3JlLCBzdGF0ZSwgaG90KTtcbn1cblxuZnVuY3Rpb24gcmVzZXRTdG9yZVZNIChzdG9yZSwgc3RhdGUsIGhvdCkge1xuICB2YXIgb2xkVm0gPSBzdG9yZS5fdm07XG5cbiAgLy8gYmluZCBzdG9yZSBwdWJsaWMgZ2V0dGVyc1xuICBzdG9yZS5nZXR0ZXJzID0ge307XG4gIHZhciB3cmFwcGVkR2V0dGVycyA9IHN0b3JlLl93cmFwcGVkR2V0dGVycztcbiAgdmFyIGNvbXB1dGVkID0ge307XG4gIGZvckVhY2hWYWx1ZSh3cmFwcGVkR2V0dGVycywgZnVuY3Rpb24gKGZuLCBrZXkpIHtcbiAgICAvLyB1c2UgY29tcHV0ZWQgdG8gbGV2ZXJhZ2UgaXRzIGxhenktY2FjaGluZyBtZWNoYW5pc21cbiAgICBjb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZm4oc3RvcmUpOyB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdG9yZS5nZXR0ZXJzLCBrZXksIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuX3ZtW2tleV07IH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlIC8vIGZvciBsb2NhbCBnZXR0ZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIHVzZSBhIFZ1ZSBpbnN0YW5jZSB0byBzdG9yZSB0aGUgc3RhdGUgdHJlZVxuICAvLyBzdXBwcmVzcyB3YXJuaW5ncyBqdXN0IGluIGNhc2UgdGhlIHVzZXIgaGFzIGFkZGVkXG4gIC8vIHNvbWUgZnVua3kgZ2xvYmFsIG1peGluc1xuICB2YXIgc2lsZW50ID0gVnVlLmNvbmZpZy5zaWxlbnQ7XG4gIFZ1ZS5jb25maWcuc2lsZW50ID0gdHJ1ZTtcbiAgc3RvcmUuX3ZtID0gbmV3IFZ1ZSh7XG4gICAgZGF0YToge1xuICAgICAgJCRzdGF0ZTogc3RhdGVcbiAgICB9LFxuICAgIGNvbXB1dGVkOiBjb21wdXRlZFxuICB9KTtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSBzaWxlbnQ7XG5cbiAgLy8gZW5hYmxlIHN0cmljdCBtb2RlIGZvciBuZXcgdm1cbiAgaWYgKHN0b3JlLnN0cmljdCkge1xuICAgIGVuYWJsZVN0cmljdE1vZGUoc3RvcmUpO1xuICB9XG5cbiAgaWYgKG9sZFZtKSB7XG4gICAgaWYgKGhvdCkge1xuICAgICAgLy8gZGlzcGF0Y2ggY2hhbmdlcyBpbiBhbGwgc3Vic2NyaWJlZCB3YXRjaGVyc1xuICAgICAgLy8gdG8gZm9yY2UgZ2V0dGVyIHJlLWV2YWx1YXRpb24gZm9yIGhvdCByZWxvYWRpbmcuXG4gICAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9sZFZtLl9kYXRhLiQkc3RhdGUgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFZ1ZS5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJldHVybiBvbGRWbS4kZGVzdHJveSgpOyB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsTW9kdWxlIChzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLCBtb2R1bGUsIGhvdCkge1xuICB2YXIgaXNSb290ID0gIXBhdGgubGVuZ3RoO1xuICB2YXIgbmFtZXNwYWNlID0gc3RvcmUuX21vZHVsZXMuZ2V0TmFtZXNwYWNlKHBhdGgpO1xuXG4gIC8vIHJlZ2lzdGVyIGluIG5hbWVzcGFjZSBtYXBcbiAgaWYgKG1vZHVsZS5uYW1lc3BhY2VkKSB7XG4gICAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSA9IG1vZHVsZTtcbiAgfVxuXG4gIC8vIHNldCBzdGF0ZVxuICBpZiAoIWlzUm9vdCAmJiAhaG90KSB7XG4gICAgdmFyIHBhcmVudFN0YXRlID0gZ2V0TmVzdGVkU3RhdGUocm9vdFN0YXRlLCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgdmFyIG1vZHVsZU5hbWUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgVnVlLnNldChwYXJlbnRTdGF0ZSwgbW9kdWxlTmFtZSwgbW9kdWxlLnN0YXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBsb2NhbCA9IG1vZHVsZS5jb250ZXh0ID0gbWFrZUxvY2FsQ29udGV4dChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKTtcblxuICBtb2R1bGUuZm9yRWFjaE11dGF0aW9uKGZ1bmN0aW9uIChtdXRhdGlvbiwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyTXV0YXRpb24oc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBtdXRhdGlvbiwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEFjdGlvbihmdW5jdGlvbiAoYWN0aW9uLCBrZXkpIHtcbiAgICB2YXIgdHlwZSA9IGFjdGlvbi5yb290ID8ga2V5IDogbmFtZXNwYWNlICsga2V5O1xuICAgIHZhciBoYW5kbGVyID0gYWN0aW9uLmhhbmRsZXIgfHwgYWN0aW9uO1xuICAgIHJlZ2lzdGVyQWN0aW9uKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoR2V0dGVyKGZ1bmN0aW9uIChnZXR0ZXIsIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3RlckdldHRlcihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIGdldHRlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZCwga2V5KSB7XG4gICAgaW5zdGFsbE1vZHVsZShzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLmNvbmNhdChrZXkpLCBjaGlsZCwgaG90KTtcbiAgfSk7XG59XG5cbi8qKlxuICogbWFrZSBsb2NhbGl6ZWQgZGlzcGF0Y2gsIGNvbW1pdCwgZ2V0dGVycyBhbmQgc3RhdGVcbiAqIGlmIHRoZXJlIGlzIG5vIG5hbWVzcGFjZSwganVzdCB1c2Ugcm9vdCBvbmVzXG4gKi9cbmZ1bmN0aW9uIG1ha2VMb2NhbENvbnRleHQgKHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpIHtcbiAgdmFyIG5vTmFtZXNwYWNlID0gbmFtZXNwYWNlID09PSAnJztcblxuICB2YXIgbG9jYWwgPSB7XG4gICAgZGlzcGF0Y2g6IG5vTmFtZXNwYWNlID8gc3RvcmUuZGlzcGF0Y2ggOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0b3JlLl9hY3Rpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBhY3Rpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHR5cGUsIHBheWxvYWQpXG4gICAgfSxcblxuICAgIGNvbW1pdDogbm9OYW1lc3BhY2UgPyBzdG9yZS5jb21taXQgOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0b3JlLl9tdXRhdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIG11dGF0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0b3JlLmNvbW1pdCh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gZ2V0dGVycyBhbmQgc3RhdGUgb2JqZWN0IG11c3QgYmUgZ290dGVuIGxhemlseVxuICAvLyBiZWNhdXNlIHRoZXkgd2lsbCBiZSBjaGFuZ2VkIGJ5IHZtIHVwZGF0ZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsb2NhbCwge1xuICAgIGdldHRlcnM6IHtcbiAgICAgIGdldDogbm9OYW1lc3BhY2VcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFrZUxvY2FsR2V0dGVycyhzdG9yZSwgbmFtZXNwYWNlKTsgfVxuICAgIH0sXG4gICAgc3RhdGU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0TmVzdGVkU3RhdGUoc3RvcmUuc3RhdGUsIHBhdGgpOyB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbG9jYWxcbn1cblxuZnVuY3Rpb24gbWFrZUxvY2FsR2V0dGVycyAoc3RvcmUsIG5hbWVzcGFjZSkge1xuICB2YXIgZ2V0dGVyc1Byb3h5ID0ge307XG5cbiAgdmFyIHNwbGl0UG9zID0gbmFtZXNwYWNlLmxlbmd0aDtcbiAgT2JqZWN0LmtleXMoc3RvcmUuZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIC8vIHNraXAgaWYgdGhlIHRhcmdldCBnZXR0ZXIgaXMgbm90IG1hdGNoIHRoaXMgbmFtZXNwYWNlXG4gICAgaWYgKHR5cGUuc2xpY2UoMCwgc3BsaXRQb3MpICE9PSBuYW1lc3BhY2UpIHsgcmV0dXJuIH1cblxuICAgIC8vIGV4dHJhY3QgbG9jYWwgZ2V0dGVyIHR5cGVcbiAgICB2YXIgbG9jYWxUeXBlID0gdHlwZS5zbGljZShzcGxpdFBvcyk7XG5cbiAgICAvLyBBZGQgYSBwb3J0IHRvIHRoZSBnZXR0ZXJzIHByb3h5LlxuICAgIC8vIERlZmluZSBhcyBnZXR0ZXIgcHJvcGVydHkgYmVjYXVzZVxuICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIGV2YWx1YXRlIHRoZSBnZXR0ZXJzIGluIHRoaXMgdGltZS5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2V0dGVyc1Byb3h5LCBsb2NhbFR5cGUsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0dGVyc1t0eXBlXTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGdldHRlcnNQcm94eVxufVxuXG5mdW5jdGlvbiByZWdpc3Rlck11dGF0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX211dGF0aW9uc1t0eXBlXSB8fCAoc3RvcmUuX211dGF0aW9uc1t0eXBlXSA9IFtdKTtcbiAgZW50cnkucHVzaChmdW5jdGlvbiB3cmFwcGVkTXV0YXRpb25IYW5kbGVyIChwYXlsb2FkKSB7XG4gICAgaGFuZGxlci5jYWxsKHN0b3JlLCBsb2NhbC5zdGF0ZSwgcGF5bG9hZCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckFjdGlvbiAoc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKSB7XG4gIHZhciBlbnRyeSA9IHN0b3JlLl9hY3Rpb25zW3R5cGVdIHx8IChzdG9yZS5fYWN0aW9uc1t0eXBlXSA9IFtdKTtcbiAgZW50cnkucHVzaChmdW5jdGlvbiB3cmFwcGVkQWN0aW9uSGFuZGxlciAocGF5bG9hZCwgY2IpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5jYWxsKHN0b3JlLCB7XG4gICAgICBkaXNwYXRjaDogbG9jYWwuZGlzcGF0Y2gsXG4gICAgICBjb21taXQ6IGxvY2FsLmNvbW1pdCxcbiAgICAgIGdldHRlcnM6IGxvY2FsLmdldHRlcnMsXG4gICAgICBzdGF0ZTogbG9jYWwuc3RhdGUsXG4gICAgICByb290R2V0dGVyczogc3RvcmUuZ2V0dGVycyxcbiAgICAgIHJvb3RTdGF0ZTogc3RvcmUuc3RhdGVcbiAgICB9LCBwYXlsb2FkLCBjYik7XG4gICAgaWYgKCFpc1Byb21pc2UocmVzKSkge1xuICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKHJlcyk7XG4gICAgfVxuICAgIGlmIChzdG9yZS5fZGV2dG9vbEhvb2spIHtcbiAgICAgIHJldHVybiByZXMuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBzdG9yZS5fZGV2dG9vbEhvb2suZW1pdCgndnVleDplcnJvcicsIGVycik7XG4gICAgICAgIHRocm93IGVyclxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyR2V0dGVyIChzdG9yZSwgdHlwZSwgcmF3R2V0dGVyLCBsb2NhbCkge1xuICBpZiAoc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIGR1cGxpY2F0ZSBnZXR0ZXIga2V5OiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdID0gZnVuY3Rpb24gd3JhcHBlZEdldHRlciAoc3RvcmUpIHtcbiAgICByZXR1cm4gcmF3R2V0dGVyKFxuICAgICAgbG9jYWwuc3RhdGUsIC8vIGxvY2FsIHN0YXRlXG4gICAgICBsb2NhbC5nZXR0ZXJzLCAvLyBsb2NhbCBnZXR0ZXJzXG4gICAgICBzdG9yZS5zdGF0ZSwgLy8gcm9vdCBzdGF0ZVxuICAgICAgc3RvcmUuZ2V0dGVycyAvLyByb290IGdldHRlcnNcbiAgICApXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuYWJsZVN0cmljdE1vZGUgKHN0b3JlKSB7XG4gIHN0b3JlLl92bS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YS4kJHN0YXRlIH0sIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgYXNzZXJ0KHN0b3JlLl9jb21taXR0aW5nLCBcIkRvIG5vdCBtdXRhdGUgdnVleCBzdG9yZSBzdGF0ZSBvdXRzaWRlIG11dGF0aW9uIGhhbmRsZXJzLlwiKTtcbiAgICB9XG4gIH0sIHsgZGVlcDogdHJ1ZSwgc3luYzogdHJ1ZSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TmVzdGVkU3RhdGUgKHN0YXRlLCBwYXRoKSB7XG4gIHJldHVybiBwYXRoLmxlbmd0aFxuICAgID8gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKHN0YXRlLCBrZXkpIHsgcmV0dXJuIHN0YXRlW2tleV07IH0sIHN0YXRlKVxuICAgIDogc3RhdGVcbn1cblxuZnVuY3Rpb24gdW5pZnlPYmplY3RTdHlsZSAodHlwZSwgcGF5bG9hZCwgb3B0aW9ucykge1xuICBpZiAoaXNPYmplY3QodHlwZSkgJiYgdHlwZS50eXBlKSB7XG4gICAgb3B0aW9ucyA9IHBheWxvYWQ7XG4gICAgcGF5bG9hZCA9IHR5cGU7XG4gICAgdHlwZSA9IHR5cGUudHlwZTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJywgKFwiRXhwZWN0cyBzdHJpbmcgYXMgdGhlIHR5cGUsIGJ1dCBmb3VuZCBcIiArICh0eXBlb2YgdHlwZSkgKyBcIi5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCwgb3B0aW9uczogb3B0aW9ucyB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGwgKF9WdWUpIHtcbiAgaWYgKFZ1ZSAmJiBfVnVlID09PSBWdWUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ1t2dWV4XSBhbHJlYWR5IGluc3RhbGxlZC4gVnVlLnVzZShWdWV4KSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZS4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBWdWUgPSBfVnVlO1xuICBhcHBseU1peGluKFZ1ZSk7XG59XG5cbnZhciBtYXBTdGF0ZSA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBzdGF0ZXMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAoc3RhdGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkU3RhdGUgKCkge1xuICAgICAgdmFyIHN0YXRlID0gdGhpcy4kc3RvcmUuc3RhdGU7XG4gICAgICB2YXIgZ2V0dGVycyA9IHRoaXMuJHN0b3JlLmdldHRlcnM7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcFN0YXRlJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IG1vZHVsZS5jb250ZXh0LnN0YXRlO1xuICAgICAgICBnZXR0ZXJzID0gbW9kdWxlLmNvbnRleHQuZ2V0dGVycztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmNhbGwodGhpcywgc3RhdGUsIGdldHRlcnMpXG4gICAgICAgIDogc3RhdGVbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG52YXIgbWFwTXV0YXRpb25zID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIG11dGF0aW9ucykge1xuICB2YXIgcmVzID0ge307XG4gIG5vcm1hbGl6ZU1hcChtdXRhdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRNdXRhdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgdmFyIGNvbW1pdCA9IHRoaXMuJHN0b3JlLmNvbW1pdDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwTXV0YXRpb25zJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb21taXQgPSBtb2R1bGUuY29udGV4dC5jb21taXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5hcHBseSh0aGlzLCBbY29tbWl0XS5jb25jYXQoYXJncykpXG4gICAgICAgIDogY29tbWl0LmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG52YXIgbWFwR2V0dGVycyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBnZXR0ZXJzKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKGdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgdmFsID0gbmFtZXNwYWNlICsgdmFsO1xuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkR2V0dGVyICgpIHtcbiAgICAgIGlmIChuYW1lc3BhY2UgJiYgIWdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwR2V0dGVycycsIG5hbWVzcGFjZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhKHZhbCBpbiB0aGlzLiRzdG9yZS5nZXR0ZXJzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGdldHRlcjogXCIgKyB2YWwpKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1t2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbnZhciBtYXBBY3Rpb25zID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGFjdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAoYWN0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZEFjdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgdmFyIGRpc3BhdGNoID0gdGhpcy4kc3RvcmUuZGlzcGF0Y2g7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEFjdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoID0gbW9kdWxlLmNvbnRleHQuZGlzcGF0Y2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5hcHBseSh0aGlzLCBbZGlzcGF0Y2hdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBkaXNwYXRjaC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxudmFyIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSkgeyByZXR1cm4gKHtcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSlcbn0pOyB9O1xuXG5mdW5jdGlvbiBub3JtYWxpemVNYXAgKG1hcCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXApXG4gICAgPyBtYXAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7IGtleToga2V5LCB2YWw6IGtleSB9KTsgfSlcbiAgICA6IE9iamVjdC5rZXlzKG1hcCkubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7IGtleToga2V5LCB2YWw6IG1hcFtrZXldIH0pOyB9KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lc3BhY2UgKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmFtZXNwYWNlLCBtYXApIHtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG1hcCA9IG5hbWVzcGFjZTtcbiAgICAgIG5hbWVzcGFjZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlLmNoYXJBdChuYW1lc3BhY2UubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgbmFtZXNwYWNlICs9ICcvJztcbiAgICB9XG4gICAgcmV0dXJuIGZuKG5hbWVzcGFjZSwgbWFwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldE1vZHVsZUJ5TmFtZXNwYWNlIChzdG9yZSwgaGVscGVyLCBuYW1lc3BhY2UpIHtcbiAgdmFyIG1vZHVsZSA9IHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFtb2R1bGUpIHtcbiAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBtb2R1bGUgbmFtZXNwYWNlIG5vdCBmb3VuZCBpbiBcIiArIGhlbHBlciArIFwiKCk6IFwiICsgbmFtZXNwYWNlKSk7XG4gIH1cbiAgcmV0dXJuIG1vZHVsZVxufVxuXG52YXIgaW5kZXhfZXNtID0ge1xuICBTdG9yZTogU3RvcmUsXG4gIGluc3RhbGw6IGluc3RhbGwsXG4gIHZlcnNpb246ICczLjAuMScsXG4gIG1hcFN0YXRlOiBtYXBTdGF0ZSxcbiAgbWFwTXV0YXRpb25zOiBtYXBNdXRhdGlvbnMsXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMsXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMsXG4gIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzOiBjcmVhdGVOYW1lc3BhY2VkSGVscGVyc1xufTtcblxuZXhwb3J0IHsgU3RvcmUsIGluc3RhbGwsIG1hcFN0YXRlLCBtYXBNdXRhdGlvbnMsIG1hcEdldHRlcnMsIG1hcEFjdGlvbnMsIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBpbmRleF9lc207XG4iLCIndXNlIHN0cmljdCdcclxuXHJcbmltcG9ydCBtb2R1bGVzIGZyb20gJy4vbW9kdWxlcydcclxuaW1wb3J0IFZ1ZXggZnJvbSAndnVleCdcclxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcblxyXG5WdWUudXNlKFZ1ZXgpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgVnVleC5TdG9yZSh7XHJcblx0bW9kdWxlcyxcclxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuXHRzdHJpY3Q6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcclxufSlcclxuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgcm91dGVyIGZyb20gJy4uL3JvdXRlcidcclxuaW1wb3J0IHN0b3JlIGZyb20gJy4uL3N0b3JlJ1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXHJcbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5cclxuYXhpb3MuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShcclxuXHQocmVzcCkgPT4ge1xyXG5cdFx0cmV0dXJuIHJlc3BcclxuXHR9LFxyXG5cdChlcnIpID0+IHtcclxuXHRcdGlmICghZXJyLnJlc3BvbnNlKSB7XHJcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgeyByZXNwb25zZSB9ID0gZXJyXHJcblxyXG5cdFx0aWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XHJcblx0XHRcdHJvdXRlci5wdXNoKHsgbmFtZTogJ2Rhc2hib2FyZCcgfSlcclxuXHRcdFx0c3RvcmUuY29tbWl0KCdDTEVBUl9VU0VSJylcclxuXHRcdFx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXInKVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChyZXNwb25zZS5kYXRhICYmIHJlc3BvbnNlLmRhdGEubWVzc2FnZSkge1xyXG5cdFx0XHQvLyBUT0RPIFNob3cgbWVzc2FnZVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXHJcblx0fVxyXG4pXHJcblxyXG5WdWUucHJvdG90eXBlLiRheGlvcyA9IGF4aW9zXHJcbiIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0IHJvdXRlciBmcm9tICcuL3JvdXRlcidcclxuaW1wb3J0IEFwcCBmcm9tICcuL0FwcC52dWUnXHJcbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlJ1xyXG5pbXBvcnQgJy4vY29uZmlnL2F4aW9zJ1xyXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcclxuXHJcbi8vIEltcG9ydCBzdHlsZXNcclxuaW1wb3J0ICcuL3N0eWxlcy9pbmRleCdcclxuXHJcbi8vIFByZXZlbnQgdGhlIHByb2R1Y3Rpb24gdGlwIG9uIFZ1ZSBzdGFydHVwXHJcblZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlXHJcblxyXG5uZXcgVnVlKHtcclxuXHRlbDogJyNhcHAnLFxyXG5cdHN0b3JlLFxyXG5cdHJvdXRlcixcclxuXHRyZW5kZXI6IGggPT4gaChBcHApXHJcbn0pXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=